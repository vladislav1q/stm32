
001-LED.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000091c8  080000c0  080000c0  000100c0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000032c  08009288  08009288  00019288  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080095b4  080095b4  00020078  2**0
                  CONTENTS
  4 .ARM          00000000  080095b4  080095b4  00020078  2**0
                  CONTENTS
  5 .preinit_array 00000000  080095b4  080095b4  00020078  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080095b4  080095b4  000195b4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080095b8  080095b8  000195b8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000078  20000000  080095bc  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000151c  20000078  08009634  00020078  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20001594  08009634  00021594  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  00020078  2**0
                  CONTENTS, READONLY
 12 .debug_info   00012368  00000000  00000000  000200a0  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00002b98  00000000  00000000  00032408  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 000011f0  00000000  00000000  00034fa0  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00001088  00000000  00000000  00036190  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00011415  00000000  00000000  00037218  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   000119e9  00000000  00000000  0004862d  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    00063b89  00000000  00000000  0005a016  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  000bdb9f  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004560  00000000  00000000  000bdc1c  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	; (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	; (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	; (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	20000078 	.word	0x20000078
 80000e0:	00000000 	.word	0x00000000
 80000e4:	08009270 	.word	0x08009270

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	; (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	; (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	; (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			; (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	2000007c 	.word	0x2000007c
 8000104:	08009270 	.word	0x08009270

08000108 <__udivsi3>:
 8000108:	2200      	movs	r2, #0
 800010a:	0843      	lsrs	r3, r0, #1
 800010c:	428b      	cmp	r3, r1
 800010e:	d374      	bcc.n	80001fa <__udivsi3+0xf2>
 8000110:	0903      	lsrs	r3, r0, #4
 8000112:	428b      	cmp	r3, r1
 8000114:	d35f      	bcc.n	80001d6 <__udivsi3+0xce>
 8000116:	0a03      	lsrs	r3, r0, #8
 8000118:	428b      	cmp	r3, r1
 800011a:	d344      	bcc.n	80001a6 <__udivsi3+0x9e>
 800011c:	0b03      	lsrs	r3, r0, #12
 800011e:	428b      	cmp	r3, r1
 8000120:	d328      	bcc.n	8000174 <__udivsi3+0x6c>
 8000122:	0c03      	lsrs	r3, r0, #16
 8000124:	428b      	cmp	r3, r1
 8000126:	d30d      	bcc.n	8000144 <__udivsi3+0x3c>
 8000128:	22ff      	movs	r2, #255	; 0xff
 800012a:	0209      	lsls	r1, r1, #8
 800012c:	ba12      	rev	r2, r2
 800012e:	0c03      	lsrs	r3, r0, #16
 8000130:	428b      	cmp	r3, r1
 8000132:	d302      	bcc.n	800013a <__udivsi3+0x32>
 8000134:	1212      	asrs	r2, r2, #8
 8000136:	0209      	lsls	r1, r1, #8
 8000138:	d065      	beq.n	8000206 <__udivsi3+0xfe>
 800013a:	0b03      	lsrs	r3, r0, #12
 800013c:	428b      	cmp	r3, r1
 800013e:	d319      	bcc.n	8000174 <__udivsi3+0x6c>
 8000140:	e000      	b.n	8000144 <__udivsi3+0x3c>
 8000142:	0a09      	lsrs	r1, r1, #8
 8000144:	0bc3      	lsrs	r3, r0, #15
 8000146:	428b      	cmp	r3, r1
 8000148:	d301      	bcc.n	800014e <__udivsi3+0x46>
 800014a:	03cb      	lsls	r3, r1, #15
 800014c:	1ac0      	subs	r0, r0, r3
 800014e:	4152      	adcs	r2, r2
 8000150:	0b83      	lsrs	r3, r0, #14
 8000152:	428b      	cmp	r3, r1
 8000154:	d301      	bcc.n	800015a <__udivsi3+0x52>
 8000156:	038b      	lsls	r3, r1, #14
 8000158:	1ac0      	subs	r0, r0, r3
 800015a:	4152      	adcs	r2, r2
 800015c:	0b43      	lsrs	r3, r0, #13
 800015e:	428b      	cmp	r3, r1
 8000160:	d301      	bcc.n	8000166 <__udivsi3+0x5e>
 8000162:	034b      	lsls	r3, r1, #13
 8000164:	1ac0      	subs	r0, r0, r3
 8000166:	4152      	adcs	r2, r2
 8000168:	0b03      	lsrs	r3, r0, #12
 800016a:	428b      	cmp	r3, r1
 800016c:	d301      	bcc.n	8000172 <__udivsi3+0x6a>
 800016e:	030b      	lsls	r3, r1, #12
 8000170:	1ac0      	subs	r0, r0, r3
 8000172:	4152      	adcs	r2, r2
 8000174:	0ac3      	lsrs	r3, r0, #11
 8000176:	428b      	cmp	r3, r1
 8000178:	d301      	bcc.n	800017e <__udivsi3+0x76>
 800017a:	02cb      	lsls	r3, r1, #11
 800017c:	1ac0      	subs	r0, r0, r3
 800017e:	4152      	adcs	r2, r2
 8000180:	0a83      	lsrs	r3, r0, #10
 8000182:	428b      	cmp	r3, r1
 8000184:	d301      	bcc.n	800018a <__udivsi3+0x82>
 8000186:	028b      	lsls	r3, r1, #10
 8000188:	1ac0      	subs	r0, r0, r3
 800018a:	4152      	adcs	r2, r2
 800018c:	0a43      	lsrs	r3, r0, #9
 800018e:	428b      	cmp	r3, r1
 8000190:	d301      	bcc.n	8000196 <__udivsi3+0x8e>
 8000192:	024b      	lsls	r3, r1, #9
 8000194:	1ac0      	subs	r0, r0, r3
 8000196:	4152      	adcs	r2, r2
 8000198:	0a03      	lsrs	r3, r0, #8
 800019a:	428b      	cmp	r3, r1
 800019c:	d301      	bcc.n	80001a2 <__udivsi3+0x9a>
 800019e:	020b      	lsls	r3, r1, #8
 80001a0:	1ac0      	subs	r0, r0, r3
 80001a2:	4152      	adcs	r2, r2
 80001a4:	d2cd      	bcs.n	8000142 <__udivsi3+0x3a>
 80001a6:	09c3      	lsrs	r3, r0, #7
 80001a8:	428b      	cmp	r3, r1
 80001aa:	d301      	bcc.n	80001b0 <__udivsi3+0xa8>
 80001ac:	01cb      	lsls	r3, r1, #7
 80001ae:	1ac0      	subs	r0, r0, r3
 80001b0:	4152      	adcs	r2, r2
 80001b2:	0983      	lsrs	r3, r0, #6
 80001b4:	428b      	cmp	r3, r1
 80001b6:	d301      	bcc.n	80001bc <__udivsi3+0xb4>
 80001b8:	018b      	lsls	r3, r1, #6
 80001ba:	1ac0      	subs	r0, r0, r3
 80001bc:	4152      	adcs	r2, r2
 80001be:	0943      	lsrs	r3, r0, #5
 80001c0:	428b      	cmp	r3, r1
 80001c2:	d301      	bcc.n	80001c8 <__udivsi3+0xc0>
 80001c4:	014b      	lsls	r3, r1, #5
 80001c6:	1ac0      	subs	r0, r0, r3
 80001c8:	4152      	adcs	r2, r2
 80001ca:	0903      	lsrs	r3, r0, #4
 80001cc:	428b      	cmp	r3, r1
 80001ce:	d301      	bcc.n	80001d4 <__udivsi3+0xcc>
 80001d0:	010b      	lsls	r3, r1, #4
 80001d2:	1ac0      	subs	r0, r0, r3
 80001d4:	4152      	adcs	r2, r2
 80001d6:	08c3      	lsrs	r3, r0, #3
 80001d8:	428b      	cmp	r3, r1
 80001da:	d301      	bcc.n	80001e0 <__udivsi3+0xd8>
 80001dc:	00cb      	lsls	r3, r1, #3
 80001de:	1ac0      	subs	r0, r0, r3
 80001e0:	4152      	adcs	r2, r2
 80001e2:	0883      	lsrs	r3, r0, #2
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d301      	bcc.n	80001ec <__udivsi3+0xe4>
 80001e8:	008b      	lsls	r3, r1, #2
 80001ea:	1ac0      	subs	r0, r0, r3
 80001ec:	4152      	adcs	r2, r2
 80001ee:	0843      	lsrs	r3, r0, #1
 80001f0:	428b      	cmp	r3, r1
 80001f2:	d301      	bcc.n	80001f8 <__udivsi3+0xf0>
 80001f4:	004b      	lsls	r3, r1, #1
 80001f6:	1ac0      	subs	r0, r0, r3
 80001f8:	4152      	adcs	r2, r2
 80001fa:	1a41      	subs	r1, r0, r1
 80001fc:	d200      	bcs.n	8000200 <__udivsi3+0xf8>
 80001fe:	4601      	mov	r1, r0
 8000200:	4152      	adcs	r2, r2
 8000202:	4610      	mov	r0, r2
 8000204:	4770      	bx	lr
 8000206:	e7ff      	b.n	8000208 <__udivsi3+0x100>
 8000208:	b501      	push	{r0, lr}
 800020a:	2000      	movs	r0, #0
 800020c:	f000 f806 	bl	800021c <__aeabi_idiv0>
 8000210:	bd02      	pop	{r1, pc}
 8000212:	46c0      	nop			; (mov r8, r8)

08000214 <__aeabi_uidivmod>:
 8000214:	2900      	cmp	r1, #0
 8000216:	d0f7      	beq.n	8000208 <__udivsi3+0x100>
 8000218:	e776      	b.n	8000108 <__udivsi3>
 800021a:	4770      	bx	lr

0800021c <__aeabi_idiv0>:
 800021c:	4770      	bx	lr
 800021e:	46c0      	nop			; (mov r8, r8)

08000220 <__aeabi_cdrcmple>:
 8000220:	4684      	mov	ip, r0
 8000222:	1c10      	adds	r0, r2, #0
 8000224:	4662      	mov	r2, ip
 8000226:	468c      	mov	ip, r1
 8000228:	1c19      	adds	r1, r3, #0
 800022a:	4663      	mov	r3, ip
 800022c:	e000      	b.n	8000230 <__aeabi_cdcmpeq>
 800022e:	46c0      	nop			; (mov r8, r8)

08000230 <__aeabi_cdcmpeq>:
 8000230:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8000232:	f001 fe13 	bl	8001e5c <__ledf2>
 8000236:	2800      	cmp	r0, #0
 8000238:	d401      	bmi.n	800023e <__aeabi_cdcmpeq+0xe>
 800023a:	2100      	movs	r1, #0
 800023c:	42c8      	cmn	r0, r1
 800023e:	bd1f      	pop	{r0, r1, r2, r3, r4, pc}

08000240 <__aeabi_dcmpeq>:
 8000240:	b510      	push	{r4, lr}
 8000242:	f001 fd6b 	bl	8001d1c <__eqdf2>
 8000246:	4240      	negs	r0, r0
 8000248:	3001      	adds	r0, #1
 800024a:	bd10      	pop	{r4, pc}

0800024c <__aeabi_dcmplt>:
 800024c:	b510      	push	{r4, lr}
 800024e:	f001 fe05 	bl	8001e5c <__ledf2>
 8000252:	2800      	cmp	r0, #0
 8000254:	db01      	blt.n	800025a <__aeabi_dcmplt+0xe>
 8000256:	2000      	movs	r0, #0
 8000258:	bd10      	pop	{r4, pc}
 800025a:	2001      	movs	r0, #1
 800025c:	bd10      	pop	{r4, pc}
 800025e:	46c0      	nop			; (mov r8, r8)

08000260 <__aeabi_dcmple>:
 8000260:	b510      	push	{r4, lr}
 8000262:	f001 fdfb 	bl	8001e5c <__ledf2>
 8000266:	2800      	cmp	r0, #0
 8000268:	dd01      	ble.n	800026e <__aeabi_dcmple+0xe>
 800026a:	2000      	movs	r0, #0
 800026c:	bd10      	pop	{r4, pc}
 800026e:	2001      	movs	r0, #1
 8000270:	bd10      	pop	{r4, pc}
 8000272:	46c0      	nop			; (mov r8, r8)

08000274 <__aeabi_dcmpgt>:
 8000274:	b510      	push	{r4, lr}
 8000276:	f001 fd8d 	bl	8001d94 <__gedf2>
 800027a:	2800      	cmp	r0, #0
 800027c:	dc01      	bgt.n	8000282 <__aeabi_dcmpgt+0xe>
 800027e:	2000      	movs	r0, #0
 8000280:	bd10      	pop	{r4, pc}
 8000282:	2001      	movs	r0, #1
 8000284:	bd10      	pop	{r4, pc}
 8000286:	46c0      	nop			; (mov r8, r8)

08000288 <__aeabi_dcmpge>:
 8000288:	b510      	push	{r4, lr}
 800028a:	f001 fd83 	bl	8001d94 <__gedf2>
 800028e:	2800      	cmp	r0, #0
 8000290:	da01      	bge.n	8000296 <__aeabi_dcmpge+0xe>
 8000292:	2000      	movs	r0, #0
 8000294:	bd10      	pop	{r4, pc}
 8000296:	2001      	movs	r0, #1
 8000298:	bd10      	pop	{r4, pc}
 800029a:	46c0      	nop			; (mov r8, r8)

0800029c <__aeabi_cfrcmple>:
 800029c:	4684      	mov	ip, r0
 800029e:	1c08      	adds	r0, r1, #0
 80002a0:	4661      	mov	r1, ip
 80002a2:	e7ff      	b.n	80002a4 <__aeabi_cfcmpeq>

080002a4 <__aeabi_cfcmpeq>:
 80002a4:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80002a6:	f000 fb55 	bl	8000954 <__lesf2>
 80002aa:	2800      	cmp	r0, #0
 80002ac:	d401      	bmi.n	80002b2 <__aeabi_cfcmpeq+0xe>
 80002ae:	2100      	movs	r1, #0
 80002b0:	42c8      	cmn	r0, r1
 80002b2:	bd1f      	pop	{r0, r1, r2, r3, r4, pc}

080002b4 <__aeabi_fcmpeq>:
 80002b4:	b510      	push	{r4, lr}
 80002b6:	f000 fad7 	bl	8000868 <__eqsf2>
 80002ba:	4240      	negs	r0, r0
 80002bc:	3001      	adds	r0, #1
 80002be:	bd10      	pop	{r4, pc}

080002c0 <__aeabi_fcmplt>:
 80002c0:	b510      	push	{r4, lr}
 80002c2:	f000 fb47 	bl	8000954 <__lesf2>
 80002c6:	2800      	cmp	r0, #0
 80002c8:	db01      	blt.n	80002ce <__aeabi_fcmplt+0xe>
 80002ca:	2000      	movs	r0, #0
 80002cc:	bd10      	pop	{r4, pc}
 80002ce:	2001      	movs	r0, #1
 80002d0:	bd10      	pop	{r4, pc}
 80002d2:	46c0      	nop			; (mov r8, r8)

080002d4 <__aeabi_fcmple>:
 80002d4:	b510      	push	{r4, lr}
 80002d6:	f000 fb3d 	bl	8000954 <__lesf2>
 80002da:	2800      	cmp	r0, #0
 80002dc:	dd01      	ble.n	80002e2 <__aeabi_fcmple+0xe>
 80002de:	2000      	movs	r0, #0
 80002e0:	bd10      	pop	{r4, pc}
 80002e2:	2001      	movs	r0, #1
 80002e4:	bd10      	pop	{r4, pc}
 80002e6:	46c0      	nop			; (mov r8, r8)

080002e8 <__aeabi_fcmpgt>:
 80002e8:	b510      	push	{r4, lr}
 80002ea:	f000 fae5 	bl	80008b8 <__gesf2>
 80002ee:	2800      	cmp	r0, #0
 80002f0:	dc01      	bgt.n	80002f6 <__aeabi_fcmpgt+0xe>
 80002f2:	2000      	movs	r0, #0
 80002f4:	bd10      	pop	{r4, pc}
 80002f6:	2001      	movs	r0, #1
 80002f8:	bd10      	pop	{r4, pc}
 80002fa:	46c0      	nop			; (mov r8, r8)

080002fc <__aeabi_fcmpge>:
 80002fc:	b510      	push	{r4, lr}
 80002fe:	f000 fadb 	bl	80008b8 <__gesf2>
 8000302:	2800      	cmp	r0, #0
 8000304:	da01      	bge.n	800030a <__aeabi_fcmpge+0xe>
 8000306:	2000      	movs	r0, #0
 8000308:	bd10      	pop	{r4, pc}
 800030a:	2001      	movs	r0, #1
 800030c:	bd10      	pop	{r4, pc}
 800030e:	46c0      	nop			; (mov r8, r8)

08000310 <__aeabi_fadd>:
 8000310:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000312:	4647      	mov	r7, r8
 8000314:	46ce      	mov	lr, r9
 8000316:	0243      	lsls	r3, r0, #9
 8000318:	0a5b      	lsrs	r3, r3, #9
 800031a:	0044      	lsls	r4, r0, #1
 800031c:	0fc2      	lsrs	r2, r0, #31
 800031e:	469c      	mov	ip, r3
 8000320:	0048      	lsls	r0, r1, #1
 8000322:	00dd      	lsls	r5, r3, #3
 8000324:	024b      	lsls	r3, r1, #9
 8000326:	0e24      	lsrs	r4, r4, #24
 8000328:	0a5b      	lsrs	r3, r3, #9
 800032a:	0e00      	lsrs	r0, r0, #24
 800032c:	b580      	push	{r7, lr}
 800032e:	4698      	mov	r8, r3
 8000330:	0026      	movs	r6, r4
 8000332:	4691      	mov	r9, r2
 8000334:	0fc9      	lsrs	r1, r1, #31
 8000336:	00db      	lsls	r3, r3, #3
 8000338:	1a27      	subs	r7, r4, r0
 800033a:	428a      	cmp	r2, r1
 800033c:	d029      	beq.n	8000392 <__aeabi_fadd+0x82>
 800033e:	2f00      	cmp	r7, #0
 8000340:	dd15      	ble.n	800036e <__aeabi_fadd+0x5e>
 8000342:	2800      	cmp	r0, #0
 8000344:	d14a      	bne.n	80003dc <__aeabi_fadd+0xcc>
 8000346:	2b00      	cmp	r3, #0
 8000348:	d000      	beq.n	800034c <__aeabi_fadd+0x3c>
 800034a:	e095      	b.n	8000478 <__aeabi_fadd+0x168>
 800034c:	08ed      	lsrs	r5, r5, #3
 800034e:	2cff      	cmp	r4, #255	; 0xff
 8000350:	d100      	bne.n	8000354 <__aeabi_fadd+0x44>
 8000352:	e088      	b.n	8000466 <__aeabi_fadd+0x156>
 8000354:	026b      	lsls	r3, r5, #9
 8000356:	0a5b      	lsrs	r3, r3, #9
 8000358:	b2e6      	uxtb	r6, r4
 800035a:	025b      	lsls	r3, r3, #9
 800035c:	05f6      	lsls	r6, r6, #23
 800035e:	0a58      	lsrs	r0, r3, #9
 8000360:	4330      	orrs	r0, r6
 8000362:	07d2      	lsls	r2, r2, #31
 8000364:	4310      	orrs	r0, r2
 8000366:	bc0c      	pop	{r2, r3}
 8000368:	4690      	mov	r8, r2
 800036a:	4699      	mov	r9, r3
 800036c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800036e:	2f00      	cmp	r7, #0
 8000370:	d000      	beq.n	8000374 <__aeabi_fadd+0x64>
 8000372:	e087      	b.n	8000484 <__aeabi_fadd+0x174>
 8000374:	1c60      	adds	r0, r4, #1
 8000376:	b2c0      	uxtb	r0, r0
 8000378:	2801      	cmp	r0, #1
 800037a:	dc00      	bgt.n	800037e <__aeabi_fadd+0x6e>
 800037c:	e0b6      	b.n	80004ec <__aeabi_fadd+0x1dc>
 800037e:	1aee      	subs	r6, r5, r3
 8000380:	0172      	lsls	r2, r6, #5
 8000382:	d500      	bpl.n	8000386 <__aeabi_fadd+0x76>
 8000384:	e0c5      	b.n	8000512 <__aeabi_fadd+0x202>
 8000386:	2e00      	cmp	r6, #0
 8000388:	d13d      	bne.n	8000406 <__aeabi_fadd+0xf6>
 800038a:	2200      	movs	r2, #0
 800038c:	2600      	movs	r6, #0
 800038e:	2300      	movs	r3, #0
 8000390:	e7e3      	b.n	800035a <__aeabi_fadd+0x4a>
 8000392:	2f00      	cmp	r7, #0
 8000394:	dc00      	bgt.n	8000398 <__aeabi_fadd+0x88>
 8000396:	e096      	b.n	80004c6 <__aeabi_fadd+0x1b6>
 8000398:	2800      	cmp	r0, #0
 800039a:	d05d      	beq.n	8000458 <__aeabi_fadd+0x148>
 800039c:	2cff      	cmp	r4, #255	; 0xff
 800039e:	d060      	beq.n	8000462 <__aeabi_fadd+0x152>
 80003a0:	2280      	movs	r2, #128	; 0x80
 80003a2:	04d2      	lsls	r2, r2, #19
 80003a4:	4313      	orrs	r3, r2
 80003a6:	2f1b      	cmp	r7, #27
 80003a8:	dd00      	ble.n	80003ac <__aeabi_fadd+0x9c>
 80003aa:	e0ec      	b.n	8000586 <__aeabi_fadd+0x276>
 80003ac:	2220      	movs	r2, #32
 80003ae:	1bd2      	subs	r2, r2, r7
 80003b0:	0018      	movs	r0, r3
 80003b2:	4093      	lsls	r3, r2
 80003b4:	40f8      	lsrs	r0, r7
 80003b6:	1e5a      	subs	r2, r3, #1
 80003b8:	4193      	sbcs	r3, r2
 80003ba:	4303      	orrs	r3, r0
 80003bc:	18ed      	adds	r5, r5, r3
 80003be:	016b      	lsls	r3, r5, #5
 80003c0:	d57b      	bpl.n	80004ba <__aeabi_fadd+0x1aa>
 80003c2:	3401      	adds	r4, #1
 80003c4:	2cff      	cmp	r4, #255	; 0xff
 80003c6:	d100      	bne.n	80003ca <__aeabi_fadd+0xba>
 80003c8:	e0b7      	b.n	800053a <__aeabi_fadd+0x22a>
 80003ca:	2201      	movs	r2, #1
 80003cc:	2607      	movs	r6, #7
 80003ce:	402a      	ands	r2, r5
 80003d0:	086b      	lsrs	r3, r5, #1
 80003d2:	4d9a      	ldr	r5, [pc, #616]	; (800063c <__aeabi_fadd+0x32c>)
 80003d4:	401d      	ands	r5, r3
 80003d6:	4315      	orrs	r5, r2
 80003d8:	402e      	ands	r6, r5
 80003da:	e029      	b.n	8000430 <__aeabi_fadd+0x120>
 80003dc:	2cff      	cmp	r4, #255	; 0xff
 80003de:	d0b5      	beq.n	800034c <__aeabi_fadd+0x3c>
 80003e0:	2280      	movs	r2, #128	; 0x80
 80003e2:	04d2      	lsls	r2, r2, #19
 80003e4:	4313      	orrs	r3, r2
 80003e6:	2f1b      	cmp	r7, #27
 80003e8:	dd00      	ble.n	80003ec <__aeabi_fadd+0xdc>
 80003ea:	e0b2      	b.n	8000552 <__aeabi_fadd+0x242>
 80003ec:	2220      	movs	r2, #32
 80003ee:	1bd2      	subs	r2, r2, r7
 80003f0:	0019      	movs	r1, r3
 80003f2:	4093      	lsls	r3, r2
 80003f4:	40f9      	lsrs	r1, r7
 80003f6:	1e5a      	subs	r2, r3, #1
 80003f8:	4193      	sbcs	r3, r2
 80003fa:	430b      	orrs	r3, r1
 80003fc:	1aed      	subs	r5, r5, r3
 80003fe:	016b      	lsls	r3, r5, #5
 8000400:	d55b      	bpl.n	80004ba <__aeabi_fadd+0x1aa>
 8000402:	01ad      	lsls	r5, r5, #6
 8000404:	09ae      	lsrs	r6, r5, #6
 8000406:	0030      	movs	r0, r6
 8000408:	f002 fc90 	bl	8002d2c <__clzsi2>
 800040c:	3805      	subs	r0, #5
 800040e:	4086      	lsls	r6, r0
 8000410:	4284      	cmp	r4, r0
 8000412:	dc65      	bgt.n	80004e0 <__aeabi_fadd+0x1d0>
 8000414:	1b04      	subs	r4, r0, r4
 8000416:	0033      	movs	r3, r6
 8000418:	2020      	movs	r0, #32
 800041a:	3401      	adds	r4, #1
 800041c:	40e3      	lsrs	r3, r4
 800041e:	1b04      	subs	r4, r0, r4
 8000420:	40a6      	lsls	r6, r4
 8000422:	1e75      	subs	r5, r6, #1
 8000424:	41ae      	sbcs	r6, r5
 8000426:	4333      	orrs	r3, r6
 8000428:	2607      	movs	r6, #7
 800042a:	001d      	movs	r5, r3
 800042c:	2400      	movs	r4, #0
 800042e:	401e      	ands	r6, r3
 8000430:	2201      	movs	r2, #1
 8000432:	464b      	mov	r3, r9
 8000434:	401a      	ands	r2, r3
 8000436:	2e00      	cmp	r6, #0
 8000438:	d004      	beq.n	8000444 <__aeabi_fadd+0x134>
 800043a:	230f      	movs	r3, #15
 800043c:	402b      	ands	r3, r5
 800043e:	2b04      	cmp	r3, #4
 8000440:	d000      	beq.n	8000444 <__aeabi_fadd+0x134>
 8000442:	3504      	adds	r5, #4
 8000444:	016b      	lsls	r3, r5, #5
 8000446:	d400      	bmi.n	800044a <__aeabi_fadd+0x13a>
 8000448:	e780      	b.n	800034c <__aeabi_fadd+0x3c>
 800044a:	3401      	adds	r4, #1
 800044c:	b2e6      	uxtb	r6, r4
 800044e:	2cff      	cmp	r4, #255	; 0xff
 8000450:	d12f      	bne.n	80004b2 <__aeabi_fadd+0x1a2>
 8000452:	26ff      	movs	r6, #255	; 0xff
 8000454:	2300      	movs	r3, #0
 8000456:	e780      	b.n	800035a <__aeabi_fadd+0x4a>
 8000458:	2b00      	cmp	r3, #0
 800045a:	d152      	bne.n	8000502 <__aeabi_fadd+0x1f2>
 800045c:	2cff      	cmp	r4, #255	; 0xff
 800045e:	d000      	beq.n	8000462 <__aeabi_fadd+0x152>
 8000460:	e774      	b.n	800034c <__aeabi_fadd+0x3c>
 8000462:	000a      	movs	r2, r1
 8000464:	08ed      	lsrs	r5, r5, #3
 8000466:	2d00      	cmp	r5, #0
 8000468:	d0f3      	beq.n	8000452 <__aeabi_fadd+0x142>
 800046a:	2380      	movs	r3, #128	; 0x80
 800046c:	03db      	lsls	r3, r3, #15
 800046e:	432b      	orrs	r3, r5
 8000470:	025b      	lsls	r3, r3, #9
 8000472:	0a5b      	lsrs	r3, r3, #9
 8000474:	26ff      	movs	r6, #255	; 0xff
 8000476:	e770      	b.n	800035a <__aeabi_fadd+0x4a>
 8000478:	3f01      	subs	r7, #1
 800047a:	2f00      	cmp	r7, #0
 800047c:	d0be      	beq.n	80003fc <__aeabi_fadd+0xec>
 800047e:	2cff      	cmp	r4, #255	; 0xff
 8000480:	d1b1      	bne.n	80003e6 <__aeabi_fadd+0xd6>
 8000482:	e763      	b.n	800034c <__aeabi_fadd+0x3c>
 8000484:	2c00      	cmp	r4, #0
 8000486:	d047      	beq.n	8000518 <__aeabi_fadd+0x208>
 8000488:	28ff      	cmp	r0, #255	; 0xff
 800048a:	d069      	beq.n	8000560 <__aeabi_fadd+0x250>
 800048c:	2480      	movs	r4, #128	; 0x80
 800048e:	04e4      	lsls	r4, r4, #19
 8000490:	427a      	negs	r2, r7
 8000492:	4325      	orrs	r5, r4
 8000494:	2a1b      	cmp	r2, #27
 8000496:	dd00      	ble.n	800049a <__aeabi_fadd+0x18a>
 8000498:	e0c5      	b.n	8000626 <__aeabi_fadd+0x316>
 800049a:	002c      	movs	r4, r5
 800049c:	2620      	movs	r6, #32
 800049e:	40d4      	lsrs	r4, r2
 80004a0:	1ab2      	subs	r2, r6, r2
 80004a2:	4095      	lsls	r5, r2
 80004a4:	1e6a      	subs	r2, r5, #1
 80004a6:	4195      	sbcs	r5, r2
 80004a8:	4325      	orrs	r5, r4
 80004aa:	1b5d      	subs	r5, r3, r5
 80004ac:	0004      	movs	r4, r0
 80004ae:	4689      	mov	r9, r1
 80004b0:	e7a5      	b.n	80003fe <__aeabi_fadd+0xee>
 80004b2:	01ab      	lsls	r3, r5, #6
 80004b4:	0a5b      	lsrs	r3, r3, #9
 80004b6:	e750      	b.n	800035a <__aeabi_fadd+0x4a>
 80004b8:	2400      	movs	r4, #0
 80004ba:	2201      	movs	r2, #1
 80004bc:	464b      	mov	r3, r9
 80004be:	401a      	ands	r2, r3
 80004c0:	076b      	lsls	r3, r5, #29
 80004c2:	d1ba      	bne.n	800043a <__aeabi_fadd+0x12a>
 80004c4:	e742      	b.n	800034c <__aeabi_fadd+0x3c>
 80004c6:	2f00      	cmp	r7, #0
 80004c8:	d13b      	bne.n	8000542 <__aeabi_fadd+0x232>
 80004ca:	3401      	adds	r4, #1
 80004cc:	b2e0      	uxtb	r0, r4
 80004ce:	2801      	cmp	r0, #1
 80004d0:	dd4a      	ble.n	8000568 <__aeabi_fadd+0x258>
 80004d2:	2cff      	cmp	r4, #255	; 0xff
 80004d4:	d0bd      	beq.n	8000452 <__aeabi_fadd+0x142>
 80004d6:	2607      	movs	r6, #7
 80004d8:	18ed      	adds	r5, r5, r3
 80004da:	086d      	lsrs	r5, r5, #1
 80004dc:	402e      	ands	r6, r5
 80004de:	e7a7      	b.n	8000430 <__aeabi_fadd+0x120>
 80004e0:	2307      	movs	r3, #7
 80004e2:	4d57      	ldr	r5, [pc, #348]	; (8000640 <__aeabi_fadd+0x330>)
 80004e4:	1a24      	subs	r4, r4, r0
 80004e6:	4035      	ands	r5, r6
 80004e8:	401e      	ands	r6, r3
 80004ea:	e7a1      	b.n	8000430 <__aeabi_fadd+0x120>
 80004ec:	2c00      	cmp	r4, #0
 80004ee:	d11b      	bne.n	8000528 <__aeabi_fadd+0x218>
 80004f0:	2d00      	cmp	r5, #0
 80004f2:	d16e      	bne.n	80005d2 <__aeabi_fadd+0x2c2>
 80004f4:	2b00      	cmp	r3, #0
 80004f6:	d100      	bne.n	80004fa <__aeabi_fadd+0x1ea>
 80004f8:	e09a      	b.n	8000630 <__aeabi_fadd+0x320>
 80004fa:	000a      	movs	r2, r1
 80004fc:	001d      	movs	r5, r3
 80004fe:	003c      	movs	r4, r7
 8000500:	e724      	b.n	800034c <__aeabi_fadd+0x3c>
 8000502:	3f01      	subs	r7, #1
 8000504:	2f00      	cmp	r7, #0
 8000506:	d100      	bne.n	800050a <__aeabi_fadd+0x1fa>
 8000508:	e758      	b.n	80003bc <__aeabi_fadd+0xac>
 800050a:	2cff      	cmp	r4, #255	; 0xff
 800050c:	d000      	beq.n	8000510 <__aeabi_fadd+0x200>
 800050e:	e74a      	b.n	80003a6 <__aeabi_fadd+0x96>
 8000510:	e7a7      	b.n	8000462 <__aeabi_fadd+0x152>
 8000512:	1b5e      	subs	r6, r3, r5
 8000514:	4689      	mov	r9, r1
 8000516:	e776      	b.n	8000406 <__aeabi_fadd+0xf6>
 8000518:	2d00      	cmp	r5, #0
 800051a:	d11c      	bne.n	8000556 <__aeabi_fadd+0x246>
 800051c:	000a      	movs	r2, r1
 800051e:	28ff      	cmp	r0, #255	; 0xff
 8000520:	d01f      	beq.n	8000562 <__aeabi_fadd+0x252>
 8000522:	0004      	movs	r4, r0
 8000524:	001d      	movs	r5, r3
 8000526:	e711      	b.n	800034c <__aeabi_fadd+0x3c>
 8000528:	2d00      	cmp	r5, #0
 800052a:	d15d      	bne.n	80005e8 <__aeabi_fadd+0x2d8>
 800052c:	2b00      	cmp	r3, #0
 800052e:	d117      	bne.n	8000560 <__aeabi_fadd+0x250>
 8000530:	2380      	movs	r3, #128	; 0x80
 8000532:	2200      	movs	r2, #0
 8000534:	03db      	lsls	r3, r3, #15
 8000536:	26ff      	movs	r6, #255	; 0xff
 8000538:	e70f      	b.n	800035a <__aeabi_fadd+0x4a>
 800053a:	000a      	movs	r2, r1
 800053c:	26ff      	movs	r6, #255	; 0xff
 800053e:	2300      	movs	r3, #0
 8000540:	e70b      	b.n	800035a <__aeabi_fadd+0x4a>
 8000542:	2c00      	cmp	r4, #0
 8000544:	d121      	bne.n	800058a <__aeabi_fadd+0x27a>
 8000546:	2d00      	cmp	r5, #0
 8000548:	d166      	bne.n	8000618 <__aeabi_fadd+0x308>
 800054a:	28ff      	cmp	r0, #255	; 0xff
 800054c:	d1e9      	bne.n	8000522 <__aeabi_fadd+0x212>
 800054e:	001d      	movs	r5, r3
 8000550:	e787      	b.n	8000462 <__aeabi_fadd+0x152>
 8000552:	2301      	movs	r3, #1
 8000554:	e752      	b.n	80003fc <__aeabi_fadd+0xec>
 8000556:	1c7a      	adds	r2, r7, #1
 8000558:	d0a7      	beq.n	80004aa <__aeabi_fadd+0x19a>
 800055a:	43fa      	mvns	r2, r7
 800055c:	28ff      	cmp	r0, #255	; 0xff
 800055e:	d199      	bne.n	8000494 <__aeabi_fadd+0x184>
 8000560:	000a      	movs	r2, r1
 8000562:	001d      	movs	r5, r3
 8000564:	24ff      	movs	r4, #255	; 0xff
 8000566:	e6f1      	b.n	800034c <__aeabi_fadd+0x3c>
 8000568:	2e00      	cmp	r6, #0
 800056a:	d121      	bne.n	80005b0 <__aeabi_fadd+0x2a0>
 800056c:	2d00      	cmp	r5, #0
 800056e:	d04f      	beq.n	8000610 <__aeabi_fadd+0x300>
 8000570:	2b00      	cmp	r3, #0
 8000572:	d04c      	beq.n	800060e <__aeabi_fadd+0x2fe>
 8000574:	18ed      	adds	r5, r5, r3
 8000576:	016b      	lsls	r3, r5, #5
 8000578:	d59e      	bpl.n	80004b8 <__aeabi_fadd+0x1a8>
 800057a:	4b31      	ldr	r3, [pc, #196]	; (8000640 <__aeabi_fadd+0x330>)
 800057c:	3607      	adds	r6, #7
 800057e:	402e      	ands	r6, r5
 8000580:	2401      	movs	r4, #1
 8000582:	401d      	ands	r5, r3
 8000584:	e754      	b.n	8000430 <__aeabi_fadd+0x120>
 8000586:	2301      	movs	r3, #1
 8000588:	e718      	b.n	80003bc <__aeabi_fadd+0xac>
 800058a:	28ff      	cmp	r0, #255	; 0xff
 800058c:	d0df      	beq.n	800054e <__aeabi_fadd+0x23e>
 800058e:	2480      	movs	r4, #128	; 0x80
 8000590:	04e4      	lsls	r4, r4, #19
 8000592:	427f      	negs	r7, r7
 8000594:	4325      	orrs	r5, r4
 8000596:	2f1b      	cmp	r7, #27
 8000598:	dc4d      	bgt.n	8000636 <__aeabi_fadd+0x326>
 800059a:	2620      	movs	r6, #32
 800059c:	1bf6      	subs	r6, r6, r7
 800059e:	002c      	movs	r4, r5
 80005a0:	40b5      	lsls	r5, r6
 80005a2:	40fc      	lsrs	r4, r7
 80005a4:	1e6a      	subs	r2, r5, #1
 80005a6:	4195      	sbcs	r5, r2
 80005a8:	4325      	orrs	r5, r4
 80005aa:	18ed      	adds	r5, r5, r3
 80005ac:	0004      	movs	r4, r0
 80005ae:	e706      	b.n	80003be <__aeabi_fadd+0xae>
 80005b0:	2d00      	cmp	r5, #0
 80005b2:	d0cc      	beq.n	800054e <__aeabi_fadd+0x23e>
 80005b4:	2b00      	cmp	r3, #0
 80005b6:	d100      	bne.n	80005ba <__aeabi_fadd+0x2aa>
 80005b8:	e753      	b.n	8000462 <__aeabi_fadd+0x152>
 80005ba:	2180      	movs	r1, #128	; 0x80
 80005bc:	4660      	mov	r0, ip
 80005be:	03c9      	lsls	r1, r1, #15
 80005c0:	4208      	tst	r0, r1
 80005c2:	d003      	beq.n	80005cc <__aeabi_fadd+0x2bc>
 80005c4:	4640      	mov	r0, r8
 80005c6:	4208      	tst	r0, r1
 80005c8:	d100      	bne.n	80005cc <__aeabi_fadd+0x2bc>
 80005ca:	001d      	movs	r5, r3
 80005cc:	2101      	movs	r1, #1
 80005ce:	4011      	ands	r1, r2
 80005d0:	e747      	b.n	8000462 <__aeabi_fadd+0x152>
 80005d2:	2b00      	cmp	r3, #0
 80005d4:	d100      	bne.n	80005d8 <__aeabi_fadd+0x2c8>
 80005d6:	e6b9      	b.n	800034c <__aeabi_fadd+0x3c>
 80005d8:	1aea      	subs	r2, r5, r3
 80005da:	0150      	lsls	r0, r2, #5
 80005dc:	d525      	bpl.n	800062a <__aeabi_fadd+0x31a>
 80005de:	2607      	movs	r6, #7
 80005e0:	1b5d      	subs	r5, r3, r5
 80005e2:	402e      	ands	r6, r5
 80005e4:	4689      	mov	r9, r1
 80005e6:	e723      	b.n	8000430 <__aeabi_fadd+0x120>
 80005e8:	24ff      	movs	r4, #255	; 0xff
 80005ea:	2b00      	cmp	r3, #0
 80005ec:	d100      	bne.n	80005f0 <__aeabi_fadd+0x2e0>
 80005ee:	e6ad      	b.n	800034c <__aeabi_fadd+0x3c>
 80005f0:	2280      	movs	r2, #128	; 0x80
 80005f2:	4660      	mov	r0, ip
 80005f4:	03d2      	lsls	r2, r2, #15
 80005f6:	4210      	tst	r0, r2
 80005f8:	d004      	beq.n	8000604 <__aeabi_fadd+0x2f4>
 80005fa:	4640      	mov	r0, r8
 80005fc:	4210      	tst	r0, r2
 80005fe:	d101      	bne.n	8000604 <__aeabi_fadd+0x2f4>
 8000600:	001d      	movs	r5, r3
 8000602:	4689      	mov	r9, r1
 8000604:	2201      	movs	r2, #1
 8000606:	464b      	mov	r3, r9
 8000608:	24ff      	movs	r4, #255	; 0xff
 800060a:	401a      	ands	r2, r3
 800060c:	e69e      	b.n	800034c <__aeabi_fadd+0x3c>
 800060e:	002b      	movs	r3, r5
 8000610:	08dd      	lsrs	r5, r3, #3
 8000612:	000a      	movs	r2, r1
 8000614:	2400      	movs	r4, #0
 8000616:	e69d      	b.n	8000354 <__aeabi_fadd+0x44>
 8000618:	1c7a      	adds	r2, r7, #1
 800061a:	d0c6      	beq.n	80005aa <__aeabi_fadd+0x29a>
 800061c:	43ff      	mvns	r7, r7
 800061e:	28ff      	cmp	r0, #255	; 0xff
 8000620:	d1b9      	bne.n	8000596 <__aeabi_fadd+0x286>
 8000622:	001d      	movs	r5, r3
 8000624:	e71d      	b.n	8000462 <__aeabi_fadd+0x152>
 8000626:	2501      	movs	r5, #1
 8000628:	e73f      	b.n	80004aa <__aeabi_fadd+0x19a>
 800062a:	1e15      	subs	r5, r2, #0
 800062c:	d000      	beq.n	8000630 <__aeabi_fadd+0x320>
 800062e:	e744      	b.n	80004ba <__aeabi_fadd+0x1aa>
 8000630:	2200      	movs	r2, #0
 8000632:	2300      	movs	r3, #0
 8000634:	e691      	b.n	800035a <__aeabi_fadd+0x4a>
 8000636:	2501      	movs	r5, #1
 8000638:	e7b7      	b.n	80005aa <__aeabi_fadd+0x29a>
 800063a:	46c0      	nop			; (mov r8, r8)
 800063c:	7dffffff 	.word	0x7dffffff
 8000640:	fbffffff 	.word	0xfbffffff

08000644 <__aeabi_fdiv>:
 8000644:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000646:	4657      	mov	r7, sl
 8000648:	464e      	mov	r6, r9
 800064a:	4645      	mov	r5, r8
 800064c:	46de      	mov	lr, fp
 800064e:	0244      	lsls	r4, r0, #9
 8000650:	b5e0      	push	{r5, r6, r7, lr}
 8000652:	0046      	lsls	r6, r0, #1
 8000654:	4688      	mov	r8, r1
 8000656:	0a64      	lsrs	r4, r4, #9
 8000658:	0e36      	lsrs	r6, r6, #24
 800065a:	0fc7      	lsrs	r7, r0, #31
 800065c:	2e00      	cmp	r6, #0
 800065e:	d063      	beq.n	8000728 <__aeabi_fdiv+0xe4>
 8000660:	2eff      	cmp	r6, #255	; 0xff
 8000662:	d024      	beq.n	80006ae <__aeabi_fdiv+0x6a>
 8000664:	2380      	movs	r3, #128	; 0x80
 8000666:	00e4      	lsls	r4, r4, #3
 8000668:	04db      	lsls	r3, r3, #19
 800066a:	431c      	orrs	r4, r3
 800066c:	2300      	movs	r3, #0
 800066e:	4699      	mov	r9, r3
 8000670:	469b      	mov	fp, r3
 8000672:	3e7f      	subs	r6, #127	; 0x7f
 8000674:	4643      	mov	r3, r8
 8000676:	4642      	mov	r2, r8
 8000678:	025d      	lsls	r5, r3, #9
 800067a:	0fd2      	lsrs	r2, r2, #31
 800067c:	005b      	lsls	r3, r3, #1
 800067e:	0a6d      	lsrs	r5, r5, #9
 8000680:	0e1b      	lsrs	r3, r3, #24
 8000682:	4690      	mov	r8, r2
 8000684:	4692      	mov	sl, r2
 8000686:	d065      	beq.n	8000754 <__aeabi_fdiv+0x110>
 8000688:	2bff      	cmp	r3, #255	; 0xff
 800068a:	d055      	beq.n	8000738 <__aeabi_fdiv+0xf4>
 800068c:	2280      	movs	r2, #128	; 0x80
 800068e:	2100      	movs	r1, #0
 8000690:	00ed      	lsls	r5, r5, #3
 8000692:	04d2      	lsls	r2, r2, #19
 8000694:	3b7f      	subs	r3, #127	; 0x7f
 8000696:	4315      	orrs	r5, r2
 8000698:	1af6      	subs	r6, r6, r3
 800069a:	4643      	mov	r3, r8
 800069c:	464a      	mov	r2, r9
 800069e:	407b      	eors	r3, r7
 80006a0:	2a0f      	cmp	r2, #15
 80006a2:	d900      	bls.n	80006a6 <__aeabi_fdiv+0x62>
 80006a4:	e08d      	b.n	80007c2 <__aeabi_fdiv+0x17e>
 80006a6:	486d      	ldr	r0, [pc, #436]	; (800085c <__aeabi_fdiv+0x218>)
 80006a8:	0092      	lsls	r2, r2, #2
 80006aa:	5882      	ldr	r2, [r0, r2]
 80006ac:	4697      	mov	pc, r2
 80006ae:	2c00      	cmp	r4, #0
 80006b0:	d154      	bne.n	800075c <__aeabi_fdiv+0x118>
 80006b2:	2308      	movs	r3, #8
 80006b4:	4699      	mov	r9, r3
 80006b6:	3b06      	subs	r3, #6
 80006b8:	26ff      	movs	r6, #255	; 0xff
 80006ba:	469b      	mov	fp, r3
 80006bc:	e7da      	b.n	8000674 <__aeabi_fdiv+0x30>
 80006be:	2500      	movs	r5, #0
 80006c0:	4653      	mov	r3, sl
 80006c2:	2902      	cmp	r1, #2
 80006c4:	d01b      	beq.n	80006fe <__aeabi_fdiv+0xba>
 80006c6:	2903      	cmp	r1, #3
 80006c8:	d100      	bne.n	80006cc <__aeabi_fdiv+0x88>
 80006ca:	e0bf      	b.n	800084c <__aeabi_fdiv+0x208>
 80006cc:	2901      	cmp	r1, #1
 80006ce:	d028      	beq.n	8000722 <__aeabi_fdiv+0xde>
 80006d0:	0030      	movs	r0, r6
 80006d2:	307f      	adds	r0, #127	; 0x7f
 80006d4:	2800      	cmp	r0, #0
 80006d6:	dd20      	ble.n	800071a <__aeabi_fdiv+0xd6>
 80006d8:	076a      	lsls	r2, r5, #29
 80006da:	d004      	beq.n	80006e6 <__aeabi_fdiv+0xa2>
 80006dc:	220f      	movs	r2, #15
 80006de:	402a      	ands	r2, r5
 80006e0:	2a04      	cmp	r2, #4
 80006e2:	d000      	beq.n	80006e6 <__aeabi_fdiv+0xa2>
 80006e4:	3504      	adds	r5, #4
 80006e6:	012a      	lsls	r2, r5, #4
 80006e8:	d503      	bpl.n	80006f2 <__aeabi_fdiv+0xae>
 80006ea:	0030      	movs	r0, r6
 80006ec:	4a5c      	ldr	r2, [pc, #368]	; (8000860 <__aeabi_fdiv+0x21c>)
 80006ee:	3080      	adds	r0, #128	; 0x80
 80006f0:	4015      	ands	r5, r2
 80006f2:	28fe      	cmp	r0, #254	; 0xfe
 80006f4:	dc03      	bgt.n	80006fe <__aeabi_fdiv+0xba>
 80006f6:	01ac      	lsls	r4, r5, #6
 80006f8:	0a64      	lsrs	r4, r4, #9
 80006fa:	b2c2      	uxtb	r2, r0
 80006fc:	e001      	b.n	8000702 <__aeabi_fdiv+0xbe>
 80006fe:	22ff      	movs	r2, #255	; 0xff
 8000700:	2400      	movs	r4, #0
 8000702:	0264      	lsls	r4, r4, #9
 8000704:	05d2      	lsls	r2, r2, #23
 8000706:	0a60      	lsrs	r0, r4, #9
 8000708:	07db      	lsls	r3, r3, #31
 800070a:	4310      	orrs	r0, r2
 800070c:	4318      	orrs	r0, r3
 800070e:	bc3c      	pop	{r2, r3, r4, r5}
 8000710:	4690      	mov	r8, r2
 8000712:	4699      	mov	r9, r3
 8000714:	46a2      	mov	sl, r4
 8000716:	46ab      	mov	fp, r5
 8000718:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800071a:	2201      	movs	r2, #1
 800071c:	1a10      	subs	r0, r2, r0
 800071e:	281b      	cmp	r0, #27
 8000720:	dd7c      	ble.n	800081c <__aeabi_fdiv+0x1d8>
 8000722:	2200      	movs	r2, #0
 8000724:	2400      	movs	r4, #0
 8000726:	e7ec      	b.n	8000702 <__aeabi_fdiv+0xbe>
 8000728:	2c00      	cmp	r4, #0
 800072a:	d11d      	bne.n	8000768 <__aeabi_fdiv+0x124>
 800072c:	2304      	movs	r3, #4
 800072e:	4699      	mov	r9, r3
 8000730:	3b03      	subs	r3, #3
 8000732:	2600      	movs	r6, #0
 8000734:	469b      	mov	fp, r3
 8000736:	e79d      	b.n	8000674 <__aeabi_fdiv+0x30>
 8000738:	3eff      	subs	r6, #255	; 0xff
 800073a:	2d00      	cmp	r5, #0
 800073c:	d120      	bne.n	8000780 <__aeabi_fdiv+0x13c>
 800073e:	2102      	movs	r1, #2
 8000740:	4643      	mov	r3, r8
 8000742:	464a      	mov	r2, r9
 8000744:	407b      	eors	r3, r7
 8000746:	430a      	orrs	r2, r1
 8000748:	2a0f      	cmp	r2, #15
 800074a:	d8d8      	bhi.n	80006fe <__aeabi_fdiv+0xba>
 800074c:	4845      	ldr	r0, [pc, #276]	; (8000864 <__aeabi_fdiv+0x220>)
 800074e:	0092      	lsls	r2, r2, #2
 8000750:	5882      	ldr	r2, [r0, r2]
 8000752:	4697      	mov	pc, r2
 8000754:	2d00      	cmp	r5, #0
 8000756:	d119      	bne.n	800078c <__aeabi_fdiv+0x148>
 8000758:	2101      	movs	r1, #1
 800075a:	e7f1      	b.n	8000740 <__aeabi_fdiv+0xfc>
 800075c:	230c      	movs	r3, #12
 800075e:	4699      	mov	r9, r3
 8000760:	3b09      	subs	r3, #9
 8000762:	26ff      	movs	r6, #255	; 0xff
 8000764:	469b      	mov	fp, r3
 8000766:	e785      	b.n	8000674 <__aeabi_fdiv+0x30>
 8000768:	0020      	movs	r0, r4
 800076a:	f002 fadf 	bl	8002d2c <__clzsi2>
 800076e:	2676      	movs	r6, #118	; 0x76
 8000770:	1f43      	subs	r3, r0, #5
 8000772:	409c      	lsls	r4, r3
 8000774:	2300      	movs	r3, #0
 8000776:	4276      	negs	r6, r6
 8000778:	1a36      	subs	r6, r6, r0
 800077a:	4699      	mov	r9, r3
 800077c:	469b      	mov	fp, r3
 800077e:	e779      	b.n	8000674 <__aeabi_fdiv+0x30>
 8000780:	464a      	mov	r2, r9
 8000782:	2303      	movs	r3, #3
 8000784:	431a      	orrs	r2, r3
 8000786:	4691      	mov	r9, r2
 8000788:	2103      	movs	r1, #3
 800078a:	e786      	b.n	800069a <__aeabi_fdiv+0x56>
 800078c:	0028      	movs	r0, r5
 800078e:	f002 facd 	bl	8002d2c <__clzsi2>
 8000792:	1f43      	subs	r3, r0, #5
 8000794:	1836      	adds	r6, r6, r0
 8000796:	409d      	lsls	r5, r3
 8000798:	3676      	adds	r6, #118	; 0x76
 800079a:	2100      	movs	r1, #0
 800079c:	e77d      	b.n	800069a <__aeabi_fdiv+0x56>
 800079e:	2480      	movs	r4, #128	; 0x80
 80007a0:	2300      	movs	r3, #0
 80007a2:	03e4      	lsls	r4, r4, #15
 80007a4:	22ff      	movs	r2, #255	; 0xff
 80007a6:	e7ac      	b.n	8000702 <__aeabi_fdiv+0xbe>
 80007a8:	2500      	movs	r5, #0
 80007aa:	2380      	movs	r3, #128	; 0x80
 80007ac:	03db      	lsls	r3, r3, #15
 80007ae:	421c      	tst	r4, r3
 80007b0:	d028      	beq.n	8000804 <__aeabi_fdiv+0x1c0>
 80007b2:	421d      	tst	r5, r3
 80007b4:	d126      	bne.n	8000804 <__aeabi_fdiv+0x1c0>
 80007b6:	432b      	orrs	r3, r5
 80007b8:	025c      	lsls	r4, r3, #9
 80007ba:	0a64      	lsrs	r4, r4, #9
 80007bc:	4643      	mov	r3, r8
 80007be:	22ff      	movs	r2, #255	; 0xff
 80007c0:	e79f      	b.n	8000702 <__aeabi_fdiv+0xbe>
 80007c2:	0162      	lsls	r2, r4, #5
 80007c4:	016c      	lsls	r4, r5, #5
 80007c6:	42a2      	cmp	r2, r4
 80007c8:	d224      	bcs.n	8000814 <__aeabi_fdiv+0x1d0>
 80007ca:	211b      	movs	r1, #27
 80007cc:	2500      	movs	r5, #0
 80007ce:	3e01      	subs	r6, #1
 80007d0:	2701      	movs	r7, #1
 80007d2:	0010      	movs	r0, r2
 80007d4:	006d      	lsls	r5, r5, #1
 80007d6:	0052      	lsls	r2, r2, #1
 80007d8:	2800      	cmp	r0, #0
 80007da:	db01      	blt.n	80007e0 <__aeabi_fdiv+0x19c>
 80007dc:	4294      	cmp	r4, r2
 80007de:	d801      	bhi.n	80007e4 <__aeabi_fdiv+0x1a0>
 80007e0:	1b12      	subs	r2, r2, r4
 80007e2:	433d      	orrs	r5, r7
 80007e4:	3901      	subs	r1, #1
 80007e6:	2900      	cmp	r1, #0
 80007e8:	d1f3      	bne.n	80007d2 <__aeabi_fdiv+0x18e>
 80007ea:	0014      	movs	r4, r2
 80007ec:	1e62      	subs	r2, r4, #1
 80007ee:	4194      	sbcs	r4, r2
 80007f0:	4325      	orrs	r5, r4
 80007f2:	e76d      	b.n	80006d0 <__aeabi_fdiv+0x8c>
 80007f4:	46ba      	mov	sl, r7
 80007f6:	4659      	mov	r1, fp
 80007f8:	0025      	movs	r5, r4
 80007fa:	4653      	mov	r3, sl
 80007fc:	2902      	cmp	r1, #2
 80007fe:	d000      	beq.n	8000802 <__aeabi_fdiv+0x1be>
 8000800:	e761      	b.n	80006c6 <__aeabi_fdiv+0x82>
 8000802:	e77c      	b.n	80006fe <__aeabi_fdiv+0xba>
 8000804:	2380      	movs	r3, #128	; 0x80
 8000806:	03db      	lsls	r3, r3, #15
 8000808:	431c      	orrs	r4, r3
 800080a:	0264      	lsls	r4, r4, #9
 800080c:	0a64      	lsrs	r4, r4, #9
 800080e:	003b      	movs	r3, r7
 8000810:	22ff      	movs	r2, #255	; 0xff
 8000812:	e776      	b.n	8000702 <__aeabi_fdiv+0xbe>
 8000814:	1b12      	subs	r2, r2, r4
 8000816:	211a      	movs	r1, #26
 8000818:	2501      	movs	r5, #1
 800081a:	e7d9      	b.n	80007d0 <__aeabi_fdiv+0x18c>
 800081c:	369e      	adds	r6, #158	; 0x9e
 800081e:	002a      	movs	r2, r5
 8000820:	40b5      	lsls	r5, r6
 8000822:	002c      	movs	r4, r5
 8000824:	40c2      	lsrs	r2, r0
 8000826:	1e65      	subs	r5, r4, #1
 8000828:	41ac      	sbcs	r4, r5
 800082a:	4314      	orrs	r4, r2
 800082c:	0762      	lsls	r2, r4, #29
 800082e:	d004      	beq.n	800083a <__aeabi_fdiv+0x1f6>
 8000830:	220f      	movs	r2, #15
 8000832:	4022      	ands	r2, r4
 8000834:	2a04      	cmp	r2, #4
 8000836:	d000      	beq.n	800083a <__aeabi_fdiv+0x1f6>
 8000838:	3404      	adds	r4, #4
 800083a:	0162      	lsls	r2, r4, #5
 800083c:	d403      	bmi.n	8000846 <__aeabi_fdiv+0x202>
 800083e:	01a4      	lsls	r4, r4, #6
 8000840:	0a64      	lsrs	r4, r4, #9
 8000842:	2200      	movs	r2, #0
 8000844:	e75d      	b.n	8000702 <__aeabi_fdiv+0xbe>
 8000846:	2201      	movs	r2, #1
 8000848:	2400      	movs	r4, #0
 800084a:	e75a      	b.n	8000702 <__aeabi_fdiv+0xbe>
 800084c:	2480      	movs	r4, #128	; 0x80
 800084e:	03e4      	lsls	r4, r4, #15
 8000850:	432c      	orrs	r4, r5
 8000852:	0264      	lsls	r4, r4, #9
 8000854:	0a64      	lsrs	r4, r4, #9
 8000856:	22ff      	movs	r2, #255	; 0xff
 8000858:	e753      	b.n	8000702 <__aeabi_fdiv+0xbe>
 800085a:	46c0      	nop			; (mov r8, r8)
 800085c:	08009434 	.word	0x08009434
 8000860:	f7ffffff 	.word	0xf7ffffff
 8000864:	08009474 	.word	0x08009474

08000868 <__eqsf2>:
 8000868:	b570      	push	{r4, r5, r6, lr}
 800086a:	0042      	lsls	r2, r0, #1
 800086c:	024e      	lsls	r6, r1, #9
 800086e:	004c      	lsls	r4, r1, #1
 8000870:	0245      	lsls	r5, r0, #9
 8000872:	0a6d      	lsrs	r5, r5, #9
 8000874:	0e12      	lsrs	r2, r2, #24
 8000876:	0fc3      	lsrs	r3, r0, #31
 8000878:	0a76      	lsrs	r6, r6, #9
 800087a:	0e24      	lsrs	r4, r4, #24
 800087c:	0fc9      	lsrs	r1, r1, #31
 800087e:	2aff      	cmp	r2, #255	; 0xff
 8000880:	d00f      	beq.n	80008a2 <__eqsf2+0x3a>
 8000882:	2cff      	cmp	r4, #255	; 0xff
 8000884:	d011      	beq.n	80008aa <__eqsf2+0x42>
 8000886:	2001      	movs	r0, #1
 8000888:	42a2      	cmp	r2, r4
 800088a:	d000      	beq.n	800088e <__eqsf2+0x26>
 800088c:	bd70      	pop	{r4, r5, r6, pc}
 800088e:	42b5      	cmp	r5, r6
 8000890:	d1fc      	bne.n	800088c <__eqsf2+0x24>
 8000892:	428b      	cmp	r3, r1
 8000894:	d00d      	beq.n	80008b2 <__eqsf2+0x4a>
 8000896:	2a00      	cmp	r2, #0
 8000898:	d1f8      	bne.n	800088c <__eqsf2+0x24>
 800089a:	0028      	movs	r0, r5
 800089c:	1e45      	subs	r5, r0, #1
 800089e:	41a8      	sbcs	r0, r5
 80008a0:	e7f4      	b.n	800088c <__eqsf2+0x24>
 80008a2:	2001      	movs	r0, #1
 80008a4:	2d00      	cmp	r5, #0
 80008a6:	d1f1      	bne.n	800088c <__eqsf2+0x24>
 80008a8:	e7eb      	b.n	8000882 <__eqsf2+0x1a>
 80008aa:	2001      	movs	r0, #1
 80008ac:	2e00      	cmp	r6, #0
 80008ae:	d1ed      	bne.n	800088c <__eqsf2+0x24>
 80008b0:	e7e9      	b.n	8000886 <__eqsf2+0x1e>
 80008b2:	2000      	movs	r0, #0
 80008b4:	e7ea      	b.n	800088c <__eqsf2+0x24>
 80008b6:	46c0      	nop			; (mov r8, r8)

080008b8 <__gesf2>:
 80008b8:	b570      	push	{r4, r5, r6, lr}
 80008ba:	004a      	lsls	r2, r1, #1
 80008bc:	024e      	lsls	r6, r1, #9
 80008be:	0245      	lsls	r5, r0, #9
 80008c0:	0044      	lsls	r4, r0, #1
 80008c2:	0a6d      	lsrs	r5, r5, #9
 80008c4:	0e24      	lsrs	r4, r4, #24
 80008c6:	0fc3      	lsrs	r3, r0, #31
 80008c8:	0a76      	lsrs	r6, r6, #9
 80008ca:	0e12      	lsrs	r2, r2, #24
 80008cc:	0fc9      	lsrs	r1, r1, #31
 80008ce:	2cff      	cmp	r4, #255	; 0xff
 80008d0:	d015      	beq.n	80008fe <__gesf2+0x46>
 80008d2:	2aff      	cmp	r2, #255	; 0xff
 80008d4:	d00e      	beq.n	80008f4 <__gesf2+0x3c>
 80008d6:	2c00      	cmp	r4, #0
 80008d8:	d115      	bne.n	8000906 <__gesf2+0x4e>
 80008da:	2a00      	cmp	r2, #0
 80008dc:	d101      	bne.n	80008e2 <__gesf2+0x2a>
 80008de:	2e00      	cmp	r6, #0
 80008e0:	d01c      	beq.n	800091c <__gesf2+0x64>
 80008e2:	2d00      	cmp	r5, #0
 80008e4:	d014      	beq.n	8000910 <__gesf2+0x58>
 80008e6:	428b      	cmp	r3, r1
 80008e8:	d027      	beq.n	800093a <__gesf2+0x82>
 80008ea:	2002      	movs	r0, #2
 80008ec:	3b01      	subs	r3, #1
 80008ee:	4018      	ands	r0, r3
 80008f0:	3801      	subs	r0, #1
 80008f2:	bd70      	pop	{r4, r5, r6, pc}
 80008f4:	2e00      	cmp	r6, #0
 80008f6:	d0ee      	beq.n	80008d6 <__gesf2+0x1e>
 80008f8:	2002      	movs	r0, #2
 80008fa:	4240      	negs	r0, r0
 80008fc:	e7f9      	b.n	80008f2 <__gesf2+0x3a>
 80008fe:	2d00      	cmp	r5, #0
 8000900:	d1fa      	bne.n	80008f8 <__gesf2+0x40>
 8000902:	2aff      	cmp	r2, #255	; 0xff
 8000904:	d00e      	beq.n	8000924 <__gesf2+0x6c>
 8000906:	2a00      	cmp	r2, #0
 8000908:	d10e      	bne.n	8000928 <__gesf2+0x70>
 800090a:	2e00      	cmp	r6, #0
 800090c:	d0ed      	beq.n	80008ea <__gesf2+0x32>
 800090e:	e00b      	b.n	8000928 <__gesf2+0x70>
 8000910:	2301      	movs	r3, #1
 8000912:	3901      	subs	r1, #1
 8000914:	4399      	bics	r1, r3
 8000916:	0008      	movs	r0, r1
 8000918:	3001      	adds	r0, #1
 800091a:	e7ea      	b.n	80008f2 <__gesf2+0x3a>
 800091c:	2000      	movs	r0, #0
 800091e:	2d00      	cmp	r5, #0
 8000920:	d0e7      	beq.n	80008f2 <__gesf2+0x3a>
 8000922:	e7e2      	b.n	80008ea <__gesf2+0x32>
 8000924:	2e00      	cmp	r6, #0
 8000926:	d1e7      	bne.n	80008f8 <__gesf2+0x40>
 8000928:	428b      	cmp	r3, r1
 800092a:	d1de      	bne.n	80008ea <__gesf2+0x32>
 800092c:	4294      	cmp	r4, r2
 800092e:	dd05      	ble.n	800093c <__gesf2+0x84>
 8000930:	2102      	movs	r1, #2
 8000932:	1e58      	subs	r0, r3, #1
 8000934:	4008      	ands	r0, r1
 8000936:	3801      	subs	r0, #1
 8000938:	e7db      	b.n	80008f2 <__gesf2+0x3a>
 800093a:	2400      	movs	r4, #0
 800093c:	42a2      	cmp	r2, r4
 800093e:	dc04      	bgt.n	800094a <__gesf2+0x92>
 8000940:	42b5      	cmp	r5, r6
 8000942:	d8d2      	bhi.n	80008ea <__gesf2+0x32>
 8000944:	2000      	movs	r0, #0
 8000946:	42b5      	cmp	r5, r6
 8000948:	d2d3      	bcs.n	80008f2 <__gesf2+0x3a>
 800094a:	1e58      	subs	r0, r3, #1
 800094c:	2301      	movs	r3, #1
 800094e:	4398      	bics	r0, r3
 8000950:	3001      	adds	r0, #1
 8000952:	e7ce      	b.n	80008f2 <__gesf2+0x3a>

08000954 <__lesf2>:
 8000954:	b530      	push	{r4, r5, lr}
 8000956:	0042      	lsls	r2, r0, #1
 8000958:	0244      	lsls	r4, r0, #9
 800095a:	024d      	lsls	r5, r1, #9
 800095c:	0fc3      	lsrs	r3, r0, #31
 800095e:	0048      	lsls	r0, r1, #1
 8000960:	0a64      	lsrs	r4, r4, #9
 8000962:	0e12      	lsrs	r2, r2, #24
 8000964:	0a6d      	lsrs	r5, r5, #9
 8000966:	0e00      	lsrs	r0, r0, #24
 8000968:	0fc9      	lsrs	r1, r1, #31
 800096a:	2aff      	cmp	r2, #255	; 0xff
 800096c:	d012      	beq.n	8000994 <__lesf2+0x40>
 800096e:	28ff      	cmp	r0, #255	; 0xff
 8000970:	d00c      	beq.n	800098c <__lesf2+0x38>
 8000972:	2a00      	cmp	r2, #0
 8000974:	d112      	bne.n	800099c <__lesf2+0x48>
 8000976:	2800      	cmp	r0, #0
 8000978:	d119      	bne.n	80009ae <__lesf2+0x5a>
 800097a:	2d00      	cmp	r5, #0
 800097c:	d117      	bne.n	80009ae <__lesf2+0x5a>
 800097e:	2c00      	cmp	r4, #0
 8000980:	d02b      	beq.n	80009da <__lesf2+0x86>
 8000982:	2002      	movs	r0, #2
 8000984:	3b01      	subs	r3, #1
 8000986:	4018      	ands	r0, r3
 8000988:	3801      	subs	r0, #1
 800098a:	e026      	b.n	80009da <__lesf2+0x86>
 800098c:	2d00      	cmp	r5, #0
 800098e:	d0f0      	beq.n	8000972 <__lesf2+0x1e>
 8000990:	2002      	movs	r0, #2
 8000992:	e022      	b.n	80009da <__lesf2+0x86>
 8000994:	2c00      	cmp	r4, #0
 8000996:	d1fb      	bne.n	8000990 <__lesf2+0x3c>
 8000998:	28ff      	cmp	r0, #255	; 0xff
 800099a:	d01f      	beq.n	80009dc <__lesf2+0x88>
 800099c:	2800      	cmp	r0, #0
 800099e:	d11f      	bne.n	80009e0 <__lesf2+0x8c>
 80009a0:	2d00      	cmp	r5, #0
 80009a2:	d11d      	bne.n	80009e0 <__lesf2+0x8c>
 80009a4:	2002      	movs	r0, #2
 80009a6:	3b01      	subs	r3, #1
 80009a8:	4018      	ands	r0, r3
 80009aa:	3801      	subs	r0, #1
 80009ac:	e015      	b.n	80009da <__lesf2+0x86>
 80009ae:	2c00      	cmp	r4, #0
 80009b0:	d00e      	beq.n	80009d0 <__lesf2+0x7c>
 80009b2:	428b      	cmp	r3, r1
 80009b4:	d1e5      	bne.n	8000982 <__lesf2+0x2e>
 80009b6:	2200      	movs	r2, #0
 80009b8:	4290      	cmp	r0, r2
 80009ba:	dc04      	bgt.n	80009c6 <__lesf2+0x72>
 80009bc:	42ac      	cmp	r4, r5
 80009be:	d8e0      	bhi.n	8000982 <__lesf2+0x2e>
 80009c0:	2000      	movs	r0, #0
 80009c2:	42ac      	cmp	r4, r5
 80009c4:	d209      	bcs.n	80009da <__lesf2+0x86>
 80009c6:	1e58      	subs	r0, r3, #1
 80009c8:	2301      	movs	r3, #1
 80009ca:	4398      	bics	r0, r3
 80009cc:	3001      	adds	r0, #1
 80009ce:	e004      	b.n	80009da <__lesf2+0x86>
 80009d0:	2301      	movs	r3, #1
 80009d2:	3901      	subs	r1, #1
 80009d4:	4399      	bics	r1, r3
 80009d6:	0008      	movs	r0, r1
 80009d8:	3001      	adds	r0, #1
 80009da:	bd30      	pop	{r4, r5, pc}
 80009dc:	2d00      	cmp	r5, #0
 80009de:	d1d7      	bne.n	8000990 <__lesf2+0x3c>
 80009e0:	428b      	cmp	r3, r1
 80009e2:	d1ce      	bne.n	8000982 <__lesf2+0x2e>
 80009e4:	4282      	cmp	r2, r0
 80009e6:	dde7      	ble.n	80009b8 <__lesf2+0x64>
 80009e8:	2102      	movs	r1, #2
 80009ea:	1e58      	subs	r0, r3, #1
 80009ec:	4008      	ands	r0, r1
 80009ee:	3801      	subs	r0, #1
 80009f0:	e7f3      	b.n	80009da <__lesf2+0x86>
 80009f2:	46c0      	nop			; (mov r8, r8)

080009f4 <__aeabi_fmul>:
 80009f4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80009f6:	464e      	mov	r6, r9
 80009f8:	4657      	mov	r7, sl
 80009fa:	4645      	mov	r5, r8
 80009fc:	46de      	mov	lr, fp
 80009fe:	b5e0      	push	{r5, r6, r7, lr}
 8000a00:	0243      	lsls	r3, r0, #9
 8000a02:	0a5b      	lsrs	r3, r3, #9
 8000a04:	0045      	lsls	r5, r0, #1
 8000a06:	b083      	sub	sp, #12
 8000a08:	1c0f      	adds	r7, r1, #0
 8000a0a:	4699      	mov	r9, r3
 8000a0c:	0e2d      	lsrs	r5, r5, #24
 8000a0e:	0fc6      	lsrs	r6, r0, #31
 8000a10:	2d00      	cmp	r5, #0
 8000a12:	d057      	beq.n	8000ac4 <__aeabi_fmul+0xd0>
 8000a14:	2dff      	cmp	r5, #255	; 0xff
 8000a16:	d024      	beq.n	8000a62 <__aeabi_fmul+0x6e>
 8000a18:	2080      	movs	r0, #128	; 0x80
 8000a1a:	00db      	lsls	r3, r3, #3
 8000a1c:	04c0      	lsls	r0, r0, #19
 8000a1e:	4318      	orrs	r0, r3
 8000a20:	2300      	movs	r3, #0
 8000a22:	4681      	mov	r9, r0
 8000a24:	469a      	mov	sl, r3
 8000a26:	469b      	mov	fp, r3
 8000a28:	3d7f      	subs	r5, #127	; 0x7f
 8000a2a:	027c      	lsls	r4, r7, #9
 8000a2c:	007a      	lsls	r2, r7, #1
 8000a2e:	0ffb      	lsrs	r3, r7, #31
 8000a30:	0a64      	lsrs	r4, r4, #9
 8000a32:	0e12      	lsrs	r2, r2, #24
 8000a34:	4698      	mov	r8, r3
 8000a36:	d023      	beq.n	8000a80 <__aeabi_fmul+0x8c>
 8000a38:	2aff      	cmp	r2, #255	; 0xff
 8000a3a:	d04b      	beq.n	8000ad4 <__aeabi_fmul+0xe0>
 8000a3c:	00e3      	lsls	r3, r4, #3
 8000a3e:	2480      	movs	r4, #128	; 0x80
 8000a40:	2000      	movs	r0, #0
 8000a42:	04e4      	lsls	r4, r4, #19
 8000a44:	3a7f      	subs	r2, #127	; 0x7f
 8000a46:	431c      	orrs	r4, r3
 8000a48:	18ad      	adds	r5, r5, r2
 8000a4a:	1c6b      	adds	r3, r5, #1
 8000a4c:	4647      	mov	r7, r8
 8000a4e:	9301      	str	r3, [sp, #4]
 8000a50:	4653      	mov	r3, sl
 8000a52:	4077      	eors	r7, r6
 8000a54:	003a      	movs	r2, r7
 8000a56:	2b0f      	cmp	r3, #15
 8000a58:	d848      	bhi.n	8000aec <__aeabi_fmul+0xf8>
 8000a5a:	497d      	ldr	r1, [pc, #500]	; (8000c50 <__aeabi_fmul+0x25c>)
 8000a5c:	009b      	lsls	r3, r3, #2
 8000a5e:	58cb      	ldr	r3, [r1, r3]
 8000a60:	469f      	mov	pc, r3
 8000a62:	2b00      	cmp	r3, #0
 8000a64:	d000      	beq.n	8000a68 <__aeabi_fmul+0x74>
 8000a66:	e085      	b.n	8000b74 <__aeabi_fmul+0x180>
 8000a68:	3308      	adds	r3, #8
 8000a6a:	469a      	mov	sl, r3
 8000a6c:	3b06      	subs	r3, #6
 8000a6e:	469b      	mov	fp, r3
 8000a70:	027c      	lsls	r4, r7, #9
 8000a72:	007a      	lsls	r2, r7, #1
 8000a74:	0ffb      	lsrs	r3, r7, #31
 8000a76:	25ff      	movs	r5, #255	; 0xff
 8000a78:	0a64      	lsrs	r4, r4, #9
 8000a7a:	0e12      	lsrs	r2, r2, #24
 8000a7c:	4698      	mov	r8, r3
 8000a7e:	d1db      	bne.n	8000a38 <__aeabi_fmul+0x44>
 8000a80:	2c00      	cmp	r4, #0
 8000a82:	d000      	beq.n	8000a86 <__aeabi_fmul+0x92>
 8000a84:	e090      	b.n	8000ba8 <__aeabi_fmul+0x1b4>
 8000a86:	4652      	mov	r2, sl
 8000a88:	2301      	movs	r3, #1
 8000a8a:	431a      	orrs	r2, r3
 8000a8c:	4692      	mov	sl, r2
 8000a8e:	2001      	movs	r0, #1
 8000a90:	e7db      	b.n	8000a4a <__aeabi_fmul+0x56>
 8000a92:	464c      	mov	r4, r9
 8000a94:	4658      	mov	r0, fp
 8000a96:	0017      	movs	r7, r2
 8000a98:	2802      	cmp	r0, #2
 8000a9a:	d024      	beq.n	8000ae6 <__aeabi_fmul+0xf2>
 8000a9c:	2803      	cmp	r0, #3
 8000a9e:	d100      	bne.n	8000aa2 <__aeabi_fmul+0xae>
 8000aa0:	e0cf      	b.n	8000c42 <__aeabi_fmul+0x24e>
 8000aa2:	2200      	movs	r2, #0
 8000aa4:	2300      	movs	r3, #0
 8000aa6:	2801      	cmp	r0, #1
 8000aa8:	d14d      	bne.n	8000b46 <__aeabi_fmul+0x152>
 8000aaa:	0258      	lsls	r0, r3, #9
 8000aac:	05d2      	lsls	r2, r2, #23
 8000aae:	0a40      	lsrs	r0, r0, #9
 8000ab0:	07ff      	lsls	r7, r7, #31
 8000ab2:	4310      	orrs	r0, r2
 8000ab4:	4338      	orrs	r0, r7
 8000ab6:	b003      	add	sp, #12
 8000ab8:	bc3c      	pop	{r2, r3, r4, r5}
 8000aba:	4690      	mov	r8, r2
 8000abc:	4699      	mov	r9, r3
 8000abe:	46a2      	mov	sl, r4
 8000ac0:	46ab      	mov	fp, r5
 8000ac2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000ac4:	2b00      	cmp	r3, #0
 8000ac6:	d15b      	bne.n	8000b80 <__aeabi_fmul+0x18c>
 8000ac8:	2304      	movs	r3, #4
 8000aca:	469a      	mov	sl, r3
 8000acc:	3b03      	subs	r3, #3
 8000ace:	2500      	movs	r5, #0
 8000ad0:	469b      	mov	fp, r3
 8000ad2:	e7aa      	b.n	8000a2a <__aeabi_fmul+0x36>
 8000ad4:	35ff      	adds	r5, #255	; 0xff
 8000ad6:	2c00      	cmp	r4, #0
 8000ad8:	d160      	bne.n	8000b9c <__aeabi_fmul+0x1a8>
 8000ada:	4652      	mov	r2, sl
 8000adc:	2302      	movs	r3, #2
 8000ade:	431a      	orrs	r2, r3
 8000ae0:	4692      	mov	sl, r2
 8000ae2:	2002      	movs	r0, #2
 8000ae4:	e7b1      	b.n	8000a4a <__aeabi_fmul+0x56>
 8000ae6:	22ff      	movs	r2, #255	; 0xff
 8000ae8:	2300      	movs	r3, #0
 8000aea:	e7de      	b.n	8000aaa <__aeabi_fmul+0xb6>
 8000aec:	464b      	mov	r3, r9
 8000aee:	0c1b      	lsrs	r3, r3, #16
 8000af0:	469c      	mov	ip, r3
 8000af2:	464b      	mov	r3, r9
 8000af4:	0426      	lsls	r6, r4, #16
 8000af6:	0c36      	lsrs	r6, r6, #16
 8000af8:	0418      	lsls	r0, r3, #16
 8000afa:	4661      	mov	r1, ip
 8000afc:	0033      	movs	r3, r6
 8000afe:	0c22      	lsrs	r2, r4, #16
 8000b00:	4664      	mov	r4, ip
 8000b02:	0c00      	lsrs	r0, r0, #16
 8000b04:	4343      	muls	r3, r0
 8000b06:	434e      	muls	r6, r1
 8000b08:	4350      	muls	r0, r2
 8000b0a:	4354      	muls	r4, r2
 8000b0c:	1980      	adds	r0, r0, r6
 8000b0e:	0c1a      	lsrs	r2, r3, #16
 8000b10:	1812      	adds	r2, r2, r0
 8000b12:	4296      	cmp	r6, r2
 8000b14:	d903      	bls.n	8000b1e <__aeabi_fmul+0x12a>
 8000b16:	2180      	movs	r1, #128	; 0x80
 8000b18:	0249      	lsls	r1, r1, #9
 8000b1a:	468c      	mov	ip, r1
 8000b1c:	4464      	add	r4, ip
 8000b1e:	041b      	lsls	r3, r3, #16
 8000b20:	0c1b      	lsrs	r3, r3, #16
 8000b22:	0410      	lsls	r0, r2, #16
 8000b24:	18c0      	adds	r0, r0, r3
 8000b26:	0183      	lsls	r3, r0, #6
 8000b28:	1e5e      	subs	r6, r3, #1
 8000b2a:	41b3      	sbcs	r3, r6
 8000b2c:	0e80      	lsrs	r0, r0, #26
 8000b2e:	4318      	orrs	r0, r3
 8000b30:	0c13      	lsrs	r3, r2, #16
 8000b32:	191b      	adds	r3, r3, r4
 8000b34:	019b      	lsls	r3, r3, #6
 8000b36:	4303      	orrs	r3, r0
 8000b38:	001c      	movs	r4, r3
 8000b3a:	0123      	lsls	r3, r4, #4
 8000b3c:	d579      	bpl.n	8000c32 <__aeabi_fmul+0x23e>
 8000b3e:	2301      	movs	r3, #1
 8000b40:	0862      	lsrs	r2, r4, #1
 8000b42:	401c      	ands	r4, r3
 8000b44:	4314      	orrs	r4, r2
 8000b46:	9a01      	ldr	r2, [sp, #4]
 8000b48:	327f      	adds	r2, #127	; 0x7f
 8000b4a:	2a00      	cmp	r2, #0
 8000b4c:	dd4d      	ble.n	8000bea <__aeabi_fmul+0x1f6>
 8000b4e:	0763      	lsls	r3, r4, #29
 8000b50:	d004      	beq.n	8000b5c <__aeabi_fmul+0x168>
 8000b52:	230f      	movs	r3, #15
 8000b54:	4023      	ands	r3, r4
 8000b56:	2b04      	cmp	r3, #4
 8000b58:	d000      	beq.n	8000b5c <__aeabi_fmul+0x168>
 8000b5a:	3404      	adds	r4, #4
 8000b5c:	0123      	lsls	r3, r4, #4
 8000b5e:	d503      	bpl.n	8000b68 <__aeabi_fmul+0x174>
 8000b60:	4b3c      	ldr	r3, [pc, #240]	; (8000c54 <__aeabi_fmul+0x260>)
 8000b62:	9a01      	ldr	r2, [sp, #4]
 8000b64:	401c      	ands	r4, r3
 8000b66:	3280      	adds	r2, #128	; 0x80
 8000b68:	2afe      	cmp	r2, #254	; 0xfe
 8000b6a:	dcbc      	bgt.n	8000ae6 <__aeabi_fmul+0xf2>
 8000b6c:	01a3      	lsls	r3, r4, #6
 8000b6e:	0a5b      	lsrs	r3, r3, #9
 8000b70:	b2d2      	uxtb	r2, r2
 8000b72:	e79a      	b.n	8000aaa <__aeabi_fmul+0xb6>
 8000b74:	230c      	movs	r3, #12
 8000b76:	469a      	mov	sl, r3
 8000b78:	3b09      	subs	r3, #9
 8000b7a:	25ff      	movs	r5, #255	; 0xff
 8000b7c:	469b      	mov	fp, r3
 8000b7e:	e754      	b.n	8000a2a <__aeabi_fmul+0x36>
 8000b80:	0018      	movs	r0, r3
 8000b82:	f002 f8d3 	bl	8002d2c <__clzsi2>
 8000b86:	464a      	mov	r2, r9
 8000b88:	1f43      	subs	r3, r0, #5
 8000b8a:	2576      	movs	r5, #118	; 0x76
 8000b8c:	409a      	lsls	r2, r3
 8000b8e:	2300      	movs	r3, #0
 8000b90:	426d      	negs	r5, r5
 8000b92:	4691      	mov	r9, r2
 8000b94:	1a2d      	subs	r5, r5, r0
 8000b96:	469a      	mov	sl, r3
 8000b98:	469b      	mov	fp, r3
 8000b9a:	e746      	b.n	8000a2a <__aeabi_fmul+0x36>
 8000b9c:	4652      	mov	r2, sl
 8000b9e:	2303      	movs	r3, #3
 8000ba0:	431a      	orrs	r2, r3
 8000ba2:	4692      	mov	sl, r2
 8000ba4:	2003      	movs	r0, #3
 8000ba6:	e750      	b.n	8000a4a <__aeabi_fmul+0x56>
 8000ba8:	0020      	movs	r0, r4
 8000baa:	f002 f8bf 	bl	8002d2c <__clzsi2>
 8000bae:	1f43      	subs	r3, r0, #5
 8000bb0:	1a2d      	subs	r5, r5, r0
 8000bb2:	409c      	lsls	r4, r3
 8000bb4:	3d76      	subs	r5, #118	; 0x76
 8000bb6:	2000      	movs	r0, #0
 8000bb8:	e747      	b.n	8000a4a <__aeabi_fmul+0x56>
 8000bba:	2380      	movs	r3, #128	; 0x80
 8000bbc:	2700      	movs	r7, #0
 8000bbe:	03db      	lsls	r3, r3, #15
 8000bc0:	22ff      	movs	r2, #255	; 0xff
 8000bc2:	e772      	b.n	8000aaa <__aeabi_fmul+0xb6>
 8000bc4:	4642      	mov	r2, r8
 8000bc6:	e766      	b.n	8000a96 <__aeabi_fmul+0xa2>
 8000bc8:	464c      	mov	r4, r9
 8000bca:	0032      	movs	r2, r6
 8000bcc:	4658      	mov	r0, fp
 8000bce:	e762      	b.n	8000a96 <__aeabi_fmul+0xa2>
 8000bd0:	2380      	movs	r3, #128	; 0x80
 8000bd2:	464a      	mov	r2, r9
 8000bd4:	03db      	lsls	r3, r3, #15
 8000bd6:	421a      	tst	r2, r3
 8000bd8:	d022      	beq.n	8000c20 <__aeabi_fmul+0x22c>
 8000bda:	421c      	tst	r4, r3
 8000bdc:	d120      	bne.n	8000c20 <__aeabi_fmul+0x22c>
 8000bde:	4323      	orrs	r3, r4
 8000be0:	025b      	lsls	r3, r3, #9
 8000be2:	0a5b      	lsrs	r3, r3, #9
 8000be4:	4647      	mov	r7, r8
 8000be6:	22ff      	movs	r2, #255	; 0xff
 8000be8:	e75f      	b.n	8000aaa <__aeabi_fmul+0xb6>
 8000bea:	2301      	movs	r3, #1
 8000bec:	1a9a      	subs	r2, r3, r2
 8000bee:	2a1b      	cmp	r2, #27
 8000bf0:	dc21      	bgt.n	8000c36 <__aeabi_fmul+0x242>
 8000bf2:	0023      	movs	r3, r4
 8000bf4:	9901      	ldr	r1, [sp, #4]
 8000bf6:	40d3      	lsrs	r3, r2
 8000bf8:	319e      	adds	r1, #158	; 0x9e
 8000bfa:	408c      	lsls	r4, r1
 8000bfc:	001a      	movs	r2, r3
 8000bfe:	0023      	movs	r3, r4
 8000c00:	1e5c      	subs	r4, r3, #1
 8000c02:	41a3      	sbcs	r3, r4
 8000c04:	4313      	orrs	r3, r2
 8000c06:	075a      	lsls	r2, r3, #29
 8000c08:	d004      	beq.n	8000c14 <__aeabi_fmul+0x220>
 8000c0a:	220f      	movs	r2, #15
 8000c0c:	401a      	ands	r2, r3
 8000c0e:	2a04      	cmp	r2, #4
 8000c10:	d000      	beq.n	8000c14 <__aeabi_fmul+0x220>
 8000c12:	3304      	adds	r3, #4
 8000c14:	015a      	lsls	r2, r3, #5
 8000c16:	d411      	bmi.n	8000c3c <__aeabi_fmul+0x248>
 8000c18:	019b      	lsls	r3, r3, #6
 8000c1a:	0a5b      	lsrs	r3, r3, #9
 8000c1c:	2200      	movs	r2, #0
 8000c1e:	e744      	b.n	8000aaa <__aeabi_fmul+0xb6>
 8000c20:	2380      	movs	r3, #128	; 0x80
 8000c22:	464a      	mov	r2, r9
 8000c24:	03db      	lsls	r3, r3, #15
 8000c26:	4313      	orrs	r3, r2
 8000c28:	025b      	lsls	r3, r3, #9
 8000c2a:	0a5b      	lsrs	r3, r3, #9
 8000c2c:	0037      	movs	r7, r6
 8000c2e:	22ff      	movs	r2, #255	; 0xff
 8000c30:	e73b      	b.n	8000aaa <__aeabi_fmul+0xb6>
 8000c32:	9501      	str	r5, [sp, #4]
 8000c34:	e787      	b.n	8000b46 <__aeabi_fmul+0x152>
 8000c36:	2200      	movs	r2, #0
 8000c38:	2300      	movs	r3, #0
 8000c3a:	e736      	b.n	8000aaa <__aeabi_fmul+0xb6>
 8000c3c:	2201      	movs	r2, #1
 8000c3e:	2300      	movs	r3, #0
 8000c40:	e733      	b.n	8000aaa <__aeabi_fmul+0xb6>
 8000c42:	2380      	movs	r3, #128	; 0x80
 8000c44:	03db      	lsls	r3, r3, #15
 8000c46:	4323      	orrs	r3, r4
 8000c48:	025b      	lsls	r3, r3, #9
 8000c4a:	0a5b      	lsrs	r3, r3, #9
 8000c4c:	22ff      	movs	r2, #255	; 0xff
 8000c4e:	e72c      	b.n	8000aaa <__aeabi_fmul+0xb6>
 8000c50:	080094b4 	.word	0x080094b4
 8000c54:	f7ffffff 	.word	0xf7ffffff

08000c58 <__aeabi_fsub>:
 8000c58:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000c5a:	4647      	mov	r7, r8
 8000c5c:	46ce      	mov	lr, r9
 8000c5e:	0044      	lsls	r4, r0, #1
 8000c60:	0fc2      	lsrs	r2, r0, #31
 8000c62:	b580      	push	{r7, lr}
 8000c64:	0247      	lsls	r7, r0, #9
 8000c66:	0248      	lsls	r0, r1, #9
 8000c68:	0a40      	lsrs	r0, r0, #9
 8000c6a:	4684      	mov	ip, r0
 8000c6c:	4666      	mov	r6, ip
 8000c6e:	0048      	lsls	r0, r1, #1
 8000c70:	0a7f      	lsrs	r7, r7, #9
 8000c72:	0e24      	lsrs	r4, r4, #24
 8000c74:	00f6      	lsls	r6, r6, #3
 8000c76:	0025      	movs	r5, r4
 8000c78:	4690      	mov	r8, r2
 8000c7a:	00fb      	lsls	r3, r7, #3
 8000c7c:	0e00      	lsrs	r0, r0, #24
 8000c7e:	0fc9      	lsrs	r1, r1, #31
 8000c80:	46b1      	mov	r9, r6
 8000c82:	28ff      	cmp	r0, #255	; 0xff
 8000c84:	d100      	bne.n	8000c88 <__aeabi_fsub+0x30>
 8000c86:	e085      	b.n	8000d94 <__aeabi_fsub+0x13c>
 8000c88:	2601      	movs	r6, #1
 8000c8a:	4071      	eors	r1, r6
 8000c8c:	1a26      	subs	r6, r4, r0
 8000c8e:	4291      	cmp	r1, r2
 8000c90:	d057      	beq.n	8000d42 <__aeabi_fsub+0xea>
 8000c92:	2e00      	cmp	r6, #0
 8000c94:	dd43      	ble.n	8000d1e <__aeabi_fsub+0xc6>
 8000c96:	2800      	cmp	r0, #0
 8000c98:	d000      	beq.n	8000c9c <__aeabi_fsub+0x44>
 8000c9a:	e07f      	b.n	8000d9c <__aeabi_fsub+0x144>
 8000c9c:	4649      	mov	r1, r9
 8000c9e:	2900      	cmp	r1, #0
 8000ca0:	d100      	bne.n	8000ca4 <__aeabi_fsub+0x4c>
 8000ca2:	e0aa      	b.n	8000dfa <__aeabi_fsub+0x1a2>
 8000ca4:	3e01      	subs	r6, #1
 8000ca6:	2e00      	cmp	r6, #0
 8000ca8:	d000      	beq.n	8000cac <__aeabi_fsub+0x54>
 8000caa:	e0f7      	b.n	8000e9c <__aeabi_fsub+0x244>
 8000cac:	1a5b      	subs	r3, r3, r1
 8000cae:	015a      	lsls	r2, r3, #5
 8000cb0:	d400      	bmi.n	8000cb4 <__aeabi_fsub+0x5c>
 8000cb2:	e08b      	b.n	8000dcc <__aeabi_fsub+0x174>
 8000cb4:	019b      	lsls	r3, r3, #6
 8000cb6:	099c      	lsrs	r4, r3, #6
 8000cb8:	0020      	movs	r0, r4
 8000cba:	f002 f837 	bl	8002d2c <__clzsi2>
 8000cbe:	3805      	subs	r0, #5
 8000cc0:	4084      	lsls	r4, r0
 8000cc2:	4285      	cmp	r5, r0
 8000cc4:	dd00      	ble.n	8000cc8 <__aeabi_fsub+0x70>
 8000cc6:	e0d3      	b.n	8000e70 <__aeabi_fsub+0x218>
 8000cc8:	1b45      	subs	r5, r0, r5
 8000cca:	0023      	movs	r3, r4
 8000ccc:	2020      	movs	r0, #32
 8000cce:	3501      	adds	r5, #1
 8000cd0:	40eb      	lsrs	r3, r5
 8000cd2:	1b45      	subs	r5, r0, r5
 8000cd4:	40ac      	lsls	r4, r5
 8000cd6:	1e62      	subs	r2, r4, #1
 8000cd8:	4194      	sbcs	r4, r2
 8000cda:	4323      	orrs	r3, r4
 8000cdc:	2407      	movs	r4, #7
 8000cde:	2500      	movs	r5, #0
 8000ce0:	401c      	ands	r4, r3
 8000ce2:	2201      	movs	r2, #1
 8000ce4:	4641      	mov	r1, r8
 8000ce6:	400a      	ands	r2, r1
 8000ce8:	2c00      	cmp	r4, #0
 8000cea:	d004      	beq.n	8000cf6 <__aeabi_fsub+0x9e>
 8000cec:	210f      	movs	r1, #15
 8000cee:	4019      	ands	r1, r3
 8000cf0:	2904      	cmp	r1, #4
 8000cf2:	d000      	beq.n	8000cf6 <__aeabi_fsub+0x9e>
 8000cf4:	3304      	adds	r3, #4
 8000cf6:	0159      	lsls	r1, r3, #5
 8000cf8:	d400      	bmi.n	8000cfc <__aeabi_fsub+0xa4>
 8000cfa:	e080      	b.n	8000dfe <__aeabi_fsub+0x1a6>
 8000cfc:	3501      	adds	r5, #1
 8000cfe:	b2ec      	uxtb	r4, r5
 8000d00:	2dff      	cmp	r5, #255	; 0xff
 8000d02:	d000      	beq.n	8000d06 <__aeabi_fsub+0xae>
 8000d04:	e0a3      	b.n	8000e4e <__aeabi_fsub+0x1f6>
 8000d06:	24ff      	movs	r4, #255	; 0xff
 8000d08:	2300      	movs	r3, #0
 8000d0a:	025b      	lsls	r3, r3, #9
 8000d0c:	05e4      	lsls	r4, r4, #23
 8000d0e:	0a58      	lsrs	r0, r3, #9
 8000d10:	07d2      	lsls	r2, r2, #31
 8000d12:	4320      	orrs	r0, r4
 8000d14:	4310      	orrs	r0, r2
 8000d16:	bc0c      	pop	{r2, r3}
 8000d18:	4690      	mov	r8, r2
 8000d1a:	4699      	mov	r9, r3
 8000d1c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8000d1e:	2e00      	cmp	r6, #0
 8000d20:	d174      	bne.n	8000e0c <__aeabi_fsub+0x1b4>
 8000d22:	1c60      	adds	r0, r4, #1
 8000d24:	b2c0      	uxtb	r0, r0
 8000d26:	2801      	cmp	r0, #1
 8000d28:	dc00      	bgt.n	8000d2c <__aeabi_fsub+0xd4>
 8000d2a:	e0a7      	b.n	8000e7c <__aeabi_fsub+0x224>
 8000d2c:	464a      	mov	r2, r9
 8000d2e:	1a9c      	subs	r4, r3, r2
 8000d30:	0162      	lsls	r2, r4, #5
 8000d32:	d500      	bpl.n	8000d36 <__aeabi_fsub+0xde>
 8000d34:	e0b6      	b.n	8000ea4 <__aeabi_fsub+0x24c>
 8000d36:	2c00      	cmp	r4, #0
 8000d38:	d1be      	bne.n	8000cb8 <__aeabi_fsub+0x60>
 8000d3a:	2200      	movs	r2, #0
 8000d3c:	2400      	movs	r4, #0
 8000d3e:	2300      	movs	r3, #0
 8000d40:	e7e3      	b.n	8000d0a <__aeabi_fsub+0xb2>
 8000d42:	2e00      	cmp	r6, #0
 8000d44:	dc00      	bgt.n	8000d48 <__aeabi_fsub+0xf0>
 8000d46:	e085      	b.n	8000e54 <__aeabi_fsub+0x1fc>
 8000d48:	2800      	cmp	r0, #0
 8000d4a:	d046      	beq.n	8000dda <__aeabi_fsub+0x182>
 8000d4c:	2cff      	cmp	r4, #255	; 0xff
 8000d4e:	d049      	beq.n	8000de4 <__aeabi_fsub+0x18c>
 8000d50:	2280      	movs	r2, #128	; 0x80
 8000d52:	4648      	mov	r0, r9
 8000d54:	04d2      	lsls	r2, r2, #19
 8000d56:	4310      	orrs	r0, r2
 8000d58:	4681      	mov	r9, r0
 8000d5a:	2201      	movs	r2, #1
 8000d5c:	2e1b      	cmp	r6, #27
 8000d5e:	dc09      	bgt.n	8000d74 <__aeabi_fsub+0x11c>
 8000d60:	2020      	movs	r0, #32
 8000d62:	464c      	mov	r4, r9
 8000d64:	1b80      	subs	r0, r0, r6
 8000d66:	4084      	lsls	r4, r0
 8000d68:	464a      	mov	r2, r9
 8000d6a:	0020      	movs	r0, r4
 8000d6c:	40f2      	lsrs	r2, r6
 8000d6e:	1e44      	subs	r4, r0, #1
 8000d70:	41a0      	sbcs	r0, r4
 8000d72:	4302      	orrs	r2, r0
 8000d74:	189b      	adds	r3, r3, r2
 8000d76:	015a      	lsls	r2, r3, #5
 8000d78:	d528      	bpl.n	8000dcc <__aeabi_fsub+0x174>
 8000d7a:	3501      	adds	r5, #1
 8000d7c:	2dff      	cmp	r5, #255	; 0xff
 8000d7e:	d100      	bne.n	8000d82 <__aeabi_fsub+0x12a>
 8000d80:	e0a8      	b.n	8000ed4 <__aeabi_fsub+0x27c>
 8000d82:	2201      	movs	r2, #1
 8000d84:	2407      	movs	r4, #7
 8000d86:	4994      	ldr	r1, [pc, #592]	; (8000fd8 <__aeabi_fsub+0x380>)
 8000d88:	401a      	ands	r2, r3
 8000d8a:	085b      	lsrs	r3, r3, #1
 8000d8c:	400b      	ands	r3, r1
 8000d8e:	4313      	orrs	r3, r2
 8000d90:	401c      	ands	r4, r3
 8000d92:	e7a6      	b.n	8000ce2 <__aeabi_fsub+0x8a>
 8000d94:	2e00      	cmp	r6, #0
 8000d96:	d000      	beq.n	8000d9a <__aeabi_fsub+0x142>
 8000d98:	e778      	b.n	8000c8c <__aeabi_fsub+0x34>
 8000d9a:	e775      	b.n	8000c88 <__aeabi_fsub+0x30>
 8000d9c:	2cff      	cmp	r4, #255	; 0xff
 8000d9e:	d054      	beq.n	8000e4a <__aeabi_fsub+0x1f2>
 8000da0:	2280      	movs	r2, #128	; 0x80
 8000da2:	4649      	mov	r1, r9
 8000da4:	04d2      	lsls	r2, r2, #19
 8000da6:	4311      	orrs	r1, r2
 8000da8:	4689      	mov	r9, r1
 8000daa:	2201      	movs	r2, #1
 8000dac:	2e1b      	cmp	r6, #27
 8000dae:	dc09      	bgt.n	8000dc4 <__aeabi_fsub+0x16c>
 8000db0:	2120      	movs	r1, #32
 8000db2:	4648      	mov	r0, r9
 8000db4:	1b89      	subs	r1, r1, r6
 8000db6:	4088      	lsls	r0, r1
 8000db8:	464a      	mov	r2, r9
 8000dba:	0001      	movs	r1, r0
 8000dbc:	40f2      	lsrs	r2, r6
 8000dbe:	1e48      	subs	r0, r1, #1
 8000dc0:	4181      	sbcs	r1, r0
 8000dc2:	430a      	orrs	r2, r1
 8000dc4:	1a9b      	subs	r3, r3, r2
 8000dc6:	015a      	lsls	r2, r3, #5
 8000dc8:	d500      	bpl.n	8000dcc <__aeabi_fsub+0x174>
 8000dca:	e773      	b.n	8000cb4 <__aeabi_fsub+0x5c>
 8000dcc:	2201      	movs	r2, #1
 8000dce:	4641      	mov	r1, r8
 8000dd0:	400a      	ands	r2, r1
 8000dd2:	0759      	lsls	r1, r3, #29
 8000dd4:	d000      	beq.n	8000dd8 <__aeabi_fsub+0x180>
 8000dd6:	e789      	b.n	8000cec <__aeabi_fsub+0x94>
 8000dd8:	e011      	b.n	8000dfe <__aeabi_fsub+0x1a6>
 8000dda:	4648      	mov	r0, r9
 8000ddc:	2800      	cmp	r0, #0
 8000dde:	d158      	bne.n	8000e92 <__aeabi_fsub+0x23a>
 8000de0:	2cff      	cmp	r4, #255	; 0xff
 8000de2:	d10c      	bne.n	8000dfe <__aeabi_fsub+0x1a6>
 8000de4:	08db      	lsrs	r3, r3, #3
 8000de6:	2b00      	cmp	r3, #0
 8000de8:	d100      	bne.n	8000dec <__aeabi_fsub+0x194>
 8000dea:	e78c      	b.n	8000d06 <__aeabi_fsub+0xae>
 8000dec:	2080      	movs	r0, #128	; 0x80
 8000dee:	03c0      	lsls	r0, r0, #15
 8000df0:	4303      	orrs	r3, r0
 8000df2:	025b      	lsls	r3, r3, #9
 8000df4:	0a5b      	lsrs	r3, r3, #9
 8000df6:	24ff      	movs	r4, #255	; 0xff
 8000df8:	e787      	b.n	8000d0a <__aeabi_fsub+0xb2>
 8000dfa:	2cff      	cmp	r4, #255	; 0xff
 8000dfc:	d025      	beq.n	8000e4a <__aeabi_fsub+0x1f2>
 8000dfe:	08db      	lsrs	r3, r3, #3
 8000e00:	2dff      	cmp	r5, #255	; 0xff
 8000e02:	d0f0      	beq.n	8000de6 <__aeabi_fsub+0x18e>
 8000e04:	025b      	lsls	r3, r3, #9
 8000e06:	0a5b      	lsrs	r3, r3, #9
 8000e08:	b2ec      	uxtb	r4, r5
 8000e0a:	e77e      	b.n	8000d0a <__aeabi_fsub+0xb2>
 8000e0c:	2c00      	cmp	r4, #0
 8000e0e:	d04d      	beq.n	8000eac <__aeabi_fsub+0x254>
 8000e10:	28ff      	cmp	r0, #255	; 0xff
 8000e12:	d018      	beq.n	8000e46 <__aeabi_fsub+0x1ee>
 8000e14:	2480      	movs	r4, #128	; 0x80
 8000e16:	04e4      	lsls	r4, r4, #19
 8000e18:	4272      	negs	r2, r6
 8000e1a:	4323      	orrs	r3, r4
 8000e1c:	2a1b      	cmp	r2, #27
 8000e1e:	dd00      	ble.n	8000e22 <__aeabi_fsub+0x1ca>
 8000e20:	e0c4      	b.n	8000fac <__aeabi_fsub+0x354>
 8000e22:	001c      	movs	r4, r3
 8000e24:	2520      	movs	r5, #32
 8000e26:	40d4      	lsrs	r4, r2
 8000e28:	1aaa      	subs	r2, r5, r2
 8000e2a:	4093      	lsls	r3, r2
 8000e2c:	1e5a      	subs	r2, r3, #1
 8000e2e:	4193      	sbcs	r3, r2
 8000e30:	4323      	orrs	r3, r4
 8000e32:	464a      	mov	r2, r9
 8000e34:	0005      	movs	r5, r0
 8000e36:	1ad3      	subs	r3, r2, r3
 8000e38:	4688      	mov	r8, r1
 8000e3a:	e738      	b.n	8000cae <__aeabi_fsub+0x56>
 8000e3c:	1c72      	adds	r2, r6, #1
 8000e3e:	d0f8      	beq.n	8000e32 <__aeabi_fsub+0x1da>
 8000e40:	43f2      	mvns	r2, r6
 8000e42:	28ff      	cmp	r0, #255	; 0xff
 8000e44:	d1ea      	bne.n	8000e1c <__aeabi_fsub+0x1c4>
 8000e46:	000a      	movs	r2, r1
 8000e48:	464b      	mov	r3, r9
 8000e4a:	25ff      	movs	r5, #255	; 0xff
 8000e4c:	e7d7      	b.n	8000dfe <__aeabi_fsub+0x1a6>
 8000e4e:	019b      	lsls	r3, r3, #6
 8000e50:	0a5b      	lsrs	r3, r3, #9
 8000e52:	e75a      	b.n	8000d0a <__aeabi_fsub+0xb2>
 8000e54:	2e00      	cmp	r6, #0
 8000e56:	d141      	bne.n	8000edc <__aeabi_fsub+0x284>
 8000e58:	1c65      	adds	r5, r4, #1
 8000e5a:	b2e9      	uxtb	r1, r5
 8000e5c:	2901      	cmp	r1, #1
 8000e5e:	dd45      	ble.n	8000eec <__aeabi_fsub+0x294>
 8000e60:	2dff      	cmp	r5, #255	; 0xff
 8000e62:	d100      	bne.n	8000e66 <__aeabi_fsub+0x20e>
 8000e64:	e74f      	b.n	8000d06 <__aeabi_fsub+0xae>
 8000e66:	2407      	movs	r4, #7
 8000e68:	444b      	add	r3, r9
 8000e6a:	085b      	lsrs	r3, r3, #1
 8000e6c:	401c      	ands	r4, r3
 8000e6e:	e738      	b.n	8000ce2 <__aeabi_fsub+0x8a>
 8000e70:	2207      	movs	r2, #7
 8000e72:	4b5a      	ldr	r3, [pc, #360]	; (8000fdc <__aeabi_fsub+0x384>)
 8000e74:	1a2d      	subs	r5, r5, r0
 8000e76:	4023      	ands	r3, r4
 8000e78:	4014      	ands	r4, r2
 8000e7a:	e732      	b.n	8000ce2 <__aeabi_fsub+0x8a>
 8000e7c:	2c00      	cmp	r4, #0
 8000e7e:	d11d      	bne.n	8000ebc <__aeabi_fsub+0x264>
 8000e80:	2b00      	cmp	r3, #0
 8000e82:	d17a      	bne.n	8000f7a <__aeabi_fsub+0x322>
 8000e84:	464b      	mov	r3, r9
 8000e86:	2b00      	cmp	r3, #0
 8000e88:	d100      	bne.n	8000e8c <__aeabi_fsub+0x234>
 8000e8a:	e091      	b.n	8000fb0 <__aeabi_fsub+0x358>
 8000e8c:	000a      	movs	r2, r1
 8000e8e:	2500      	movs	r5, #0
 8000e90:	e7b5      	b.n	8000dfe <__aeabi_fsub+0x1a6>
 8000e92:	3e01      	subs	r6, #1
 8000e94:	2e00      	cmp	r6, #0
 8000e96:	d119      	bne.n	8000ecc <__aeabi_fsub+0x274>
 8000e98:	444b      	add	r3, r9
 8000e9a:	e76c      	b.n	8000d76 <__aeabi_fsub+0x11e>
 8000e9c:	2cff      	cmp	r4, #255	; 0xff
 8000e9e:	d184      	bne.n	8000daa <__aeabi_fsub+0x152>
 8000ea0:	25ff      	movs	r5, #255	; 0xff
 8000ea2:	e7ac      	b.n	8000dfe <__aeabi_fsub+0x1a6>
 8000ea4:	464a      	mov	r2, r9
 8000ea6:	4688      	mov	r8, r1
 8000ea8:	1ad4      	subs	r4, r2, r3
 8000eaa:	e705      	b.n	8000cb8 <__aeabi_fsub+0x60>
 8000eac:	2b00      	cmp	r3, #0
 8000eae:	d1c5      	bne.n	8000e3c <__aeabi_fsub+0x1e4>
 8000eb0:	000a      	movs	r2, r1
 8000eb2:	28ff      	cmp	r0, #255	; 0xff
 8000eb4:	d0c8      	beq.n	8000e48 <__aeabi_fsub+0x1f0>
 8000eb6:	0005      	movs	r5, r0
 8000eb8:	464b      	mov	r3, r9
 8000eba:	e7a0      	b.n	8000dfe <__aeabi_fsub+0x1a6>
 8000ebc:	2b00      	cmp	r3, #0
 8000ebe:	d149      	bne.n	8000f54 <__aeabi_fsub+0x2fc>
 8000ec0:	464b      	mov	r3, r9
 8000ec2:	2b00      	cmp	r3, #0
 8000ec4:	d077      	beq.n	8000fb6 <__aeabi_fsub+0x35e>
 8000ec6:	000a      	movs	r2, r1
 8000ec8:	25ff      	movs	r5, #255	; 0xff
 8000eca:	e798      	b.n	8000dfe <__aeabi_fsub+0x1a6>
 8000ecc:	2cff      	cmp	r4, #255	; 0xff
 8000ece:	d000      	beq.n	8000ed2 <__aeabi_fsub+0x27a>
 8000ed0:	e743      	b.n	8000d5a <__aeabi_fsub+0x102>
 8000ed2:	e787      	b.n	8000de4 <__aeabi_fsub+0x18c>
 8000ed4:	000a      	movs	r2, r1
 8000ed6:	24ff      	movs	r4, #255	; 0xff
 8000ed8:	2300      	movs	r3, #0
 8000eda:	e716      	b.n	8000d0a <__aeabi_fsub+0xb2>
 8000edc:	2c00      	cmp	r4, #0
 8000ede:	d115      	bne.n	8000f0c <__aeabi_fsub+0x2b4>
 8000ee0:	2b00      	cmp	r3, #0
 8000ee2:	d157      	bne.n	8000f94 <__aeabi_fsub+0x33c>
 8000ee4:	28ff      	cmp	r0, #255	; 0xff
 8000ee6:	d1e6      	bne.n	8000eb6 <__aeabi_fsub+0x25e>
 8000ee8:	464b      	mov	r3, r9
 8000eea:	e77b      	b.n	8000de4 <__aeabi_fsub+0x18c>
 8000eec:	2c00      	cmp	r4, #0
 8000eee:	d120      	bne.n	8000f32 <__aeabi_fsub+0x2da>
 8000ef0:	2b00      	cmp	r3, #0
 8000ef2:	d057      	beq.n	8000fa4 <__aeabi_fsub+0x34c>
 8000ef4:	4649      	mov	r1, r9
 8000ef6:	2900      	cmp	r1, #0
 8000ef8:	d053      	beq.n	8000fa2 <__aeabi_fsub+0x34a>
 8000efa:	444b      	add	r3, r9
 8000efc:	015a      	lsls	r2, r3, #5
 8000efe:	d568      	bpl.n	8000fd2 <__aeabi_fsub+0x37a>
 8000f00:	2407      	movs	r4, #7
 8000f02:	4a36      	ldr	r2, [pc, #216]	; (8000fdc <__aeabi_fsub+0x384>)
 8000f04:	401c      	ands	r4, r3
 8000f06:	2501      	movs	r5, #1
 8000f08:	4013      	ands	r3, r2
 8000f0a:	e6ea      	b.n	8000ce2 <__aeabi_fsub+0x8a>
 8000f0c:	28ff      	cmp	r0, #255	; 0xff
 8000f0e:	d0eb      	beq.n	8000ee8 <__aeabi_fsub+0x290>
 8000f10:	2280      	movs	r2, #128	; 0x80
 8000f12:	04d2      	lsls	r2, r2, #19
 8000f14:	4276      	negs	r6, r6
 8000f16:	4313      	orrs	r3, r2
 8000f18:	2e1b      	cmp	r6, #27
 8000f1a:	dc53      	bgt.n	8000fc4 <__aeabi_fsub+0x36c>
 8000f1c:	2520      	movs	r5, #32
 8000f1e:	1bad      	subs	r5, r5, r6
 8000f20:	001a      	movs	r2, r3
 8000f22:	40ab      	lsls	r3, r5
 8000f24:	40f2      	lsrs	r2, r6
 8000f26:	1e5c      	subs	r4, r3, #1
 8000f28:	41a3      	sbcs	r3, r4
 8000f2a:	4313      	orrs	r3, r2
 8000f2c:	444b      	add	r3, r9
 8000f2e:	0005      	movs	r5, r0
 8000f30:	e721      	b.n	8000d76 <__aeabi_fsub+0x11e>
 8000f32:	2b00      	cmp	r3, #0
 8000f34:	d0d8      	beq.n	8000ee8 <__aeabi_fsub+0x290>
 8000f36:	4649      	mov	r1, r9
 8000f38:	2900      	cmp	r1, #0
 8000f3a:	d100      	bne.n	8000f3e <__aeabi_fsub+0x2e6>
 8000f3c:	e752      	b.n	8000de4 <__aeabi_fsub+0x18c>
 8000f3e:	2180      	movs	r1, #128	; 0x80
 8000f40:	03c9      	lsls	r1, r1, #15
 8000f42:	420f      	tst	r7, r1
 8000f44:	d100      	bne.n	8000f48 <__aeabi_fsub+0x2f0>
 8000f46:	e74d      	b.n	8000de4 <__aeabi_fsub+0x18c>
 8000f48:	4660      	mov	r0, ip
 8000f4a:	4208      	tst	r0, r1
 8000f4c:	d000      	beq.n	8000f50 <__aeabi_fsub+0x2f8>
 8000f4e:	e749      	b.n	8000de4 <__aeabi_fsub+0x18c>
 8000f50:	464b      	mov	r3, r9
 8000f52:	e747      	b.n	8000de4 <__aeabi_fsub+0x18c>
 8000f54:	4648      	mov	r0, r9
 8000f56:	25ff      	movs	r5, #255	; 0xff
 8000f58:	2800      	cmp	r0, #0
 8000f5a:	d100      	bne.n	8000f5e <__aeabi_fsub+0x306>
 8000f5c:	e74f      	b.n	8000dfe <__aeabi_fsub+0x1a6>
 8000f5e:	2280      	movs	r2, #128	; 0x80
 8000f60:	03d2      	lsls	r2, r2, #15
 8000f62:	4217      	tst	r7, r2
 8000f64:	d004      	beq.n	8000f70 <__aeabi_fsub+0x318>
 8000f66:	4660      	mov	r0, ip
 8000f68:	4210      	tst	r0, r2
 8000f6a:	d101      	bne.n	8000f70 <__aeabi_fsub+0x318>
 8000f6c:	464b      	mov	r3, r9
 8000f6e:	4688      	mov	r8, r1
 8000f70:	2201      	movs	r2, #1
 8000f72:	4641      	mov	r1, r8
 8000f74:	25ff      	movs	r5, #255	; 0xff
 8000f76:	400a      	ands	r2, r1
 8000f78:	e741      	b.n	8000dfe <__aeabi_fsub+0x1a6>
 8000f7a:	4648      	mov	r0, r9
 8000f7c:	2800      	cmp	r0, #0
 8000f7e:	d01f      	beq.n	8000fc0 <__aeabi_fsub+0x368>
 8000f80:	1a1a      	subs	r2, r3, r0
 8000f82:	0150      	lsls	r0, r2, #5
 8000f84:	d520      	bpl.n	8000fc8 <__aeabi_fsub+0x370>
 8000f86:	464a      	mov	r2, r9
 8000f88:	2407      	movs	r4, #7
 8000f8a:	1ad3      	subs	r3, r2, r3
 8000f8c:	401c      	ands	r4, r3
 8000f8e:	4688      	mov	r8, r1
 8000f90:	2500      	movs	r5, #0
 8000f92:	e6a6      	b.n	8000ce2 <__aeabi_fsub+0x8a>
 8000f94:	1c74      	adds	r4, r6, #1
 8000f96:	d0c9      	beq.n	8000f2c <__aeabi_fsub+0x2d4>
 8000f98:	43f6      	mvns	r6, r6
 8000f9a:	28ff      	cmp	r0, #255	; 0xff
 8000f9c:	d1bc      	bne.n	8000f18 <__aeabi_fsub+0x2c0>
 8000f9e:	464b      	mov	r3, r9
 8000fa0:	e720      	b.n	8000de4 <__aeabi_fsub+0x18c>
 8000fa2:	4699      	mov	r9, r3
 8000fa4:	464b      	mov	r3, r9
 8000fa6:	2500      	movs	r5, #0
 8000fa8:	08db      	lsrs	r3, r3, #3
 8000faa:	e72b      	b.n	8000e04 <__aeabi_fsub+0x1ac>
 8000fac:	2301      	movs	r3, #1
 8000fae:	e740      	b.n	8000e32 <__aeabi_fsub+0x1da>
 8000fb0:	2200      	movs	r2, #0
 8000fb2:	2300      	movs	r3, #0
 8000fb4:	e6a9      	b.n	8000d0a <__aeabi_fsub+0xb2>
 8000fb6:	2380      	movs	r3, #128	; 0x80
 8000fb8:	2200      	movs	r2, #0
 8000fba:	03db      	lsls	r3, r3, #15
 8000fbc:	24ff      	movs	r4, #255	; 0xff
 8000fbe:	e6a4      	b.n	8000d0a <__aeabi_fsub+0xb2>
 8000fc0:	2500      	movs	r5, #0
 8000fc2:	e71c      	b.n	8000dfe <__aeabi_fsub+0x1a6>
 8000fc4:	2301      	movs	r3, #1
 8000fc6:	e7b1      	b.n	8000f2c <__aeabi_fsub+0x2d4>
 8000fc8:	2a00      	cmp	r2, #0
 8000fca:	d0f1      	beq.n	8000fb0 <__aeabi_fsub+0x358>
 8000fcc:	0013      	movs	r3, r2
 8000fce:	2500      	movs	r5, #0
 8000fd0:	e6fc      	b.n	8000dcc <__aeabi_fsub+0x174>
 8000fd2:	2500      	movs	r5, #0
 8000fd4:	e6fa      	b.n	8000dcc <__aeabi_fsub+0x174>
 8000fd6:	46c0      	nop			; (mov r8, r8)
 8000fd8:	7dffffff 	.word	0x7dffffff
 8000fdc:	fbffffff 	.word	0xfbffffff

08000fe0 <__aeabi_fcmpun>:
 8000fe0:	0242      	lsls	r2, r0, #9
 8000fe2:	024b      	lsls	r3, r1, #9
 8000fe4:	0040      	lsls	r0, r0, #1
 8000fe6:	0049      	lsls	r1, r1, #1
 8000fe8:	0a52      	lsrs	r2, r2, #9
 8000fea:	0a5b      	lsrs	r3, r3, #9
 8000fec:	0e09      	lsrs	r1, r1, #24
 8000fee:	0e00      	lsrs	r0, r0, #24
 8000ff0:	28ff      	cmp	r0, #255	; 0xff
 8000ff2:	d006      	beq.n	8001002 <__aeabi_fcmpun+0x22>
 8000ff4:	2000      	movs	r0, #0
 8000ff6:	29ff      	cmp	r1, #255	; 0xff
 8000ff8:	d102      	bne.n	8001000 <__aeabi_fcmpun+0x20>
 8000ffa:	0018      	movs	r0, r3
 8000ffc:	1e43      	subs	r3, r0, #1
 8000ffe:	4198      	sbcs	r0, r3
 8001000:	4770      	bx	lr
 8001002:	38fe      	subs	r0, #254	; 0xfe
 8001004:	2a00      	cmp	r2, #0
 8001006:	d1fb      	bne.n	8001000 <__aeabi_fcmpun+0x20>
 8001008:	e7f4      	b.n	8000ff4 <__aeabi_fcmpun+0x14>
 800100a:	46c0      	nop			; (mov r8, r8)

0800100c <__aeabi_f2iz>:
 800100c:	0241      	lsls	r1, r0, #9
 800100e:	0042      	lsls	r2, r0, #1
 8001010:	0fc3      	lsrs	r3, r0, #31
 8001012:	0a49      	lsrs	r1, r1, #9
 8001014:	0e12      	lsrs	r2, r2, #24
 8001016:	2000      	movs	r0, #0
 8001018:	2a7e      	cmp	r2, #126	; 0x7e
 800101a:	d90d      	bls.n	8001038 <__aeabi_f2iz+0x2c>
 800101c:	2a9d      	cmp	r2, #157	; 0x9d
 800101e:	d80c      	bhi.n	800103a <__aeabi_f2iz+0x2e>
 8001020:	2080      	movs	r0, #128	; 0x80
 8001022:	0400      	lsls	r0, r0, #16
 8001024:	4301      	orrs	r1, r0
 8001026:	2a95      	cmp	r2, #149	; 0x95
 8001028:	dc0a      	bgt.n	8001040 <__aeabi_f2iz+0x34>
 800102a:	2096      	movs	r0, #150	; 0x96
 800102c:	1a82      	subs	r2, r0, r2
 800102e:	40d1      	lsrs	r1, r2
 8001030:	4248      	negs	r0, r1
 8001032:	2b00      	cmp	r3, #0
 8001034:	d100      	bne.n	8001038 <__aeabi_f2iz+0x2c>
 8001036:	0008      	movs	r0, r1
 8001038:	4770      	bx	lr
 800103a:	4a03      	ldr	r2, [pc, #12]	; (8001048 <__aeabi_f2iz+0x3c>)
 800103c:	1898      	adds	r0, r3, r2
 800103e:	e7fb      	b.n	8001038 <__aeabi_f2iz+0x2c>
 8001040:	3a96      	subs	r2, #150	; 0x96
 8001042:	4091      	lsls	r1, r2
 8001044:	e7f4      	b.n	8001030 <__aeabi_f2iz+0x24>
 8001046:	46c0      	nop			; (mov r8, r8)
 8001048:	7fffffff 	.word	0x7fffffff

0800104c <__aeabi_i2f>:
 800104c:	b570      	push	{r4, r5, r6, lr}
 800104e:	2800      	cmp	r0, #0
 8001050:	d03d      	beq.n	80010ce <__aeabi_i2f+0x82>
 8001052:	17c3      	asrs	r3, r0, #31
 8001054:	18c5      	adds	r5, r0, r3
 8001056:	405d      	eors	r5, r3
 8001058:	0fc4      	lsrs	r4, r0, #31
 800105a:	0028      	movs	r0, r5
 800105c:	f001 fe66 	bl	8002d2c <__clzsi2>
 8001060:	229e      	movs	r2, #158	; 0x9e
 8001062:	1a12      	subs	r2, r2, r0
 8001064:	2a96      	cmp	r2, #150	; 0x96
 8001066:	dc07      	bgt.n	8001078 <__aeabi_i2f+0x2c>
 8001068:	b2d2      	uxtb	r2, r2
 800106a:	2808      	cmp	r0, #8
 800106c:	dd33      	ble.n	80010d6 <__aeabi_i2f+0x8a>
 800106e:	3808      	subs	r0, #8
 8001070:	4085      	lsls	r5, r0
 8001072:	0268      	lsls	r0, r5, #9
 8001074:	0a40      	lsrs	r0, r0, #9
 8001076:	e023      	b.n	80010c0 <__aeabi_i2f+0x74>
 8001078:	2a99      	cmp	r2, #153	; 0x99
 800107a:	dd0b      	ble.n	8001094 <__aeabi_i2f+0x48>
 800107c:	2305      	movs	r3, #5
 800107e:	0029      	movs	r1, r5
 8001080:	1a1b      	subs	r3, r3, r0
 8001082:	40d9      	lsrs	r1, r3
 8001084:	0003      	movs	r3, r0
 8001086:	331b      	adds	r3, #27
 8001088:	409d      	lsls	r5, r3
 800108a:	002b      	movs	r3, r5
 800108c:	1e5d      	subs	r5, r3, #1
 800108e:	41ab      	sbcs	r3, r5
 8001090:	4319      	orrs	r1, r3
 8001092:	000d      	movs	r5, r1
 8001094:	2805      	cmp	r0, #5
 8001096:	dd01      	ble.n	800109c <__aeabi_i2f+0x50>
 8001098:	1f43      	subs	r3, r0, #5
 800109a:	409d      	lsls	r5, r3
 800109c:	002b      	movs	r3, r5
 800109e:	490f      	ldr	r1, [pc, #60]	; (80010dc <__aeabi_i2f+0x90>)
 80010a0:	400b      	ands	r3, r1
 80010a2:	076e      	lsls	r6, r5, #29
 80010a4:	d009      	beq.n	80010ba <__aeabi_i2f+0x6e>
 80010a6:	260f      	movs	r6, #15
 80010a8:	4035      	ands	r5, r6
 80010aa:	2d04      	cmp	r5, #4
 80010ac:	d005      	beq.n	80010ba <__aeabi_i2f+0x6e>
 80010ae:	3304      	adds	r3, #4
 80010b0:	015d      	lsls	r5, r3, #5
 80010b2:	d502      	bpl.n	80010ba <__aeabi_i2f+0x6e>
 80010b4:	229f      	movs	r2, #159	; 0x9f
 80010b6:	400b      	ands	r3, r1
 80010b8:	1a12      	subs	r2, r2, r0
 80010ba:	019b      	lsls	r3, r3, #6
 80010bc:	0a58      	lsrs	r0, r3, #9
 80010be:	b2d2      	uxtb	r2, r2
 80010c0:	0240      	lsls	r0, r0, #9
 80010c2:	05d2      	lsls	r2, r2, #23
 80010c4:	0a40      	lsrs	r0, r0, #9
 80010c6:	07e4      	lsls	r4, r4, #31
 80010c8:	4310      	orrs	r0, r2
 80010ca:	4320      	orrs	r0, r4
 80010cc:	bd70      	pop	{r4, r5, r6, pc}
 80010ce:	2400      	movs	r4, #0
 80010d0:	2200      	movs	r2, #0
 80010d2:	2000      	movs	r0, #0
 80010d4:	e7f4      	b.n	80010c0 <__aeabi_i2f+0x74>
 80010d6:	0268      	lsls	r0, r5, #9
 80010d8:	0a40      	lsrs	r0, r0, #9
 80010da:	e7f1      	b.n	80010c0 <__aeabi_i2f+0x74>
 80010dc:	fbffffff 	.word	0xfbffffff

080010e0 <__aeabi_dadd>:
 80010e0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80010e2:	464f      	mov	r7, r9
 80010e4:	4646      	mov	r6, r8
 80010e6:	46d6      	mov	lr, sl
 80010e8:	000c      	movs	r4, r1
 80010ea:	0309      	lsls	r1, r1, #12
 80010ec:	b5c0      	push	{r6, r7, lr}
 80010ee:	0a49      	lsrs	r1, r1, #9
 80010f0:	0f47      	lsrs	r7, r0, #29
 80010f2:	005e      	lsls	r6, r3, #1
 80010f4:	4339      	orrs	r1, r7
 80010f6:	031f      	lsls	r7, r3, #12
 80010f8:	0fdb      	lsrs	r3, r3, #31
 80010fa:	469c      	mov	ip, r3
 80010fc:	0065      	lsls	r5, r4, #1
 80010fe:	0a7b      	lsrs	r3, r7, #9
 8001100:	0f57      	lsrs	r7, r2, #29
 8001102:	431f      	orrs	r7, r3
 8001104:	0d6d      	lsrs	r5, r5, #21
 8001106:	0fe4      	lsrs	r4, r4, #31
 8001108:	0d76      	lsrs	r6, r6, #21
 800110a:	46a1      	mov	r9, r4
 800110c:	00c0      	lsls	r0, r0, #3
 800110e:	46b8      	mov	r8, r7
 8001110:	00d2      	lsls	r2, r2, #3
 8001112:	1bab      	subs	r3, r5, r6
 8001114:	4564      	cmp	r4, ip
 8001116:	d07b      	beq.n	8001210 <__aeabi_dadd+0x130>
 8001118:	2b00      	cmp	r3, #0
 800111a:	dd5f      	ble.n	80011dc <__aeabi_dadd+0xfc>
 800111c:	2e00      	cmp	r6, #0
 800111e:	d000      	beq.n	8001122 <__aeabi_dadd+0x42>
 8001120:	e0a4      	b.n	800126c <__aeabi_dadd+0x18c>
 8001122:	003e      	movs	r6, r7
 8001124:	4316      	orrs	r6, r2
 8001126:	d100      	bne.n	800112a <__aeabi_dadd+0x4a>
 8001128:	e112      	b.n	8001350 <__aeabi_dadd+0x270>
 800112a:	1e5e      	subs	r6, r3, #1
 800112c:	2e00      	cmp	r6, #0
 800112e:	d000      	beq.n	8001132 <__aeabi_dadd+0x52>
 8001130:	e19e      	b.n	8001470 <__aeabi_dadd+0x390>
 8001132:	1a87      	subs	r7, r0, r2
 8001134:	4643      	mov	r3, r8
 8001136:	42b8      	cmp	r0, r7
 8001138:	4180      	sbcs	r0, r0
 800113a:	2501      	movs	r5, #1
 800113c:	1ac9      	subs	r1, r1, r3
 800113e:	4240      	negs	r0, r0
 8001140:	1a09      	subs	r1, r1, r0
 8001142:	020b      	lsls	r3, r1, #8
 8001144:	d400      	bmi.n	8001148 <__aeabi_dadd+0x68>
 8001146:	e131      	b.n	80013ac <__aeabi_dadd+0x2cc>
 8001148:	0249      	lsls	r1, r1, #9
 800114a:	0a4e      	lsrs	r6, r1, #9
 800114c:	2e00      	cmp	r6, #0
 800114e:	d100      	bne.n	8001152 <__aeabi_dadd+0x72>
 8001150:	e16e      	b.n	8001430 <__aeabi_dadd+0x350>
 8001152:	0030      	movs	r0, r6
 8001154:	f001 fdea 	bl	8002d2c <__clzsi2>
 8001158:	0003      	movs	r3, r0
 800115a:	3b08      	subs	r3, #8
 800115c:	2b1f      	cmp	r3, #31
 800115e:	dd00      	ble.n	8001162 <__aeabi_dadd+0x82>
 8001160:	e161      	b.n	8001426 <__aeabi_dadd+0x346>
 8001162:	2220      	movs	r2, #32
 8001164:	0039      	movs	r1, r7
 8001166:	1ad2      	subs	r2, r2, r3
 8001168:	409e      	lsls	r6, r3
 800116a:	40d1      	lsrs	r1, r2
 800116c:	409f      	lsls	r7, r3
 800116e:	430e      	orrs	r6, r1
 8001170:	429d      	cmp	r5, r3
 8001172:	dd00      	ble.n	8001176 <__aeabi_dadd+0x96>
 8001174:	e151      	b.n	800141a <__aeabi_dadd+0x33a>
 8001176:	1b5d      	subs	r5, r3, r5
 8001178:	1c6b      	adds	r3, r5, #1
 800117a:	2b1f      	cmp	r3, #31
 800117c:	dd00      	ble.n	8001180 <__aeabi_dadd+0xa0>
 800117e:	e17c      	b.n	800147a <__aeabi_dadd+0x39a>
 8001180:	2120      	movs	r1, #32
 8001182:	1ac9      	subs	r1, r1, r3
 8001184:	003d      	movs	r5, r7
 8001186:	0030      	movs	r0, r6
 8001188:	408f      	lsls	r7, r1
 800118a:	4088      	lsls	r0, r1
 800118c:	40dd      	lsrs	r5, r3
 800118e:	1e79      	subs	r1, r7, #1
 8001190:	418f      	sbcs	r7, r1
 8001192:	0031      	movs	r1, r6
 8001194:	2207      	movs	r2, #7
 8001196:	4328      	orrs	r0, r5
 8001198:	40d9      	lsrs	r1, r3
 800119a:	2500      	movs	r5, #0
 800119c:	4307      	orrs	r7, r0
 800119e:	403a      	ands	r2, r7
 80011a0:	2a00      	cmp	r2, #0
 80011a2:	d009      	beq.n	80011b8 <__aeabi_dadd+0xd8>
 80011a4:	230f      	movs	r3, #15
 80011a6:	403b      	ands	r3, r7
 80011a8:	2b04      	cmp	r3, #4
 80011aa:	d005      	beq.n	80011b8 <__aeabi_dadd+0xd8>
 80011ac:	1d3b      	adds	r3, r7, #4
 80011ae:	42bb      	cmp	r3, r7
 80011b0:	41bf      	sbcs	r7, r7
 80011b2:	427f      	negs	r7, r7
 80011b4:	19c9      	adds	r1, r1, r7
 80011b6:	001f      	movs	r7, r3
 80011b8:	020b      	lsls	r3, r1, #8
 80011ba:	d400      	bmi.n	80011be <__aeabi_dadd+0xde>
 80011bc:	e226      	b.n	800160c <__aeabi_dadd+0x52c>
 80011be:	1c6a      	adds	r2, r5, #1
 80011c0:	4bc6      	ldr	r3, [pc, #792]	; (80014dc <__aeabi_dadd+0x3fc>)
 80011c2:	0555      	lsls	r5, r2, #21
 80011c4:	0d6d      	lsrs	r5, r5, #21
 80011c6:	429a      	cmp	r2, r3
 80011c8:	d100      	bne.n	80011cc <__aeabi_dadd+0xec>
 80011ca:	e106      	b.n	80013da <__aeabi_dadd+0x2fa>
 80011cc:	4ac4      	ldr	r2, [pc, #784]	; (80014e0 <__aeabi_dadd+0x400>)
 80011ce:	08ff      	lsrs	r7, r7, #3
 80011d0:	400a      	ands	r2, r1
 80011d2:	0753      	lsls	r3, r2, #29
 80011d4:	0252      	lsls	r2, r2, #9
 80011d6:	433b      	orrs	r3, r7
 80011d8:	0b12      	lsrs	r2, r2, #12
 80011da:	e08e      	b.n	80012fa <__aeabi_dadd+0x21a>
 80011dc:	2b00      	cmp	r3, #0
 80011de:	d000      	beq.n	80011e2 <__aeabi_dadd+0x102>
 80011e0:	e0b8      	b.n	8001354 <__aeabi_dadd+0x274>
 80011e2:	1c6b      	adds	r3, r5, #1
 80011e4:	055b      	lsls	r3, r3, #21
 80011e6:	0d5b      	lsrs	r3, r3, #21
 80011e8:	2b01      	cmp	r3, #1
 80011ea:	dc00      	bgt.n	80011ee <__aeabi_dadd+0x10e>
 80011ec:	e130      	b.n	8001450 <__aeabi_dadd+0x370>
 80011ee:	1a87      	subs	r7, r0, r2
 80011f0:	4643      	mov	r3, r8
 80011f2:	42b8      	cmp	r0, r7
 80011f4:	41b6      	sbcs	r6, r6
 80011f6:	1acb      	subs	r3, r1, r3
 80011f8:	4276      	negs	r6, r6
 80011fa:	1b9e      	subs	r6, r3, r6
 80011fc:	0233      	lsls	r3, r6, #8
 80011fe:	d500      	bpl.n	8001202 <__aeabi_dadd+0x122>
 8001200:	e14c      	b.n	800149c <__aeabi_dadd+0x3bc>
 8001202:	003b      	movs	r3, r7
 8001204:	4333      	orrs	r3, r6
 8001206:	d1a1      	bne.n	800114c <__aeabi_dadd+0x6c>
 8001208:	2200      	movs	r2, #0
 800120a:	2400      	movs	r4, #0
 800120c:	2500      	movs	r5, #0
 800120e:	e070      	b.n	80012f2 <__aeabi_dadd+0x212>
 8001210:	2b00      	cmp	r3, #0
 8001212:	dc00      	bgt.n	8001216 <__aeabi_dadd+0x136>
 8001214:	e0e5      	b.n	80013e2 <__aeabi_dadd+0x302>
 8001216:	2e00      	cmp	r6, #0
 8001218:	d100      	bne.n	800121c <__aeabi_dadd+0x13c>
 800121a:	e083      	b.n	8001324 <__aeabi_dadd+0x244>
 800121c:	4eaf      	ldr	r6, [pc, #700]	; (80014dc <__aeabi_dadd+0x3fc>)
 800121e:	42b5      	cmp	r5, r6
 8001220:	d060      	beq.n	80012e4 <__aeabi_dadd+0x204>
 8001222:	2680      	movs	r6, #128	; 0x80
 8001224:	0436      	lsls	r6, r6, #16
 8001226:	4337      	orrs	r7, r6
 8001228:	46b8      	mov	r8, r7
 800122a:	2b38      	cmp	r3, #56	; 0x38
 800122c:	dc00      	bgt.n	8001230 <__aeabi_dadd+0x150>
 800122e:	e13e      	b.n	80014ae <__aeabi_dadd+0x3ce>
 8001230:	4643      	mov	r3, r8
 8001232:	4313      	orrs	r3, r2
 8001234:	001f      	movs	r7, r3
 8001236:	1e7a      	subs	r2, r7, #1
 8001238:	4197      	sbcs	r7, r2
 800123a:	183f      	adds	r7, r7, r0
 800123c:	4287      	cmp	r7, r0
 800123e:	4180      	sbcs	r0, r0
 8001240:	4240      	negs	r0, r0
 8001242:	1809      	adds	r1, r1, r0
 8001244:	020b      	lsls	r3, r1, #8
 8001246:	d400      	bmi.n	800124a <__aeabi_dadd+0x16a>
 8001248:	e0b0      	b.n	80013ac <__aeabi_dadd+0x2cc>
 800124a:	4ba4      	ldr	r3, [pc, #656]	; (80014dc <__aeabi_dadd+0x3fc>)
 800124c:	3501      	adds	r5, #1
 800124e:	429d      	cmp	r5, r3
 8001250:	d100      	bne.n	8001254 <__aeabi_dadd+0x174>
 8001252:	e0c3      	b.n	80013dc <__aeabi_dadd+0x2fc>
 8001254:	4aa2      	ldr	r2, [pc, #648]	; (80014e0 <__aeabi_dadd+0x400>)
 8001256:	087b      	lsrs	r3, r7, #1
 8001258:	400a      	ands	r2, r1
 800125a:	2101      	movs	r1, #1
 800125c:	400f      	ands	r7, r1
 800125e:	431f      	orrs	r7, r3
 8001260:	0851      	lsrs	r1, r2, #1
 8001262:	07d3      	lsls	r3, r2, #31
 8001264:	2207      	movs	r2, #7
 8001266:	431f      	orrs	r7, r3
 8001268:	403a      	ands	r2, r7
 800126a:	e799      	b.n	80011a0 <__aeabi_dadd+0xc0>
 800126c:	4e9b      	ldr	r6, [pc, #620]	; (80014dc <__aeabi_dadd+0x3fc>)
 800126e:	42b5      	cmp	r5, r6
 8001270:	d038      	beq.n	80012e4 <__aeabi_dadd+0x204>
 8001272:	2680      	movs	r6, #128	; 0x80
 8001274:	0436      	lsls	r6, r6, #16
 8001276:	4337      	orrs	r7, r6
 8001278:	46b8      	mov	r8, r7
 800127a:	2b38      	cmp	r3, #56	; 0x38
 800127c:	dd00      	ble.n	8001280 <__aeabi_dadd+0x1a0>
 800127e:	e0dc      	b.n	800143a <__aeabi_dadd+0x35a>
 8001280:	2b1f      	cmp	r3, #31
 8001282:	dc00      	bgt.n	8001286 <__aeabi_dadd+0x1a6>
 8001284:	e130      	b.n	80014e8 <__aeabi_dadd+0x408>
 8001286:	001e      	movs	r6, r3
 8001288:	4647      	mov	r7, r8
 800128a:	3e20      	subs	r6, #32
 800128c:	40f7      	lsrs	r7, r6
 800128e:	46bc      	mov	ip, r7
 8001290:	2b20      	cmp	r3, #32
 8001292:	d004      	beq.n	800129e <__aeabi_dadd+0x1be>
 8001294:	2640      	movs	r6, #64	; 0x40
 8001296:	1af3      	subs	r3, r6, r3
 8001298:	4646      	mov	r6, r8
 800129a:	409e      	lsls	r6, r3
 800129c:	4332      	orrs	r2, r6
 800129e:	0017      	movs	r7, r2
 80012a0:	4663      	mov	r3, ip
 80012a2:	1e7a      	subs	r2, r7, #1
 80012a4:	4197      	sbcs	r7, r2
 80012a6:	431f      	orrs	r7, r3
 80012a8:	e0cc      	b.n	8001444 <__aeabi_dadd+0x364>
 80012aa:	2b00      	cmp	r3, #0
 80012ac:	d100      	bne.n	80012b0 <__aeabi_dadd+0x1d0>
 80012ae:	e204      	b.n	80016ba <__aeabi_dadd+0x5da>
 80012b0:	4643      	mov	r3, r8
 80012b2:	4313      	orrs	r3, r2
 80012b4:	d100      	bne.n	80012b8 <__aeabi_dadd+0x1d8>
 80012b6:	e159      	b.n	800156c <__aeabi_dadd+0x48c>
 80012b8:	074b      	lsls	r3, r1, #29
 80012ba:	08c0      	lsrs	r0, r0, #3
 80012bc:	4318      	orrs	r0, r3
 80012be:	2380      	movs	r3, #128	; 0x80
 80012c0:	08c9      	lsrs	r1, r1, #3
 80012c2:	031b      	lsls	r3, r3, #12
 80012c4:	4219      	tst	r1, r3
 80012c6:	d008      	beq.n	80012da <__aeabi_dadd+0x1fa>
 80012c8:	4645      	mov	r5, r8
 80012ca:	08ed      	lsrs	r5, r5, #3
 80012cc:	421d      	tst	r5, r3
 80012ce:	d104      	bne.n	80012da <__aeabi_dadd+0x1fa>
 80012d0:	4643      	mov	r3, r8
 80012d2:	08d0      	lsrs	r0, r2, #3
 80012d4:	0759      	lsls	r1, r3, #29
 80012d6:	4308      	orrs	r0, r1
 80012d8:	0029      	movs	r1, r5
 80012da:	0f42      	lsrs	r2, r0, #29
 80012dc:	00c9      	lsls	r1, r1, #3
 80012de:	4d7f      	ldr	r5, [pc, #508]	; (80014dc <__aeabi_dadd+0x3fc>)
 80012e0:	4311      	orrs	r1, r2
 80012e2:	00c0      	lsls	r0, r0, #3
 80012e4:	074b      	lsls	r3, r1, #29
 80012e6:	08ca      	lsrs	r2, r1, #3
 80012e8:	497c      	ldr	r1, [pc, #496]	; (80014dc <__aeabi_dadd+0x3fc>)
 80012ea:	08c0      	lsrs	r0, r0, #3
 80012ec:	4303      	orrs	r3, r0
 80012ee:	428d      	cmp	r5, r1
 80012f0:	d068      	beq.n	80013c4 <__aeabi_dadd+0x2e4>
 80012f2:	0312      	lsls	r2, r2, #12
 80012f4:	056d      	lsls	r5, r5, #21
 80012f6:	0b12      	lsrs	r2, r2, #12
 80012f8:	0d6d      	lsrs	r5, r5, #21
 80012fa:	2100      	movs	r1, #0
 80012fc:	0312      	lsls	r2, r2, #12
 80012fe:	0018      	movs	r0, r3
 8001300:	0b13      	lsrs	r3, r2, #12
 8001302:	0d0a      	lsrs	r2, r1, #20
 8001304:	0512      	lsls	r2, r2, #20
 8001306:	431a      	orrs	r2, r3
 8001308:	4b76      	ldr	r3, [pc, #472]	; (80014e4 <__aeabi_dadd+0x404>)
 800130a:	052d      	lsls	r5, r5, #20
 800130c:	4013      	ands	r3, r2
 800130e:	432b      	orrs	r3, r5
 8001310:	005b      	lsls	r3, r3, #1
 8001312:	07e4      	lsls	r4, r4, #31
 8001314:	085b      	lsrs	r3, r3, #1
 8001316:	4323      	orrs	r3, r4
 8001318:	0019      	movs	r1, r3
 800131a:	bc1c      	pop	{r2, r3, r4}
 800131c:	4690      	mov	r8, r2
 800131e:	4699      	mov	r9, r3
 8001320:	46a2      	mov	sl, r4
 8001322:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001324:	003e      	movs	r6, r7
 8001326:	4316      	orrs	r6, r2
 8001328:	d012      	beq.n	8001350 <__aeabi_dadd+0x270>
 800132a:	1e5e      	subs	r6, r3, #1
 800132c:	2e00      	cmp	r6, #0
 800132e:	d000      	beq.n	8001332 <__aeabi_dadd+0x252>
 8001330:	e100      	b.n	8001534 <__aeabi_dadd+0x454>
 8001332:	1887      	adds	r7, r0, r2
 8001334:	4287      	cmp	r7, r0
 8001336:	4180      	sbcs	r0, r0
 8001338:	4441      	add	r1, r8
 800133a:	4240      	negs	r0, r0
 800133c:	1809      	adds	r1, r1, r0
 800133e:	2501      	movs	r5, #1
 8001340:	020b      	lsls	r3, r1, #8
 8001342:	d533      	bpl.n	80013ac <__aeabi_dadd+0x2cc>
 8001344:	2502      	movs	r5, #2
 8001346:	e785      	b.n	8001254 <__aeabi_dadd+0x174>
 8001348:	4664      	mov	r4, ip
 800134a:	0033      	movs	r3, r6
 800134c:	4641      	mov	r1, r8
 800134e:	0010      	movs	r0, r2
 8001350:	001d      	movs	r5, r3
 8001352:	e7c7      	b.n	80012e4 <__aeabi_dadd+0x204>
 8001354:	2d00      	cmp	r5, #0
 8001356:	d000      	beq.n	800135a <__aeabi_dadd+0x27a>
 8001358:	e0da      	b.n	8001510 <__aeabi_dadd+0x430>
 800135a:	000c      	movs	r4, r1
 800135c:	4304      	orrs	r4, r0
 800135e:	d0f3      	beq.n	8001348 <__aeabi_dadd+0x268>
 8001360:	1c5c      	adds	r4, r3, #1
 8001362:	d100      	bne.n	8001366 <__aeabi_dadd+0x286>
 8001364:	e19f      	b.n	80016a6 <__aeabi_dadd+0x5c6>
 8001366:	4c5d      	ldr	r4, [pc, #372]	; (80014dc <__aeabi_dadd+0x3fc>)
 8001368:	42a6      	cmp	r6, r4
 800136a:	d100      	bne.n	800136e <__aeabi_dadd+0x28e>
 800136c:	e12f      	b.n	80015ce <__aeabi_dadd+0x4ee>
 800136e:	43db      	mvns	r3, r3
 8001370:	2b38      	cmp	r3, #56	; 0x38
 8001372:	dd00      	ble.n	8001376 <__aeabi_dadd+0x296>
 8001374:	e166      	b.n	8001644 <__aeabi_dadd+0x564>
 8001376:	2b1f      	cmp	r3, #31
 8001378:	dd00      	ble.n	800137c <__aeabi_dadd+0x29c>
 800137a:	e183      	b.n	8001684 <__aeabi_dadd+0x5a4>
 800137c:	2420      	movs	r4, #32
 800137e:	0005      	movs	r5, r0
 8001380:	1ae4      	subs	r4, r4, r3
 8001382:	000f      	movs	r7, r1
 8001384:	40dd      	lsrs	r5, r3
 8001386:	40d9      	lsrs	r1, r3
 8001388:	40a0      	lsls	r0, r4
 800138a:	4643      	mov	r3, r8
 800138c:	40a7      	lsls	r7, r4
 800138e:	1a5b      	subs	r3, r3, r1
 8001390:	1e44      	subs	r4, r0, #1
 8001392:	41a0      	sbcs	r0, r4
 8001394:	4698      	mov	r8, r3
 8001396:	432f      	orrs	r7, r5
 8001398:	4338      	orrs	r0, r7
 800139a:	1a17      	subs	r7, r2, r0
 800139c:	42ba      	cmp	r2, r7
 800139e:	4192      	sbcs	r2, r2
 80013a0:	4643      	mov	r3, r8
 80013a2:	4252      	negs	r2, r2
 80013a4:	1a99      	subs	r1, r3, r2
 80013a6:	4664      	mov	r4, ip
 80013a8:	0035      	movs	r5, r6
 80013aa:	e6ca      	b.n	8001142 <__aeabi_dadd+0x62>
 80013ac:	2207      	movs	r2, #7
 80013ae:	403a      	ands	r2, r7
 80013b0:	2a00      	cmp	r2, #0
 80013b2:	d000      	beq.n	80013b6 <__aeabi_dadd+0x2d6>
 80013b4:	e6f6      	b.n	80011a4 <__aeabi_dadd+0xc4>
 80013b6:	074b      	lsls	r3, r1, #29
 80013b8:	08ca      	lsrs	r2, r1, #3
 80013ba:	4948      	ldr	r1, [pc, #288]	; (80014dc <__aeabi_dadd+0x3fc>)
 80013bc:	08ff      	lsrs	r7, r7, #3
 80013be:	433b      	orrs	r3, r7
 80013c0:	428d      	cmp	r5, r1
 80013c2:	d196      	bne.n	80012f2 <__aeabi_dadd+0x212>
 80013c4:	0019      	movs	r1, r3
 80013c6:	4311      	orrs	r1, r2
 80013c8:	d100      	bne.n	80013cc <__aeabi_dadd+0x2ec>
 80013ca:	e19e      	b.n	800170a <__aeabi_dadd+0x62a>
 80013cc:	2180      	movs	r1, #128	; 0x80
 80013ce:	0309      	lsls	r1, r1, #12
 80013d0:	430a      	orrs	r2, r1
 80013d2:	0312      	lsls	r2, r2, #12
 80013d4:	0b12      	lsrs	r2, r2, #12
 80013d6:	4d41      	ldr	r5, [pc, #260]	; (80014dc <__aeabi_dadd+0x3fc>)
 80013d8:	e78f      	b.n	80012fa <__aeabi_dadd+0x21a>
 80013da:	0015      	movs	r5, r2
 80013dc:	2200      	movs	r2, #0
 80013de:	2300      	movs	r3, #0
 80013e0:	e78b      	b.n	80012fa <__aeabi_dadd+0x21a>
 80013e2:	2b00      	cmp	r3, #0
 80013e4:	d000      	beq.n	80013e8 <__aeabi_dadd+0x308>
 80013e6:	e0c7      	b.n	8001578 <__aeabi_dadd+0x498>
 80013e8:	1c6b      	adds	r3, r5, #1
 80013ea:	055f      	lsls	r7, r3, #21
 80013ec:	0d7f      	lsrs	r7, r7, #21
 80013ee:	2f01      	cmp	r7, #1
 80013f0:	dc00      	bgt.n	80013f4 <__aeabi_dadd+0x314>
 80013f2:	e0f1      	b.n	80015d8 <__aeabi_dadd+0x4f8>
 80013f4:	4d39      	ldr	r5, [pc, #228]	; (80014dc <__aeabi_dadd+0x3fc>)
 80013f6:	42ab      	cmp	r3, r5
 80013f8:	d100      	bne.n	80013fc <__aeabi_dadd+0x31c>
 80013fa:	e0b9      	b.n	8001570 <__aeabi_dadd+0x490>
 80013fc:	1885      	adds	r5, r0, r2
 80013fe:	000a      	movs	r2, r1
 8001400:	4285      	cmp	r5, r0
 8001402:	4189      	sbcs	r1, r1
 8001404:	4442      	add	r2, r8
 8001406:	4249      	negs	r1, r1
 8001408:	1851      	adds	r1, r2, r1
 800140a:	2207      	movs	r2, #7
 800140c:	07cf      	lsls	r7, r1, #31
 800140e:	086d      	lsrs	r5, r5, #1
 8001410:	432f      	orrs	r7, r5
 8001412:	0849      	lsrs	r1, r1, #1
 8001414:	403a      	ands	r2, r7
 8001416:	001d      	movs	r5, r3
 8001418:	e6c2      	b.n	80011a0 <__aeabi_dadd+0xc0>
 800141a:	2207      	movs	r2, #7
 800141c:	4930      	ldr	r1, [pc, #192]	; (80014e0 <__aeabi_dadd+0x400>)
 800141e:	1aed      	subs	r5, r5, r3
 8001420:	4031      	ands	r1, r6
 8001422:	403a      	ands	r2, r7
 8001424:	e6bc      	b.n	80011a0 <__aeabi_dadd+0xc0>
 8001426:	003e      	movs	r6, r7
 8001428:	3828      	subs	r0, #40	; 0x28
 800142a:	4086      	lsls	r6, r0
 800142c:	2700      	movs	r7, #0
 800142e:	e69f      	b.n	8001170 <__aeabi_dadd+0x90>
 8001430:	0038      	movs	r0, r7
 8001432:	f001 fc7b 	bl	8002d2c <__clzsi2>
 8001436:	3020      	adds	r0, #32
 8001438:	e68e      	b.n	8001158 <__aeabi_dadd+0x78>
 800143a:	4643      	mov	r3, r8
 800143c:	4313      	orrs	r3, r2
 800143e:	001f      	movs	r7, r3
 8001440:	1e7a      	subs	r2, r7, #1
 8001442:	4197      	sbcs	r7, r2
 8001444:	1bc7      	subs	r7, r0, r7
 8001446:	42b8      	cmp	r0, r7
 8001448:	4180      	sbcs	r0, r0
 800144a:	4240      	negs	r0, r0
 800144c:	1a09      	subs	r1, r1, r0
 800144e:	e678      	b.n	8001142 <__aeabi_dadd+0x62>
 8001450:	000e      	movs	r6, r1
 8001452:	003b      	movs	r3, r7
 8001454:	4306      	orrs	r6, r0
 8001456:	4313      	orrs	r3, r2
 8001458:	2d00      	cmp	r5, #0
 800145a:	d161      	bne.n	8001520 <__aeabi_dadd+0x440>
 800145c:	2e00      	cmp	r6, #0
 800145e:	d000      	beq.n	8001462 <__aeabi_dadd+0x382>
 8001460:	e0f4      	b.n	800164c <__aeabi_dadd+0x56c>
 8001462:	2b00      	cmp	r3, #0
 8001464:	d100      	bne.n	8001468 <__aeabi_dadd+0x388>
 8001466:	e11b      	b.n	80016a0 <__aeabi_dadd+0x5c0>
 8001468:	4664      	mov	r4, ip
 800146a:	0039      	movs	r1, r7
 800146c:	0010      	movs	r0, r2
 800146e:	e739      	b.n	80012e4 <__aeabi_dadd+0x204>
 8001470:	4f1a      	ldr	r7, [pc, #104]	; (80014dc <__aeabi_dadd+0x3fc>)
 8001472:	42bb      	cmp	r3, r7
 8001474:	d07a      	beq.n	800156c <__aeabi_dadd+0x48c>
 8001476:	0033      	movs	r3, r6
 8001478:	e6ff      	b.n	800127a <__aeabi_dadd+0x19a>
 800147a:	0030      	movs	r0, r6
 800147c:	3d1f      	subs	r5, #31
 800147e:	40e8      	lsrs	r0, r5
 8001480:	2b20      	cmp	r3, #32
 8001482:	d003      	beq.n	800148c <__aeabi_dadd+0x3ac>
 8001484:	2140      	movs	r1, #64	; 0x40
 8001486:	1acb      	subs	r3, r1, r3
 8001488:	409e      	lsls	r6, r3
 800148a:	4337      	orrs	r7, r6
 800148c:	1e7b      	subs	r3, r7, #1
 800148e:	419f      	sbcs	r7, r3
 8001490:	2207      	movs	r2, #7
 8001492:	4307      	orrs	r7, r0
 8001494:	403a      	ands	r2, r7
 8001496:	2100      	movs	r1, #0
 8001498:	2500      	movs	r5, #0
 800149a:	e789      	b.n	80013b0 <__aeabi_dadd+0x2d0>
 800149c:	1a17      	subs	r7, r2, r0
 800149e:	4643      	mov	r3, r8
 80014a0:	42ba      	cmp	r2, r7
 80014a2:	41b6      	sbcs	r6, r6
 80014a4:	1a59      	subs	r1, r3, r1
 80014a6:	4276      	negs	r6, r6
 80014a8:	1b8e      	subs	r6, r1, r6
 80014aa:	4664      	mov	r4, ip
 80014ac:	e64e      	b.n	800114c <__aeabi_dadd+0x6c>
 80014ae:	2b1f      	cmp	r3, #31
 80014b0:	dd00      	ble.n	80014b4 <__aeabi_dadd+0x3d4>
 80014b2:	e0ad      	b.n	8001610 <__aeabi_dadd+0x530>
 80014b4:	2620      	movs	r6, #32
 80014b6:	4647      	mov	r7, r8
 80014b8:	1af6      	subs	r6, r6, r3
 80014ba:	40b7      	lsls	r7, r6
 80014bc:	46b9      	mov	r9, r7
 80014be:	0017      	movs	r7, r2
 80014c0:	46b2      	mov	sl, r6
 80014c2:	40df      	lsrs	r7, r3
 80014c4:	464e      	mov	r6, r9
 80014c6:	433e      	orrs	r6, r7
 80014c8:	0037      	movs	r7, r6
 80014ca:	4656      	mov	r6, sl
 80014cc:	40b2      	lsls	r2, r6
 80014ce:	1e56      	subs	r6, r2, #1
 80014d0:	41b2      	sbcs	r2, r6
 80014d2:	4317      	orrs	r7, r2
 80014d4:	4642      	mov	r2, r8
 80014d6:	40da      	lsrs	r2, r3
 80014d8:	1889      	adds	r1, r1, r2
 80014da:	e6ae      	b.n	800123a <__aeabi_dadd+0x15a>
 80014dc:	000007ff 	.word	0x000007ff
 80014e0:	ff7fffff 	.word	0xff7fffff
 80014e4:	800fffff 	.word	0x800fffff
 80014e8:	2620      	movs	r6, #32
 80014ea:	4647      	mov	r7, r8
 80014ec:	1af6      	subs	r6, r6, r3
 80014ee:	40b7      	lsls	r7, r6
 80014f0:	46b9      	mov	r9, r7
 80014f2:	0017      	movs	r7, r2
 80014f4:	46b2      	mov	sl, r6
 80014f6:	40df      	lsrs	r7, r3
 80014f8:	464e      	mov	r6, r9
 80014fa:	433e      	orrs	r6, r7
 80014fc:	0037      	movs	r7, r6
 80014fe:	4656      	mov	r6, sl
 8001500:	40b2      	lsls	r2, r6
 8001502:	1e56      	subs	r6, r2, #1
 8001504:	41b2      	sbcs	r2, r6
 8001506:	4317      	orrs	r7, r2
 8001508:	4642      	mov	r2, r8
 800150a:	40da      	lsrs	r2, r3
 800150c:	1a89      	subs	r1, r1, r2
 800150e:	e799      	b.n	8001444 <__aeabi_dadd+0x364>
 8001510:	4c7f      	ldr	r4, [pc, #508]	; (8001710 <__aeabi_dadd+0x630>)
 8001512:	42a6      	cmp	r6, r4
 8001514:	d05b      	beq.n	80015ce <__aeabi_dadd+0x4ee>
 8001516:	2480      	movs	r4, #128	; 0x80
 8001518:	0424      	lsls	r4, r4, #16
 800151a:	425b      	negs	r3, r3
 800151c:	4321      	orrs	r1, r4
 800151e:	e727      	b.n	8001370 <__aeabi_dadd+0x290>
 8001520:	2e00      	cmp	r6, #0
 8001522:	d10c      	bne.n	800153e <__aeabi_dadd+0x45e>
 8001524:	2b00      	cmp	r3, #0
 8001526:	d100      	bne.n	800152a <__aeabi_dadd+0x44a>
 8001528:	e0cb      	b.n	80016c2 <__aeabi_dadd+0x5e2>
 800152a:	4664      	mov	r4, ip
 800152c:	0039      	movs	r1, r7
 800152e:	0010      	movs	r0, r2
 8001530:	4d77      	ldr	r5, [pc, #476]	; (8001710 <__aeabi_dadd+0x630>)
 8001532:	e6d7      	b.n	80012e4 <__aeabi_dadd+0x204>
 8001534:	4f76      	ldr	r7, [pc, #472]	; (8001710 <__aeabi_dadd+0x630>)
 8001536:	42bb      	cmp	r3, r7
 8001538:	d018      	beq.n	800156c <__aeabi_dadd+0x48c>
 800153a:	0033      	movs	r3, r6
 800153c:	e675      	b.n	800122a <__aeabi_dadd+0x14a>
 800153e:	2b00      	cmp	r3, #0
 8001540:	d014      	beq.n	800156c <__aeabi_dadd+0x48c>
 8001542:	074b      	lsls	r3, r1, #29
 8001544:	08c0      	lsrs	r0, r0, #3
 8001546:	4318      	orrs	r0, r3
 8001548:	2380      	movs	r3, #128	; 0x80
 800154a:	08c9      	lsrs	r1, r1, #3
 800154c:	031b      	lsls	r3, r3, #12
 800154e:	4219      	tst	r1, r3
 8001550:	d007      	beq.n	8001562 <__aeabi_dadd+0x482>
 8001552:	08fc      	lsrs	r4, r7, #3
 8001554:	421c      	tst	r4, r3
 8001556:	d104      	bne.n	8001562 <__aeabi_dadd+0x482>
 8001558:	0779      	lsls	r1, r7, #29
 800155a:	08d0      	lsrs	r0, r2, #3
 800155c:	4308      	orrs	r0, r1
 800155e:	46e1      	mov	r9, ip
 8001560:	0021      	movs	r1, r4
 8001562:	464c      	mov	r4, r9
 8001564:	0f42      	lsrs	r2, r0, #29
 8001566:	00c9      	lsls	r1, r1, #3
 8001568:	4311      	orrs	r1, r2
 800156a:	00c0      	lsls	r0, r0, #3
 800156c:	4d68      	ldr	r5, [pc, #416]	; (8001710 <__aeabi_dadd+0x630>)
 800156e:	e6b9      	b.n	80012e4 <__aeabi_dadd+0x204>
 8001570:	001d      	movs	r5, r3
 8001572:	2200      	movs	r2, #0
 8001574:	2300      	movs	r3, #0
 8001576:	e6c0      	b.n	80012fa <__aeabi_dadd+0x21a>
 8001578:	2d00      	cmp	r5, #0
 800157a:	d15b      	bne.n	8001634 <__aeabi_dadd+0x554>
 800157c:	000d      	movs	r5, r1
 800157e:	4305      	orrs	r5, r0
 8001580:	d100      	bne.n	8001584 <__aeabi_dadd+0x4a4>
 8001582:	e6e2      	b.n	800134a <__aeabi_dadd+0x26a>
 8001584:	1c5d      	adds	r5, r3, #1
 8001586:	d100      	bne.n	800158a <__aeabi_dadd+0x4aa>
 8001588:	e0b0      	b.n	80016ec <__aeabi_dadd+0x60c>
 800158a:	4d61      	ldr	r5, [pc, #388]	; (8001710 <__aeabi_dadd+0x630>)
 800158c:	42ae      	cmp	r6, r5
 800158e:	d01f      	beq.n	80015d0 <__aeabi_dadd+0x4f0>
 8001590:	43db      	mvns	r3, r3
 8001592:	2b38      	cmp	r3, #56	; 0x38
 8001594:	dc71      	bgt.n	800167a <__aeabi_dadd+0x59a>
 8001596:	2b1f      	cmp	r3, #31
 8001598:	dd00      	ble.n	800159c <__aeabi_dadd+0x4bc>
 800159a:	e096      	b.n	80016ca <__aeabi_dadd+0x5ea>
 800159c:	2520      	movs	r5, #32
 800159e:	000f      	movs	r7, r1
 80015a0:	1aed      	subs	r5, r5, r3
 80015a2:	40af      	lsls	r7, r5
 80015a4:	46b9      	mov	r9, r7
 80015a6:	0007      	movs	r7, r0
 80015a8:	46aa      	mov	sl, r5
 80015aa:	40df      	lsrs	r7, r3
 80015ac:	464d      	mov	r5, r9
 80015ae:	433d      	orrs	r5, r7
 80015b0:	002f      	movs	r7, r5
 80015b2:	4655      	mov	r5, sl
 80015b4:	40a8      	lsls	r0, r5
 80015b6:	40d9      	lsrs	r1, r3
 80015b8:	1e45      	subs	r5, r0, #1
 80015ba:	41a8      	sbcs	r0, r5
 80015bc:	4488      	add	r8, r1
 80015be:	4307      	orrs	r7, r0
 80015c0:	18bf      	adds	r7, r7, r2
 80015c2:	4297      	cmp	r7, r2
 80015c4:	4192      	sbcs	r2, r2
 80015c6:	4251      	negs	r1, r2
 80015c8:	4441      	add	r1, r8
 80015ca:	0035      	movs	r5, r6
 80015cc:	e63a      	b.n	8001244 <__aeabi_dadd+0x164>
 80015ce:	4664      	mov	r4, ip
 80015d0:	0035      	movs	r5, r6
 80015d2:	4641      	mov	r1, r8
 80015d4:	0010      	movs	r0, r2
 80015d6:	e685      	b.n	80012e4 <__aeabi_dadd+0x204>
 80015d8:	000b      	movs	r3, r1
 80015da:	4303      	orrs	r3, r0
 80015dc:	2d00      	cmp	r5, #0
 80015de:	d000      	beq.n	80015e2 <__aeabi_dadd+0x502>
 80015e0:	e663      	b.n	80012aa <__aeabi_dadd+0x1ca>
 80015e2:	2b00      	cmp	r3, #0
 80015e4:	d0f5      	beq.n	80015d2 <__aeabi_dadd+0x4f2>
 80015e6:	4643      	mov	r3, r8
 80015e8:	4313      	orrs	r3, r2
 80015ea:	d100      	bne.n	80015ee <__aeabi_dadd+0x50e>
 80015ec:	e67a      	b.n	80012e4 <__aeabi_dadd+0x204>
 80015ee:	1887      	adds	r7, r0, r2
 80015f0:	4287      	cmp	r7, r0
 80015f2:	4180      	sbcs	r0, r0
 80015f4:	2207      	movs	r2, #7
 80015f6:	4441      	add	r1, r8
 80015f8:	4240      	negs	r0, r0
 80015fa:	1809      	adds	r1, r1, r0
 80015fc:	403a      	ands	r2, r7
 80015fe:	020b      	lsls	r3, r1, #8
 8001600:	d400      	bmi.n	8001604 <__aeabi_dadd+0x524>
 8001602:	e6d5      	b.n	80013b0 <__aeabi_dadd+0x2d0>
 8001604:	4b43      	ldr	r3, [pc, #268]	; (8001714 <__aeabi_dadd+0x634>)
 8001606:	3501      	adds	r5, #1
 8001608:	4019      	ands	r1, r3
 800160a:	e5c9      	b.n	80011a0 <__aeabi_dadd+0xc0>
 800160c:	0038      	movs	r0, r7
 800160e:	e669      	b.n	80012e4 <__aeabi_dadd+0x204>
 8001610:	001e      	movs	r6, r3
 8001612:	4647      	mov	r7, r8
 8001614:	3e20      	subs	r6, #32
 8001616:	40f7      	lsrs	r7, r6
 8001618:	46bc      	mov	ip, r7
 800161a:	2b20      	cmp	r3, #32
 800161c:	d004      	beq.n	8001628 <__aeabi_dadd+0x548>
 800161e:	2640      	movs	r6, #64	; 0x40
 8001620:	1af3      	subs	r3, r6, r3
 8001622:	4646      	mov	r6, r8
 8001624:	409e      	lsls	r6, r3
 8001626:	4332      	orrs	r2, r6
 8001628:	0017      	movs	r7, r2
 800162a:	4663      	mov	r3, ip
 800162c:	1e7a      	subs	r2, r7, #1
 800162e:	4197      	sbcs	r7, r2
 8001630:	431f      	orrs	r7, r3
 8001632:	e602      	b.n	800123a <__aeabi_dadd+0x15a>
 8001634:	4d36      	ldr	r5, [pc, #216]	; (8001710 <__aeabi_dadd+0x630>)
 8001636:	42ae      	cmp	r6, r5
 8001638:	d0ca      	beq.n	80015d0 <__aeabi_dadd+0x4f0>
 800163a:	2580      	movs	r5, #128	; 0x80
 800163c:	042d      	lsls	r5, r5, #16
 800163e:	425b      	negs	r3, r3
 8001640:	4329      	orrs	r1, r5
 8001642:	e7a6      	b.n	8001592 <__aeabi_dadd+0x4b2>
 8001644:	4308      	orrs	r0, r1
 8001646:	1e41      	subs	r1, r0, #1
 8001648:	4188      	sbcs	r0, r1
 800164a:	e6a6      	b.n	800139a <__aeabi_dadd+0x2ba>
 800164c:	2b00      	cmp	r3, #0
 800164e:	d100      	bne.n	8001652 <__aeabi_dadd+0x572>
 8001650:	e648      	b.n	80012e4 <__aeabi_dadd+0x204>
 8001652:	1a87      	subs	r7, r0, r2
 8001654:	4643      	mov	r3, r8
 8001656:	42b8      	cmp	r0, r7
 8001658:	41b6      	sbcs	r6, r6
 800165a:	1acb      	subs	r3, r1, r3
 800165c:	4276      	negs	r6, r6
 800165e:	1b9e      	subs	r6, r3, r6
 8001660:	0233      	lsls	r3, r6, #8
 8001662:	d54b      	bpl.n	80016fc <__aeabi_dadd+0x61c>
 8001664:	1a17      	subs	r7, r2, r0
 8001666:	4643      	mov	r3, r8
 8001668:	42ba      	cmp	r2, r7
 800166a:	4192      	sbcs	r2, r2
 800166c:	1a59      	subs	r1, r3, r1
 800166e:	4252      	negs	r2, r2
 8001670:	1a89      	subs	r1, r1, r2
 8001672:	2207      	movs	r2, #7
 8001674:	4664      	mov	r4, ip
 8001676:	403a      	ands	r2, r7
 8001678:	e592      	b.n	80011a0 <__aeabi_dadd+0xc0>
 800167a:	4301      	orrs	r1, r0
 800167c:	000f      	movs	r7, r1
 800167e:	1e79      	subs	r1, r7, #1
 8001680:	418f      	sbcs	r7, r1
 8001682:	e79d      	b.n	80015c0 <__aeabi_dadd+0x4e0>
 8001684:	001c      	movs	r4, r3
 8001686:	000f      	movs	r7, r1
 8001688:	3c20      	subs	r4, #32
 800168a:	40e7      	lsrs	r7, r4
 800168c:	2b20      	cmp	r3, #32
 800168e:	d003      	beq.n	8001698 <__aeabi_dadd+0x5b8>
 8001690:	2440      	movs	r4, #64	; 0x40
 8001692:	1ae3      	subs	r3, r4, r3
 8001694:	4099      	lsls	r1, r3
 8001696:	4308      	orrs	r0, r1
 8001698:	1e41      	subs	r1, r0, #1
 800169a:	4188      	sbcs	r0, r1
 800169c:	4338      	orrs	r0, r7
 800169e:	e67c      	b.n	800139a <__aeabi_dadd+0x2ba>
 80016a0:	2200      	movs	r2, #0
 80016a2:	2400      	movs	r4, #0
 80016a4:	e625      	b.n	80012f2 <__aeabi_dadd+0x212>
 80016a6:	1a17      	subs	r7, r2, r0
 80016a8:	4643      	mov	r3, r8
 80016aa:	42ba      	cmp	r2, r7
 80016ac:	4192      	sbcs	r2, r2
 80016ae:	1a59      	subs	r1, r3, r1
 80016b0:	4252      	negs	r2, r2
 80016b2:	1a89      	subs	r1, r1, r2
 80016b4:	4664      	mov	r4, ip
 80016b6:	0035      	movs	r5, r6
 80016b8:	e543      	b.n	8001142 <__aeabi_dadd+0x62>
 80016ba:	4641      	mov	r1, r8
 80016bc:	0010      	movs	r0, r2
 80016be:	4d14      	ldr	r5, [pc, #80]	; (8001710 <__aeabi_dadd+0x630>)
 80016c0:	e610      	b.n	80012e4 <__aeabi_dadd+0x204>
 80016c2:	2280      	movs	r2, #128	; 0x80
 80016c4:	2400      	movs	r4, #0
 80016c6:	0312      	lsls	r2, r2, #12
 80016c8:	e680      	b.n	80013cc <__aeabi_dadd+0x2ec>
 80016ca:	001d      	movs	r5, r3
 80016cc:	000f      	movs	r7, r1
 80016ce:	3d20      	subs	r5, #32
 80016d0:	40ef      	lsrs	r7, r5
 80016d2:	46bc      	mov	ip, r7
 80016d4:	2b20      	cmp	r3, #32
 80016d6:	d003      	beq.n	80016e0 <__aeabi_dadd+0x600>
 80016d8:	2540      	movs	r5, #64	; 0x40
 80016da:	1aeb      	subs	r3, r5, r3
 80016dc:	4099      	lsls	r1, r3
 80016de:	4308      	orrs	r0, r1
 80016e0:	0007      	movs	r7, r0
 80016e2:	4663      	mov	r3, ip
 80016e4:	1e78      	subs	r0, r7, #1
 80016e6:	4187      	sbcs	r7, r0
 80016e8:	431f      	orrs	r7, r3
 80016ea:	e769      	b.n	80015c0 <__aeabi_dadd+0x4e0>
 80016ec:	1887      	adds	r7, r0, r2
 80016ee:	4297      	cmp	r7, r2
 80016f0:	419b      	sbcs	r3, r3
 80016f2:	4441      	add	r1, r8
 80016f4:	425b      	negs	r3, r3
 80016f6:	18c9      	adds	r1, r1, r3
 80016f8:	0035      	movs	r5, r6
 80016fa:	e5a3      	b.n	8001244 <__aeabi_dadd+0x164>
 80016fc:	003b      	movs	r3, r7
 80016fe:	4333      	orrs	r3, r6
 8001700:	d0ce      	beq.n	80016a0 <__aeabi_dadd+0x5c0>
 8001702:	2207      	movs	r2, #7
 8001704:	0031      	movs	r1, r6
 8001706:	403a      	ands	r2, r7
 8001708:	e652      	b.n	80013b0 <__aeabi_dadd+0x2d0>
 800170a:	2300      	movs	r3, #0
 800170c:	001a      	movs	r2, r3
 800170e:	e5f4      	b.n	80012fa <__aeabi_dadd+0x21a>
 8001710:	000007ff 	.word	0x000007ff
 8001714:	ff7fffff 	.word	0xff7fffff

08001718 <__aeabi_ddiv>:
 8001718:	b5f0      	push	{r4, r5, r6, r7, lr}
 800171a:	4657      	mov	r7, sl
 800171c:	46de      	mov	lr, fp
 800171e:	464e      	mov	r6, r9
 8001720:	4645      	mov	r5, r8
 8001722:	b5e0      	push	{r5, r6, r7, lr}
 8001724:	4683      	mov	fp, r0
 8001726:	0007      	movs	r7, r0
 8001728:	030e      	lsls	r6, r1, #12
 800172a:	0048      	lsls	r0, r1, #1
 800172c:	b085      	sub	sp, #20
 800172e:	4692      	mov	sl, r2
 8001730:	001c      	movs	r4, r3
 8001732:	0b36      	lsrs	r6, r6, #12
 8001734:	0d40      	lsrs	r0, r0, #21
 8001736:	0fcd      	lsrs	r5, r1, #31
 8001738:	2800      	cmp	r0, #0
 800173a:	d100      	bne.n	800173e <__aeabi_ddiv+0x26>
 800173c:	e09d      	b.n	800187a <__aeabi_ddiv+0x162>
 800173e:	4b95      	ldr	r3, [pc, #596]	; (8001994 <__aeabi_ddiv+0x27c>)
 8001740:	4298      	cmp	r0, r3
 8001742:	d039      	beq.n	80017b8 <__aeabi_ddiv+0xa0>
 8001744:	2380      	movs	r3, #128	; 0x80
 8001746:	00f6      	lsls	r6, r6, #3
 8001748:	041b      	lsls	r3, r3, #16
 800174a:	431e      	orrs	r6, r3
 800174c:	4a92      	ldr	r2, [pc, #584]	; (8001998 <__aeabi_ddiv+0x280>)
 800174e:	0f7b      	lsrs	r3, r7, #29
 8001750:	4333      	orrs	r3, r6
 8001752:	4699      	mov	r9, r3
 8001754:	4694      	mov	ip, r2
 8001756:	0003      	movs	r3, r0
 8001758:	4463      	add	r3, ip
 800175a:	9300      	str	r3, [sp, #0]
 800175c:	2300      	movs	r3, #0
 800175e:	2600      	movs	r6, #0
 8001760:	00ff      	lsls	r7, r7, #3
 8001762:	9302      	str	r3, [sp, #8]
 8001764:	0323      	lsls	r3, r4, #12
 8001766:	0b1b      	lsrs	r3, r3, #12
 8001768:	4698      	mov	r8, r3
 800176a:	0063      	lsls	r3, r4, #1
 800176c:	0fe4      	lsrs	r4, r4, #31
 800176e:	4652      	mov	r2, sl
 8001770:	0d5b      	lsrs	r3, r3, #21
 8001772:	9401      	str	r4, [sp, #4]
 8001774:	d100      	bne.n	8001778 <__aeabi_ddiv+0x60>
 8001776:	e0b3      	b.n	80018e0 <__aeabi_ddiv+0x1c8>
 8001778:	4986      	ldr	r1, [pc, #536]	; (8001994 <__aeabi_ddiv+0x27c>)
 800177a:	428b      	cmp	r3, r1
 800177c:	d100      	bne.n	8001780 <__aeabi_ddiv+0x68>
 800177e:	e09e      	b.n	80018be <__aeabi_ddiv+0x1a6>
 8001780:	4642      	mov	r2, r8
 8001782:	00d1      	lsls	r1, r2, #3
 8001784:	2280      	movs	r2, #128	; 0x80
 8001786:	0412      	lsls	r2, r2, #16
 8001788:	430a      	orrs	r2, r1
 800178a:	4651      	mov	r1, sl
 800178c:	0f49      	lsrs	r1, r1, #29
 800178e:	4311      	orrs	r1, r2
 8001790:	468b      	mov	fp, r1
 8001792:	4981      	ldr	r1, [pc, #516]	; (8001998 <__aeabi_ddiv+0x280>)
 8001794:	4652      	mov	r2, sl
 8001796:	468c      	mov	ip, r1
 8001798:	9900      	ldr	r1, [sp, #0]
 800179a:	4463      	add	r3, ip
 800179c:	1acb      	subs	r3, r1, r3
 800179e:	2100      	movs	r1, #0
 80017a0:	00d2      	lsls	r2, r2, #3
 80017a2:	9300      	str	r3, [sp, #0]
 80017a4:	002b      	movs	r3, r5
 80017a6:	4063      	eors	r3, r4
 80017a8:	469a      	mov	sl, r3
 80017aa:	2e0f      	cmp	r6, #15
 80017ac:	d900      	bls.n	80017b0 <__aeabi_ddiv+0x98>
 80017ae:	e105      	b.n	80019bc <__aeabi_ddiv+0x2a4>
 80017b0:	4b7a      	ldr	r3, [pc, #488]	; (800199c <__aeabi_ddiv+0x284>)
 80017b2:	00b6      	lsls	r6, r6, #2
 80017b4:	599b      	ldr	r3, [r3, r6]
 80017b6:	469f      	mov	pc, r3
 80017b8:	465b      	mov	r3, fp
 80017ba:	4333      	orrs	r3, r6
 80017bc:	4699      	mov	r9, r3
 80017be:	d000      	beq.n	80017c2 <__aeabi_ddiv+0xaa>
 80017c0:	e0b8      	b.n	8001934 <__aeabi_ddiv+0x21c>
 80017c2:	2302      	movs	r3, #2
 80017c4:	2608      	movs	r6, #8
 80017c6:	2700      	movs	r7, #0
 80017c8:	9000      	str	r0, [sp, #0]
 80017ca:	9302      	str	r3, [sp, #8]
 80017cc:	e7ca      	b.n	8001764 <__aeabi_ddiv+0x4c>
 80017ce:	46cb      	mov	fp, r9
 80017d0:	003a      	movs	r2, r7
 80017d2:	9902      	ldr	r1, [sp, #8]
 80017d4:	9501      	str	r5, [sp, #4]
 80017d6:	9b01      	ldr	r3, [sp, #4]
 80017d8:	469a      	mov	sl, r3
 80017da:	2902      	cmp	r1, #2
 80017dc:	d027      	beq.n	800182e <__aeabi_ddiv+0x116>
 80017de:	2903      	cmp	r1, #3
 80017e0:	d100      	bne.n	80017e4 <__aeabi_ddiv+0xcc>
 80017e2:	e280      	b.n	8001ce6 <__aeabi_ddiv+0x5ce>
 80017e4:	2901      	cmp	r1, #1
 80017e6:	d044      	beq.n	8001872 <__aeabi_ddiv+0x15a>
 80017e8:	496d      	ldr	r1, [pc, #436]	; (80019a0 <__aeabi_ddiv+0x288>)
 80017ea:	9b00      	ldr	r3, [sp, #0]
 80017ec:	468c      	mov	ip, r1
 80017ee:	4463      	add	r3, ip
 80017f0:	001c      	movs	r4, r3
 80017f2:	2c00      	cmp	r4, #0
 80017f4:	dd38      	ble.n	8001868 <__aeabi_ddiv+0x150>
 80017f6:	0753      	lsls	r3, r2, #29
 80017f8:	d000      	beq.n	80017fc <__aeabi_ddiv+0xe4>
 80017fa:	e213      	b.n	8001c24 <__aeabi_ddiv+0x50c>
 80017fc:	08d2      	lsrs	r2, r2, #3
 80017fe:	465b      	mov	r3, fp
 8001800:	01db      	lsls	r3, r3, #7
 8001802:	d509      	bpl.n	8001818 <__aeabi_ddiv+0x100>
 8001804:	4659      	mov	r1, fp
 8001806:	4b67      	ldr	r3, [pc, #412]	; (80019a4 <__aeabi_ddiv+0x28c>)
 8001808:	4019      	ands	r1, r3
 800180a:	468b      	mov	fp, r1
 800180c:	2180      	movs	r1, #128	; 0x80
 800180e:	00c9      	lsls	r1, r1, #3
 8001810:	468c      	mov	ip, r1
 8001812:	9b00      	ldr	r3, [sp, #0]
 8001814:	4463      	add	r3, ip
 8001816:	001c      	movs	r4, r3
 8001818:	4b63      	ldr	r3, [pc, #396]	; (80019a8 <__aeabi_ddiv+0x290>)
 800181a:	429c      	cmp	r4, r3
 800181c:	dc07      	bgt.n	800182e <__aeabi_ddiv+0x116>
 800181e:	465b      	mov	r3, fp
 8001820:	0564      	lsls	r4, r4, #21
 8001822:	075f      	lsls	r7, r3, #29
 8001824:	025b      	lsls	r3, r3, #9
 8001826:	4317      	orrs	r7, r2
 8001828:	0b1b      	lsrs	r3, r3, #12
 800182a:	0d62      	lsrs	r2, r4, #21
 800182c:	e002      	b.n	8001834 <__aeabi_ddiv+0x11c>
 800182e:	2300      	movs	r3, #0
 8001830:	2700      	movs	r7, #0
 8001832:	4a58      	ldr	r2, [pc, #352]	; (8001994 <__aeabi_ddiv+0x27c>)
 8001834:	2100      	movs	r1, #0
 8001836:	031b      	lsls	r3, r3, #12
 8001838:	0b1c      	lsrs	r4, r3, #12
 800183a:	0d0b      	lsrs	r3, r1, #20
 800183c:	051b      	lsls	r3, r3, #20
 800183e:	4323      	orrs	r3, r4
 8001840:	0514      	lsls	r4, r2, #20
 8001842:	4a5a      	ldr	r2, [pc, #360]	; (80019ac <__aeabi_ddiv+0x294>)
 8001844:	0038      	movs	r0, r7
 8001846:	4013      	ands	r3, r2
 8001848:	431c      	orrs	r4, r3
 800184a:	4653      	mov	r3, sl
 800184c:	0064      	lsls	r4, r4, #1
 800184e:	07db      	lsls	r3, r3, #31
 8001850:	0864      	lsrs	r4, r4, #1
 8001852:	431c      	orrs	r4, r3
 8001854:	0021      	movs	r1, r4
 8001856:	b005      	add	sp, #20
 8001858:	bc3c      	pop	{r2, r3, r4, r5}
 800185a:	4690      	mov	r8, r2
 800185c:	4699      	mov	r9, r3
 800185e:	46a2      	mov	sl, r4
 8001860:	46ab      	mov	fp, r5
 8001862:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001864:	2201      	movs	r2, #1
 8001866:	4252      	negs	r2, r2
 8001868:	2301      	movs	r3, #1
 800186a:	1b1b      	subs	r3, r3, r4
 800186c:	2b38      	cmp	r3, #56	; 0x38
 800186e:	dc00      	bgt.n	8001872 <__aeabi_ddiv+0x15a>
 8001870:	e1ad      	b.n	8001bce <__aeabi_ddiv+0x4b6>
 8001872:	2200      	movs	r2, #0
 8001874:	2300      	movs	r3, #0
 8001876:	2700      	movs	r7, #0
 8001878:	e7dc      	b.n	8001834 <__aeabi_ddiv+0x11c>
 800187a:	465b      	mov	r3, fp
 800187c:	4333      	orrs	r3, r6
 800187e:	4699      	mov	r9, r3
 8001880:	d05e      	beq.n	8001940 <__aeabi_ddiv+0x228>
 8001882:	2e00      	cmp	r6, #0
 8001884:	d100      	bne.n	8001888 <__aeabi_ddiv+0x170>
 8001886:	e18a      	b.n	8001b9e <__aeabi_ddiv+0x486>
 8001888:	0030      	movs	r0, r6
 800188a:	f001 fa4f 	bl	8002d2c <__clzsi2>
 800188e:	0003      	movs	r3, r0
 8001890:	3b0b      	subs	r3, #11
 8001892:	2b1c      	cmp	r3, #28
 8001894:	dd00      	ble.n	8001898 <__aeabi_ddiv+0x180>
 8001896:	e17b      	b.n	8001b90 <__aeabi_ddiv+0x478>
 8001898:	221d      	movs	r2, #29
 800189a:	1ad3      	subs	r3, r2, r3
 800189c:	465a      	mov	r2, fp
 800189e:	0001      	movs	r1, r0
 80018a0:	40da      	lsrs	r2, r3
 80018a2:	3908      	subs	r1, #8
 80018a4:	408e      	lsls	r6, r1
 80018a6:	0013      	movs	r3, r2
 80018a8:	465f      	mov	r7, fp
 80018aa:	4333      	orrs	r3, r6
 80018ac:	4699      	mov	r9, r3
 80018ae:	408f      	lsls	r7, r1
 80018b0:	4b3f      	ldr	r3, [pc, #252]	; (80019b0 <__aeabi_ddiv+0x298>)
 80018b2:	2600      	movs	r6, #0
 80018b4:	1a1b      	subs	r3, r3, r0
 80018b6:	9300      	str	r3, [sp, #0]
 80018b8:	2300      	movs	r3, #0
 80018ba:	9302      	str	r3, [sp, #8]
 80018bc:	e752      	b.n	8001764 <__aeabi_ddiv+0x4c>
 80018be:	4641      	mov	r1, r8
 80018c0:	4653      	mov	r3, sl
 80018c2:	430b      	orrs	r3, r1
 80018c4:	493b      	ldr	r1, [pc, #236]	; (80019b4 <__aeabi_ddiv+0x29c>)
 80018c6:	469b      	mov	fp, r3
 80018c8:	468c      	mov	ip, r1
 80018ca:	9b00      	ldr	r3, [sp, #0]
 80018cc:	4463      	add	r3, ip
 80018ce:	9300      	str	r3, [sp, #0]
 80018d0:	465b      	mov	r3, fp
 80018d2:	2b00      	cmp	r3, #0
 80018d4:	d13b      	bne.n	800194e <__aeabi_ddiv+0x236>
 80018d6:	2302      	movs	r3, #2
 80018d8:	2200      	movs	r2, #0
 80018da:	431e      	orrs	r6, r3
 80018dc:	2102      	movs	r1, #2
 80018de:	e761      	b.n	80017a4 <__aeabi_ddiv+0x8c>
 80018e0:	4643      	mov	r3, r8
 80018e2:	4313      	orrs	r3, r2
 80018e4:	469b      	mov	fp, r3
 80018e6:	d037      	beq.n	8001958 <__aeabi_ddiv+0x240>
 80018e8:	4643      	mov	r3, r8
 80018ea:	2b00      	cmp	r3, #0
 80018ec:	d100      	bne.n	80018f0 <__aeabi_ddiv+0x1d8>
 80018ee:	e162      	b.n	8001bb6 <__aeabi_ddiv+0x49e>
 80018f0:	4640      	mov	r0, r8
 80018f2:	f001 fa1b 	bl	8002d2c <__clzsi2>
 80018f6:	0003      	movs	r3, r0
 80018f8:	3b0b      	subs	r3, #11
 80018fa:	2b1c      	cmp	r3, #28
 80018fc:	dd00      	ble.n	8001900 <__aeabi_ddiv+0x1e8>
 80018fe:	e153      	b.n	8001ba8 <__aeabi_ddiv+0x490>
 8001900:	0002      	movs	r2, r0
 8001902:	4641      	mov	r1, r8
 8001904:	3a08      	subs	r2, #8
 8001906:	4091      	lsls	r1, r2
 8001908:	4688      	mov	r8, r1
 800190a:	211d      	movs	r1, #29
 800190c:	1acb      	subs	r3, r1, r3
 800190e:	4651      	mov	r1, sl
 8001910:	40d9      	lsrs	r1, r3
 8001912:	000b      	movs	r3, r1
 8001914:	4641      	mov	r1, r8
 8001916:	430b      	orrs	r3, r1
 8001918:	469b      	mov	fp, r3
 800191a:	4653      	mov	r3, sl
 800191c:	4093      	lsls	r3, r2
 800191e:	001a      	movs	r2, r3
 8001920:	9b00      	ldr	r3, [sp, #0]
 8001922:	4925      	ldr	r1, [pc, #148]	; (80019b8 <__aeabi_ddiv+0x2a0>)
 8001924:	469c      	mov	ip, r3
 8001926:	4460      	add	r0, ip
 8001928:	0003      	movs	r3, r0
 800192a:	468c      	mov	ip, r1
 800192c:	4463      	add	r3, ip
 800192e:	9300      	str	r3, [sp, #0]
 8001930:	2100      	movs	r1, #0
 8001932:	e737      	b.n	80017a4 <__aeabi_ddiv+0x8c>
 8001934:	2303      	movs	r3, #3
 8001936:	46b1      	mov	r9, r6
 8001938:	9000      	str	r0, [sp, #0]
 800193a:	260c      	movs	r6, #12
 800193c:	9302      	str	r3, [sp, #8]
 800193e:	e711      	b.n	8001764 <__aeabi_ddiv+0x4c>
 8001940:	2300      	movs	r3, #0
 8001942:	9300      	str	r3, [sp, #0]
 8001944:	3301      	adds	r3, #1
 8001946:	2604      	movs	r6, #4
 8001948:	2700      	movs	r7, #0
 800194a:	9302      	str	r3, [sp, #8]
 800194c:	e70a      	b.n	8001764 <__aeabi_ddiv+0x4c>
 800194e:	2303      	movs	r3, #3
 8001950:	46c3      	mov	fp, r8
 8001952:	431e      	orrs	r6, r3
 8001954:	2103      	movs	r1, #3
 8001956:	e725      	b.n	80017a4 <__aeabi_ddiv+0x8c>
 8001958:	3301      	adds	r3, #1
 800195a:	431e      	orrs	r6, r3
 800195c:	2200      	movs	r2, #0
 800195e:	2101      	movs	r1, #1
 8001960:	e720      	b.n	80017a4 <__aeabi_ddiv+0x8c>
 8001962:	2300      	movs	r3, #0
 8001964:	469a      	mov	sl, r3
 8001966:	2380      	movs	r3, #128	; 0x80
 8001968:	2700      	movs	r7, #0
 800196a:	031b      	lsls	r3, r3, #12
 800196c:	4a09      	ldr	r2, [pc, #36]	; (8001994 <__aeabi_ddiv+0x27c>)
 800196e:	e761      	b.n	8001834 <__aeabi_ddiv+0x11c>
 8001970:	2380      	movs	r3, #128	; 0x80
 8001972:	4649      	mov	r1, r9
 8001974:	031b      	lsls	r3, r3, #12
 8001976:	4219      	tst	r1, r3
 8001978:	d100      	bne.n	800197c <__aeabi_ddiv+0x264>
 800197a:	e0e2      	b.n	8001b42 <__aeabi_ddiv+0x42a>
 800197c:	4659      	mov	r1, fp
 800197e:	4219      	tst	r1, r3
 8001980:	d000      	beq.n	8001984 <__aeabi_ddiv+0x26c>
 8001982:	e0de      	b.n	8001b42 <__aeabi_ddiv+0x42a>
 8001984:	430b      	orrs	r3, r1
 8001986:	031b      	lsls	r3, r3, #12
 8001988:	0017      	movs	r7, r2
 800198a:	0b1b      	lsrs	r3, r3, #12
 800198c:	46a2      	mov	sl, r4
 800198e:	4a01      	ldr	r2, [pc, #4]	; (8001994 <__aeabi_ddiv+0x27c>)
 8001990:	e750      	b.n	8001834 <__aeabi_ddiv+0x11c>
 8001992:	46c0      	nop			; (mov r8, r8)
 8001994:	000007ff 	.word	0x000007ff
 8001998:	fffffc01 	.word	0xfffffc01
 800199c:	080094f4 	.word	0x080094f4
 80019a0:	000003ff 	.word	0x000003ff
 80019a4:	feffffff 	.word	0xfeffffff
 80019a8:	000007fe 	.word	0x000007fe
 80019ac:	800fffff 	.word	0x800fffff
 80019b0:	fffffc0d 	.word	0xfffffc0d
 80019b4:	fffff801 	.word	0xfffff801
 80019b8:	000003f3 	.word	0x000003f3
 80019bc:	45d9      	cmp	r9, fp
 80019be:	d900      	bls.n	80019c2 <__aeabi_ddiv+0x2aa>
 80019c0:	e0cb      	b.n	8001b5a <__aeabi_ddiv+0x442>
 80019c2:	d100      	bne.n	80019c6 <__aeabi_ddiv+0x2ae>
 80019c4:	e0c6      	b.n	8001b54 <__aeabi_ddiv+0x43c>
 80019c6:	003c      	movs	r4, r7
 80019c8:	4648      	mov	r0, r9
 80019ca:	2700      	movs	r7, #0
 80019cc:	9b00      	ldr	r3, [sp, #0]
 80019ce:	3b01      	subs	r3, #1
 80019d0:	9300      	str	r3, [sp, #0]
 80019d2:	465b      	mov	r3, fp
 80019d4:	0e16      	lsrs	r6, r2, #24
 80019d6:	021b      	lsls	r3, r3, #8
 80019d8:	431e      	orrs	r6, r3
 80019da:	0213      	lsls	r3, r2, #8
 80019dc:	4698      	mov	r8, r3
 80019de:	0433      	lsls	r3, r6, #16
 80019e0:	0c1b      	lsrs	r3, r3, #16
 80019e2:	4699      	mov	r9, r3
 80019e4:	0c31      	lsrs	r1, r6, #16
 80019e6:	9101      	str	r1, [sp, #4]
 80019e8:	f7fe fc14 	bl	8000214 <__aeabi_uidivmod>
 80019ec:	464a      	mov	r2, r9
 80019ee:	4342      	muls	r2, r0
 80019f0:	040b      	lsls	r3, r1, #16
 80019f2:	0c21      	lsrs	r1, r4, #16
 80019f4:	0005      	movs	r5, r0
 80019f6:	4319      	orrs	r1, r3
 80019f8:	428a      	cmp	r2, r1
 80019fa:	d907      	bls.n	8001a0c <__aeabi_ddiv+0x2f4>
 80019fc:	1989      	adds	r1, r1, r6
 80019fe:	3d01      	subs	r5, #1
 8001a00:	428e      	cmp	r6, r1
 8001a02:	d803      	bhi.n	8001a0c <__aeabi_ddiv+0x2f4>
 8001a04:	428a      	cmp	r2, r1
 8001a06:	d901      	bls.n	8001a0c <__aeabi_ddiv+0x2f4>
 8001a08:	1e85      	subs	r5, r0, #2
 8001a0a:	1989      	adds	r1, r1, r6
 8001a0c:	1a88      	subs	r0, r1, r2
 8001a0e:	9901      	ldr	r1, [sp, #4]
 8001a10:	f7fe fc00 	bl	8000214 <__aeabi_uidivmod>
 8001a14:	0409      	lsls	r1, r1, #16
 8001a16:	468c      	mov	ip, r1
 8001a18:	464a      	mov	r2, r9
 8001a1a:	0421      	lsls	r1, r4, #16
 8001a1c:	4664      	mov	r4, ip
 8001a1e:	4342      	muls	r2, r0
 8001a20:	0c09      	lsrs	r1, r1, #16
 8001a22:	0003      	movs	r3, r0
 8001a24:	4321      	orrs	r1, r4
 8001a26:	428a      	cmp	r2, r1
 8001a28:	d904      	bls.n	8001a34 <__aeabi_ddiv+0x31c>
 8001a2a:	1989      	adds	r1, r1, r6
 8001a2c:	3b01      	subs	r3, #1
 8001a2e:	428e      	cmp	r6, r1
 8001a30:	d800      	bhi.n	8001a34 <__aeabi_ddiv+0x31c>
 8001a32:	e0f1      	b.n	8001c18 <__aeabi_ddiv+0x500>
 8001a34:	042d      	lsls	r5, r5, #16
 8001a36:	431d      	orrs	r5, r3
 8001a38:	46ab      	mov	fp, r5
 8001a3a:	4643      	mov	r3, r8
 8001a3c:	1a89      	subs	r1, r1, r2
 8001a3e:	4642      	mov	r2, r8
 8001a40:	0c28      	lsrs	r0, r5, #16
 8001a42:	0412      	lsls	r2, r2, #16
 8001a44:	0c1d      	lsrs	r5, r3, #16
 8001a46:	465b      	mov	r3, fp
 8001a48:	0c14      	lsrs	r4, r2, #16
 8001a4a:	0022      	movs	r2, r4
 8001a4c:	041b      	lsls	r3, r3, #16
 8001a4e:	0c1b      	lsrs	r3, r3, #16
 8001a50:	435a      	muls	r2, r3
 8001a52:	9403      	str	r4, [sp, #12]
 8001a54:	436b      	muls	r3, r5
 8001a56:	4344      	muls	r4, r0
 8001a58:	9502      	str	r5, [sp, #8]
 8001a5a:	4368      	muls	r0, r5
 8001a5c:	191b      	adds	r3, r3, r4
 8001a5e:	0c15      	lsrs	r5, r2, #16
 8001a60:	18eb      	adds	r3, r5, r3
 8001a62:	429c      	cmp	r4, r3
 8001a64:	d903      	bls.n	8001a6e <__aeabi_ddiv+0x356>
 8001a66:	2480      	movs	r4, #128	; 0x80
 8001a68:	0264      	lsls	r4, r4, #9
 8001a6a:	46a4      	mov	ip, r4
 8001a6c:	4460      	add	r0, ip
 8001a6e:	0c1c      	lsrs	r4, r3, #16
 8001a70:	0415      	lsls	r5, r2, #16
 8001a72:	041b      	lsls	r3, r3, #16
 8001a74:	0c2d      	lsrs	r5, r5, #16
 8001a76:	1820      	adds	r0, r4, r0
 8001a78:	195d      	adds	r5, r3, r5
 8001a7a:	4281      	cmp	r1, r0
 8001a7c:	d377      	bcc.n	8001b6e <__aeabi_ddiv+0x456>
 8001a7e:	d073      	beq.n	8001b68 <__aeabi_ddiv+0x450>
 8001a80:	1a0c      	subs	r4, r1, r0
 8001a82:	4aa2      	ldr	r2, [pc, #648]	; (8001d0c <__aeabi_ddiv+0x5f4>)
 8001a84:	1b7d      	subs	r5, r7, r5
 8001a86:	42af      	cmp	r7, r5
 8001a88:	41bf      	sbcs	r7, r7
 8001a8a:	4694      	mov	ip, r2
 8001a8c:	9b00      	ldr	r3, [sp, #0]
 8001a8e:	427f      	negs	r7, r7
 8001a90:	4463      	add	r3, ip
 8001a92:	1be0      	subs	r0, r4, r7
 8001a94:	001c      	movs	r4, r3
 8001a96:	4286      	cmp	r6, r0
 8001a98:	d100      	bne.n	8001a9c <__aeabi_ddiv+0x384>
 8001a9a:	e0db      	b.n	8001c54 <__aeabi_ddiv+0x53c>
 8001a9c:	9901      	ldr	r1, [sp, #4]
 8001a9e:	f7fe fbb9 	bl	8000214 <__aeabi_uidivmod>
 8001aa2:	464a      	mov	r2, r9
 8001aa4:	4342      	muls	r2, r0
 8001aa6:	040b      	lsls	r3, r1, #16
 8001aa8:	0c29      	lsrs	r1, r5, #16
 8001aaa:	0007      	movs	r7, r0
 8001aac:	4319      	orrs	r1, r3
 8001aae:	428a      	cmp	r2, r1
 8001ab0:	d907      	bls.n	8001ac2 <__aeabi_ddiv+0x3aa>
 8001ab2:	1989      	adds	r1, r1, r6
 8001ab4:	3f01      	subs	r7, #1
 8001ab6:	428e      	cmp	r6, r1
 8001ab8:	d803      	bhi.n	8001ac2 <__aeabi_ddiv+0x3aa>
 8001aba:	428a      	cmp	r2, r1
 8001abc:	d901      	bls.n	8001ac2 <__aeabi_ddiv+0x3aa>
 8001abe:	1e87      	subs	r7, r0, #2
 8001ac0:	1989      	adds	r1, r1, r6
 8001ac2:	1a88      	subs	r0, r1, r2
 8001ac4:	9901      	ldr	r1, [sp, #4]
 8001ac6:	f7fe fba5 	bl	8000214 <__aeabi_uidivmod>
 8001aca:	0409      	lsls	r1, r1, #16
 8001acc:	464a      	mov	r2, r9
 8001ace:	4689      	mov	r9, r1
 8001ad0:	0429      	lsls	r1, r5, #16
 8001ad2:	464d      	mov	r5, r9
 8001ad4:	4342      	muls	r2, r0
 8001ad6:	0c09      	lsrs	r1, r1, #16
 8001ad8:	0003      	movs	r3, r0
 8001ada:	4329      	orrs	r1, r5
 8001adc:	428a      	cmp	r2, r1
 8001ade:	d907      	bls.n	8001af0 <__aeabi_ddiv+0x3d8>
 8001ae0:	1989      	adds	r1, r1, r6
 8001ae2:	3b01      	subs	r3, #1
 8001ae4:	428e      	cmp	r6, r1
 8001ae6:	d803      	bhi.n	8001af0 <__aeabi_ddiv+0x3d8>
 8001ae8:	428a      	cmp	r2, r1
 8001aea:	d901      	bls.n	8001af0 <__aeabi_ddiv+0x3d8>
 8001aec:	1e83      	subs	r3, r0, #2
 8001aee:	1989      	adds	r1, r1, r6
 8001af0:	043f      	lsls	r7, r7, #16
 8001af2:	1a89      	subs	r1, r1, r2
 8001af4:	003a      	movs	r2, r7
 8001af6:	9f03      	ldr	r7, [sp, #12]
 8001af8:	431a      	orrs	r2, r3
 8001afa:	0038      	movs	r0, r7
 8001afc:	0413      	lsls	r3, r2, #16
 8001afe:	0c1b      	lsrs	r3, r3, #16
 8001b00:	4358      	muls	r0, r3
 8001b02:	4681      	mov	r9, r0
 8001b04:	9802      	ldr	r0, [sp, #8]
 8001b06:	0c15      	lsrs	r5, r2, #16
 8001b08:	436f      	muls	r7, r5
 8001b0a:	4343      	muls	r3, r0
 8001b0c:	4345      	muls	r5, r0
 8001b0e:	4648      	mov	r0, r9
 8001b10:	0c00      	lsrs	r0, r0, #16
 8001b12:	4684      	mov	ip, r0
 8001b14:	19db      	adds	r3, r3, r7
 8001b16:	4463      	add	r3, ip
 8001b18:	429f      	cmp	r7, r3
 8001b1a:	d903      	bls.n	8001b24 <__aeabi_ddiv+0x40c>
 8001b1c:	2080      	movs	r0, #128	; 0x80
 8001b1e:	0240      	lsls	r0, r0, #9
 8001b20:	4684      	mov	ip, r0
 8001b22:	4465      	add	r5, ip
 8001b24:	4648      	mov	r0, r9
 8001b26:	0c1f      	lsrs	r7, r3, #16
 8001b28:	0400      	lsls	r0, r0, #16
 8001b2a:	041b      	lsls	r3, r3, #16
 8001b2c:	0c00      	lsrs	r0, r0, #16
 8001b2e:	197d      	adds	r5, r7, r5
 8001b30:	1818      	adds	r0, r3, r0
 8001b32:	42a9      	cmp	r1, r5
 8001b34:	d200      	bcs.n	8001b38 <__aeabi_ddiv+0x420>
 8001b36:	e084      	b.n	8001c42 <__aeabi_ddiv+0x52a>
 8001b38:	d100      	bne.n	8001b3c <__aeabi_ddiv+0x424>
 8001b3a:	e07f      	b.n	8001c3c <__aeabi_ddiv+0x524>
 8001b3c:	2301      	movs	r3, #1
 8001b3e:	431a      	orrs	r2, r3
 8001b40:	e657      	b.n	80017f2 <__aeabi_ddiv+0xda>
 8001b42:	2380      	movs	r3, #128	; 0x80
 8001b44:	464a      	mov	r2, r9
 8001b46:	031b      	lsls	r3, r3, #12
 8001b48:	4313      	orrs	r3, r2
 8001b4a:	031b      	lsls	r3, r3, #12
 8001b4c:	0b1b      	lsrs	r3, r3, #12
 8001b4e:	46aa      	mov	sl, r5
 8001b50:	4a6f      	ldr	r2, [pc, #444]	; (8001d10 <__aeabi_ddiv+0x5f8>)
 8001b52:	e66f      	b.n	8001834 <__aeabi_ddiv+0x11c>
 8001b54:	42ba      	cmp	r2, r7
 8001b56:	d900      	bls.n	8001b5a <__aeabi_ddiv+0x442>
 8001b58:	e735      	b.n	80019c6 <__aeabi_ddiv+0x2ae>
 8001b5a:	464b      	mov	r3, r9
 8001b5c:	07dc      	lsls	r4, r3, #31
 8001b5e:	0858      	lsrs	r0, r3, #1
 8001b60:	087b      	lsrs	r3, r7, #1
 8001b62:	431c      	orrs	r4, r3
 8001b64:	07ff      	lsls	r7, r7, #31
 8001b66:	e734      	b.n	80019d2 <__aeabi_ddiv+0x2ba>
 8001b68:	2400      	movs	r4, #0
 8001b6a:	42af      	cmp	r7, r5
 8001b6c:	d289      	bcs.n	8001a82 <__aeabi_ddiv+0x36a>
 8001b6e:	4447      	add	r7, r8
 8001b70:	4547      	cmp	r7, r8
 8001b72:	41a4      	sbcs	r4, r4
 8001b74:	465b      	mov	r3, fp
 8001b76:	4264      	negs	r4, r4
 8001b78:	19a4      	adds	r4, r4, r6
 8001b7a:	1864      	adds	r4, r4, r1
 8001b7c:	3b01      	subs	r3, #1
 8001b7e:	42a6      	cmp	r6, r4
 8001b80:	d21e      	bcs.n	8001bc0 <__aeabi_ddiv+0x4a8>
 8001b82:	42a0      	cmp	r0, r4
 8001b84:	d86d      	bhi.n	8001c62 <__aeabi_ddiv+0x54a>
 8001b86:	d100      	bne.n	8001b8a <__aeabi_ddiv+0x472>
 8001b88:	e0b6      	b.n	8001cf8 <__aeabi_ddiv+0x5e0>
 8001b8a:	1a24      	subs	r4, r4, r0
 8001b8c:	469b      	mov	fp, r3
 8001b8e:	e778      	b.n	8001a82 <__aeabi_ddiv+0x36a>
 8001b90:	0003      	movs	r3, r0
 8001b92:	465a      	mov	r2, fp
 8001b94:	3b28      	subs	r3, #40	; 0x28
 8001b96:	409a      	lsls	r2, r3
 8001b98:	2700      	movs	r7, #0
 8001b9a:	4691      	mov	r9, r2
 8001b9c:	e688      	b.n	80018b0 <__aeabi_ddiv+0x198>
 8001b9e:	4658      	mov	r0, fp
 8001ba0:	f001 f8c4 	bl	8002d2c <__clzsi2>
 8001ba4:	3020      	adds	r0, #32
 8001ba6:	e672      	b.n	800188e <__aeabi_ddiv+0x176>
 8001ba8:	0003      	movs	r3, r0
 8001baa:	4652      	mov	r2, sl
 8001bac:	3b28      	subs	r3, #40	; 0x28
 8001bae:	409a      	lsls	r2, r3
 8001bb0:	4693      	mov	fp, r2
 8001bb2:	2200      	movs	r2, #0
 8001bb4:	e6b4      	b.n	8001920 <__aeabi_ddiv+0x208>
 8001bb6:	4650      	mov	r0, sl
 8001bb8:	f001 f8b8 	bl	8002d2c <__clzsi2>
 8001bbc:	3020      	adds	r0, #32
 8001bbe:	e69a      	b.n	80018f6 <__aeabi_ddiv+0x1de>
 8001bc0:	42a6      	cmp	r6, r4
 8001bc2:	d1e2      	bne.n	8001b8a <__aeabi_ddiv+0x472>
 8001bc4:	45b8      	cmp	r8, r7
 8001bc6:	d9dc      	bls.n	8001b82 <__aeabi_ddiv+0x46a>
 8001bc8:	1a34      	subs	r4, r6, r0
 8001bca:	469b      	mov	fp, r3
 8001bcc:	e759      	b.n	8001a82 <__aeabi_ddiv+0x36a>
 8001bce:	2b1f      	cmp	r3, #31
 8001bd0:	dc65      	bgt.n	8001c9e <__aeabi_ddiv+0x586>
 8001bd2:	4c50      	ldr	r4, [pc, #320]	; (8001d14 <__aeabi_ddiv+0x5fc>)
 8001bd4:	9900      	ldr	r1, [sp, #0]
 8001bd6:	46a4      	mov	ip, r4
 8001bd8:	465c      	mov	r4, fp
 8001bda:	4461      	add	r1, ip
 8001bdc:	0008      	movs	r0, r1
 8001bde:	408c      	lsls	r4, r1
 8001be0:	0011      	movs	r1, r2
 8001be2:	4082      	lsls	r2, r0
 8001be4:	40d9      	lsrs	r1, r3
 8001be6:	1e50      	subs	r0, r2, #1
 8001be8:	4182      	sbcs	r2, r0
 8001bea:	430c      	orrs	r4, r1
 8001bec:	4314      	orrs	r4, r2
 8001bee:	465a      	mov	r2, fp
 8001bf0:	40da      	lsrs	r2, r3
 8001bf2:	0013      	movs	r3, r2
 8001bf4:	0762      	lsls	r2, r4, #29
 8001bf6:	d009      	beq.n	8001c0c <__aeabi_ddiv+0x4f4>
 8001bf8:	220f      	movs	r2, #15
 8001bfa:	4022      	ands	r2, r4
 8001bfc:	2a04      	cmp	r2, #4
 8001bfe:	d005      	beq.n	8001c0c <__aeabi_ddiv+0x4f4>
 8001c00:	0022      	movs	r2, r4
 8001c02:	1d14      	adds	r4, r2, #4
 8001c04:	4294      	cmp	r4, r2
 8001c06:	4189      	sbcs	r1, r1
 8001c08:	4249      	negs	r1, r1
 8001c0a:	185b      	adds	r3, r3, r1
 8001c0c:	021a      	lsls	r2, r3, #8
 8001c0e:	d562      	bpl.n	8001cd6 <__aeabi_ddiv+0x5be>
 8001c10:	2201      	movs	r2, #1
 8001c12:	2300      	movs	r3, #0
 8001c14:	2700      	movs	r7, #0
 8001c16:	e60d      	b.n	8001834 <__aeabi_ddiv+0x11c>
 8001c18:	428a      	cmp	r2, r1
 8001c1a:	d800      	bhi.n	8001c1e <__aeabi_ddiv+0x506>
 8001c1c:	e70a      	b.n	8001a34 <__aeabi_ddiv+0x31c>
 8001c1e:	1e83      	subs	r3, r0, #2
 8001c20:	1989      	adds	r1, r1, r6
 8001c22:	e707      	b.n	8001a34 <__aeabi_ddiv+0x31c>
 8001c24:	230f      	movs	r3, #15
 8001c26:	4013      	ands	r3, r2
 8001c28:	2b04      	cmp	r3, #4
 8001c2a:	d100      	bne.n	8001c2e <__aeabi_ddiv+0x516>
 8001c2c:	e5e6      	b.n	80017fc <__aeabi_ddiv+0xe4>
 8001c2e:	1d17      	adds	r7, r2, #4
 8001c30:	4297      	cmp	r7, r2
 8001c32:	4192      	sbcs	r2, r2
 8001c34:	4253      	negs	r3, r2
 8001c36:	449b      	add	fp, r3
 8001c38:	08fa      	lsrs	r2, r7, #3
 8001c3a:	e5e0      	b.n	80017fe <__aeabi_ddiv+0xe6>
 8001c3c:	2800      	cmp	r0, #0
 8001c3e:	d100      	bne.n	8001c42 <__aeabi_ddiv+0x52a>
 8001c40:	e5d7      	b.n	80017f2 <__aeabi_ddiv+0xda>
 8001c42:	1871      	adds	r1, r6, r1
 8001c44:	1e53      	subs	r3, r2, #1
 8001c46:	42b1      	cmp	r1, r6
 8001c48:	d327      	bcc.n	8001c9a <__aeabi_ddiv+0x582>
 8001c4a:	42a9      	cmp	r1, r5
 8001c4c:	d315      	bcc.n	8001c7a <__aeabi_ddiv+0x562>
 8001c4e:	d058      	beq.n	8001d02 <__aeabi_ddiv+0x5ea>
 8001c50:	001a      	movs	r2, r3
 8001c52:	e773      	b.n	8001b3c <__aeabi_ddiv+0x424>
 8001c54:	2b00      	cmp	r3, #0
 8001c56:	dc00      	bgt.n	8001c5a <__aeabi_ddiv+0x542>
 8001c58:	e604      	b.n	8001864 <__aeabi_ddiv+0x14c>
 8001c5a:	2301      	movs	r3, #1
 8001c5c:	2200      	movs	r2, #0
 8001c5e:	449b      	add	fp, r3
 8001c60:	e5cd      	b.n	80017fe <__aeabi_ddiv+0xe6>
 8001c62:	2302      	movs	r3, #2
 8001c64:	4447      	add	r7, r8
 8001c66:	4547      	cmp	r7, r8
 8001c68:	4189      	sbcs	r1, r1
 8001c6a:	425b      	negs	r3, r3
 8001c6c:	469c      	mov	ip, r3
 8001c6e:	4249      	negs	r1, r1
 8001c70:	1989      	adds	r1, r1, r6
 8001c72:	190c      	adds	r4, r1, r4
 8001c74:	44e3      	add	fp, ip
 8001c76:	1a24      	subs	r4, r4, r0
 8001c78:	e703      	b.n	8001a82 <__aeabi_ddiv+0x36a>
 8001c7a:	4643      	mov	r3, r8
 8001c7c:	005f      	lsls	r7, r3, #1
 8001c7e:	4547      	cmp	r7, r8
 8001c80:	419b      	sbcs	r3, r3
 8001c82:	46b8      	mov	r8, r7
 8001c84:	425b      	negs	r3, r3
 8001c86:	199e      	adds	r6, r3, r6
 8001c88:	3a02      	subs	r2, #2
 8001c8a:	1989      	adds	r1, r1, r6
 8001c8c:	42a9      	cmp	r1, r5
 8001c8e:	d000      	beq.n	8001c92 <__aeabi_ddiv+0x57a>
 8001c90:	e754      	b.n	8001b3c <__aeabi_ddiv+0x424>
 8001c92:	4540      	cmp	r0, r8
 8001c94:	d000      	beq.n	8001c98 <__aeabi_ddiv+0x580>
 8001c96:	e751      	b.n	8001b3c <__aeabi_ddiv+0x424>
 8001c98:	e5ab      	b.n	80017f2 <__aeabi_ddiv+0xda>
 8001c9a:	001a      	movs	r2, r3
 8001c9c:	e7f6      	b.n	8001c8c <__aeabi_ddiv+0x574>
 8001c9e:	211f      	movs	r1, #31
 8001ca0:	465f      	mov	r7, fp
 8001ca2:	4249      	negs	r1, r1
 8001ca4:	1b0c      	subs	r4, r1, r4
 8001ca6:	40e7      	lsrs	r7, r4
 8001ca8:	2b20      	cmp	r3, #32
 8001caa:	d007      	beq.n	8001cbc <__aeabi_ddiv+0x5a4>
 8001cac:	491a      	ldr	r1, [pc, #104]	; (8001d18 <__aeabi_ddiv+0x600>)
 8001cae:	9b00      	ldr	r3, [sp, #0]
 8001cb0:	468c      	mov	ip, r1
 8001cb2:	4463      	add	r3, ip
 8001cb4:	0018      	movs	r0, r3
 8001cb6:	465b      	mov	r3, fp
 8001cb8:	4083      	lsls	r3, r0
 8001cba:	431a      	orrs	r2, r3
 8001cbc:	1e50      	subs	r0, r2, #1
 8001cbe:	4182      	sbcs	r2, r0
 8001cc0:	433a      	orrs	r2, r7
 8001cc2:	2707      	movs	r7, #7
 8001cc4:	2300      	movs	r3, #0
 8001cc6:	4017      	ands	r7, r2
 8001cc8:	d009      	beq.n	8001cde <__aeabi_ddiv+0x5c6>
 8001cca:	210f      	movs	r1, #15
 8001ccc:	2300      	movs	r3, #0
 8001cce:	4011      	ands	r1, r2
 8001cd0:	0014      	movs	r4, r2
 8001cd2:	2904      	cmp	r1, #4
 8001cd4:	d195      	bne.n	8001c02 <__aeabi_ddiv+0x4ea>
 8001cd6:	0022      	movs	r2, r4
 8001cd8:	075f      	lsls	r7, r3, #29
 8001cda:	025b      	lsls	r3, r3, #9
 8001cdc:	0b1b      	lsrs	r3, r3, #12
 8001cde:	08d2      	lsrs	r2, r2, #3
 8001ce0:	4317      	orrs	r7, r2
 8001ce2:	2200      	movs	r2, #0
 8001ce4:	e5a6      	b.n	8001834 <__aeabi_ddiv+0x11c>
 8001ce6:	2380      	movs	r3, #128	; 0x80
 8001ce8:	4659      	mov	r1, fp
 8001cea:	031b      	lsls	r3, r3, #12
 8001cec:	430b      	orrs	r3, r1
 8001cee:	031b      	lsls	r3, r3, #12
 8001cf0:	0017      	movs	r7, r2
 8001cf2:	0b1b      	lsrs	r3, r3, #12
 8001cf4:	4a06      	ldr	r2, [pc, #24]	; (8001d10 <__aeabi_ddiv+0x5f8>)
 8001cf6:	e59d      	b.n	8001834 <__aeabi_ddiv+0x11c>
 8001cf8:	42bd      	cmp	r5, r7
 8001cfa:	d8b2      	bhi.n	8001c62 <__aeabi_ddiv+0x54a>
 8001cfc:	469b      	mov	fp, r3
 8001cfe:	2400      	movs	r4, #0
 8001d00:	e6bf      	b.n	8001a82 <__aeabi_ddiv+0x36a>
 8001d02:	4580      	cmp	r8, r0
 8001d04:	d3b9      	bcc.n	8001c7a <__aeabi_ddiv+0x562>
 8001d06:	001a      	movs	r2, r3
 8001d08:	e7c3      	b.n	8001c92 <__aeabi_ddiv+0x57a>
 8001d0a:	46c0      	nop			; (mov r8, r8)
 8001d0c:	000003ff 	.word	0x000003ff
 8001d10:	000007ff 	.word	0x000007ff
 8001d14:	0000041e 	.word	0x0000041e
 8001d18:	0000043e 	.word	0x0000043e

08001d1c <__eqdf2>:
 8001d1c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001d1e:	464f      	mov	r7, r9
 8001d20:	4646      	mov	r6, r8
 8001d22:	46d6      	mov	lr, sl
 8001d24:	4684      	mov	ip, r0
 8001d26:	b5c0      	push	{r6, r7, lr}
 8001d28:	4680      	mov	r8, r0
 8001d2a:	4e19      	ldr	r6, [pc, #100]	; (8001d90 <__eqdf2+0x74>)
 8001d2c:	0318      	lsls	r0, r3, #12
 8001d2e:	030f      	lsls	r7, r1, #12
 8001d30:	004d      	lsls	r5, r1, #1
 8001d32:	0b00      	lsrs	r0, r0, #12
 8001d34:	005c      	lsls	r4, r3, #1
 8001d36:	4682      	mov	sl, r0
 8001d38:	0b3f      	lsrs	r7, r7, #12
 8001d3a:	0d6d      	lsrs	r5, r5, #21
 8001d3c:	0fc9      	lsrs	r1, r1, #31
 8001d3e:	4691      	mov	r9, r2
 8001d40:	0d64      	lsrs	r4, r4, #21
 8001d42:	0fdb      	lsrs	r3, r3, #31
 8001d44:	2001      	movs	r0, #1
 8001d46:	42b5      	cmp	r5, r6
 8001d48:	d00a      	beq.n	8001d60 <__eqdf2+0x44>
 8001d4a:	42b4      	cmp	r4, r6
 8001d4c:	d003      	beq.n	8001d56 <__eqdf2+0x3a>
 8001d4e:	42a5      	cmp	r5, r4
 8001d50:	d101      	bne.n	8001d56 <__eqdf2+0x3a>
 8001d52:	4557      	cmp	r7, sl
 8001d54:	d00c      	beq.n	8001d70 <__eqdf2+0x54>
 8001d56:	bc1c      	pop	{r2, r3, r4}
 8001d58:	4690      	mov	r8, r2
 8001d5a:	4699      	mov	r9, r3
 8001d5c:	46a2      	mov	sl, r4
 8001d5e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001d60:	4666      	mov	r6, ip
 8001d62:	433e      	orrs	r6, r7
 8001d64:	d1f7      	bne.n	8001d56 <__eqdf2+0x3a>
 8001d66:	42ac      	cmp	r4, r5
 8001d68:	d1f5      	bne.n	8001d56 <__eqdf2+0x3a>
 8001d6a:	4654      	mov	r4, sl
 8001d6c:	4314      	orrs	r4, r2
 8001d6e:	d1f2      	bne.n	8001d56 <__eqdf2+0x3a>
 8001d70:	2001      	movs	r0, #1
 8001d72:	45c8      	cmp	r8, r9
 8001d74:	d1ef      	bne.n	8001d56 <__eqdf2+0x3a>
 8001d76:	4299      	cmp	r1, r3
 8001d78:	d007      	beq.n	8001d8a <__eqdf2+0x6e>
 8001d7a:	2d00      	cmp	r5, #0
 8001d7c:	d1eb      	bne.n	8001d56 <__eqdf2+0x3a>
 8001d7e:	4663      	mov	r3, ip
 8001d80:	431f      	orrs	r7, r3
 8001d82:	0038      	movs	r0, r7
 8001d84:	1e47      	subs	r7, r0, #1
 8001d86:	41b8      	sbcs	r0, r7
 8001d88:	e7e5      	b.n	8001d56 <__eqdf2+0x3a>
 8001d8a:	2000      	movs	r0, #0
 8001d8c:	e7e3      	b.n	8001d56 <__eqdf2+0x3a>
 8001d8e:	46c0      	nop			; (mov r8, r8)
 8001d90:	000007ff 	.word	0x000007ff

08001d94 <__gedf2>:
 8001d94:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001d96:	464f      	mov	r7, r9
 8001d98:	4646      	mov	r6, r8
 8001d9a:	46d6      	mov	lr, sl
 8001d9c:	004d      	lsls	r5, r1, #1
 8001d9e:	b5c0      	push	{r6, r7, lr}
 8001da0:	030e      	lsls	r6, r1, #12
 8001da2:	0fc9      	lsrs	r1, r1, #31
 8001da4:	468a      	mov	sl, r1
 8001da6:	492c      	ldr	r1, [pc, #176]	; (8001e58 <__gedf2+0xc4>)
 8001da8:	031f      	lsls	r7, r3, #12
 8001daa:	005c      	lsls	r4, r3, #1
 8001dac:	4680      	mov	r8, r0
 8001dae:	0b36      	lsrs	r6, r6, #12
 8001db0:	0d6d      	lsrs	r5, r5, #21
 8001db2:	4691      	mov	r9, r2
 8001db4:	0b3f      	lsrs	r7, r7, #12
 8001db6:	0d64      	lsrs	r4, r4, #21
 8001db8:	0fdb      	lsrs	r3, r3, #31
 8001dba:	428d      	cmp	r5, r1
 8001dbc:	d01e      	beq.n	8001dfc <__gedf2+0x68>
 8001dbe:	428c      	cmp	r4, r1
 8001dc0:	d016      	beq.n	8001df0 <__gedf2+0x5c>
 8001dc2:	2d00      	cmp	r5, #0
 8001dc4:	d11e      	bne.n	8001e04 <__gedf2+0x70>
 8001dc6:	4330      	orrs	r0, r6
 8001dc8:	4684      	mov	ip, r0
 8001dca:	2c00      	cmp	r4, #0
 8001dcc:	d101      	bne.n	8001dd2 <__gedf2+0x3e>
 8001dce:	433a      	orrs	r2, r7
 8001dd0:	d023      	beq.n	8001e1a <__gedf2+0x86>
 8001dd2:	4662      	mov	r2, ip
 8001dd4:	2a00      	cmp	r2, #0
 8001dd6:	d01a      	beq.n	8001e0e <__gedf2+0x7a>
 8001dd8:	459a      	cmp	sl, r3
 8001dda:	d029      	beq.n	8001e30 <__gedf2+0x9c>
 8001ddc:	4651      	mov	r1, sl
 8001dde:	2002      	movs	r0, #2
 8001de0:	3901      	subs	r1, #1
 8001de2:	4008      	ands	r0, r1
 8001de4:	3801      	subs	r0, #1
 8001de6:	bc1c      	pop	{r2, r3, r4}
 8001de8:	4690      	mov	r8, r2
 8001dea:	4699      	mov	r9, r3
 8001dec:	46a2      	mov	sl, r4
 8001dee:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001df0:	0039      	movs	r1, r7
 8001df2:	4311      	orrs	r1, r2
 8001df4:	d0e5      	beq.n	8001dc2 <__gedf2+0x2e>
 8001df6:	2002      	movs	r0, #2
 8001df8:	4240      	negs	r0, r0
 8001dfa:	e7f4      	b.n	8001de6 <__gedf2+0x52>
 8001dfc:	4330      	orrs	r0, r6
 8001dfe:	d1fa      	bne.n	8001df6 <__gedf2+0x62>
 8001e00:	42ac      	cmp	r4, r5
 8001e02:	d00f      	beq.n	8001e24 <__gedf2+0x90>
 8001e04:	2c00      	cmp	r4, #0
 8001e06:	d10f      	bne.n	8001e28 <__gedf2+0x94>
 8001e08:	433a      	orrs	r2, r7
 8001e0a:	d0e7      	beq.n	8001ddc <__gedf2+0x48>
 8001e0c:	e00c      	b.n	8001e28 <__gedf2+0x94>
 8001e0e:	2201      	movs	r2, #1
 8001e10:	3b01      	subs	r3, #1
 8001e12:	4393      	bics	r3, r2
 8001e14:	0018      	movs	r0, r3
 8001e16:	3001      	adds	r0, #1
 8001e18:	e7e5      	b.n	8001de6 <__gedf2+0x52>
 8001e1a:	4663      	mov	r3, ip
 8001e1c:	2000      	movs	r0, #0
 8001e1e:	2b00      	cmp	r3, #0
 8001e20:	d0e1      	beq.n	8001de6 <__gedf2+0x52>
 8001e22:	e7db      	b.n	8001ddc <__gedf2+0x48>
 8001e24:	433a      	orrs	r2, r7
 8001e26:	d1e6      	bne.n	8001df6 <__gedf2+0x62>
 8001e28:	459a      	cmp	sl, r3
 8001e2a:	d1d7      	bne.n	8001ddc <__gedf2+0x48>
 8001e2c:	42a5      	cmp	r5, r4
 8001e2e:	dcd5      	bgt.n	8001ddc <__gedf2+0x48>
 8001e30:	42a5      	cmp	r5, r4
 8001e32:	db05      	blt.n	8001e40 <__gedf2+0xac>
 8001e34:	42be      	cmp	r6, r7
 8001e36:	d8d1      	bhi.n	8001ddc <__gedf2+0x48>
 8001e38:	d008      	beq.n	8001e4c <__gedf2+0xb8>
 8001e3a:	2000      	movs	r0, #0
 8001e3c:	42be      	cmp	r6, r7
 8001e3e:	d2d2      	bcs.n	8001de6 <__gedf2+0x52>
 8001e40:	4650      	mov	r0, sl
 8001e42:	2301      	movs	r3, #1
 8001e44:	3801      	subs	r0, #1
 8001e46:	4398      	bics	r0, r3
 8001e48:	3001      	adds	r0, #1
 8001e4a:	e7cc      	b.n	8001de6 <__gedf2+0x52>
 8001e4c:	45c8      	cmp	r8, r9
 8001e4e:	d8c5      	bhi.n	8001ddc <__gedf2+0x48>
 8001e50:	2000      	movs	r0, #0
 8001e52:	45c8      	cmp	r8, r9
 8001e54:	d3f4      	bcc.n	8001e40 <__gedf2+0xac>
 8001e56:	e7c6      	b.n	8001de6 <__gedf2+0x52>
 8001e58:	000007ff 	.word	0x000007ff

08001e5c <__ledf2>:
 8001e5c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001e5e:	464f      	mov	r7, r9
 8001e60:	4646      	mov	r6, r8
 8001e62:	46d6      	mov	lr, sl
 8001e64:	004d      	lsls	r5, r1, #1
 8001e66:	b5c0      	push	{r6, r7, lr}
 8001e68:	030e      	lsls	r6, r1, #12
 8001e6a:	0fc9      	lsrs	r1, r1, #31
 8001e6c:	468a      	mov	sl, r1
 8001e6e:	492e      	ldr	r1, [pc, #184]	; (8001f28 <__ledf2+0xcc>)
 8001e70:	031f      	lsls	r7, r3, #12
 8001e72:	005c      	lsls	r4, r3, #1
 8001e74:	4680      	mov	r8, r0
 8001e76:	0b36      	lsrs	r6, r6, #12
 8001e78:	0d6d      	lsrs	r5, r5, #21
 8001e7a:	4691      	mov	r9, r2
 8001e7c:	0b3f      	lsrs	r7, r7, #12
 8001e7e:	0d64      	lsrs	r4, r4, #21
 8001e80:	0fdb      	lsrs	r3, r3, #31
 8001e82:	428d      	cmp	r5, r1
 8001e84:	d018      	beq.n	8001eb8 <__ledf2+0x5c>
 8001e86:	428c      	cmp	r4, r1
 8001e88:	d011      	beq.n	8001eae <__ledf2+0x52>
 8001e8a:	2d00      	cmp	r5, #0
 8001e8c:	d118      	bne.n	8001ec0 <__ledf2+0x64>
 8001e8e:	4330      	orrs	r0, r6
 8001e90:	4684      	mov	ip, r0
 8001e92:	2c00      	cmp	r4, #0
 8001e94:	d11e      	bne.n	8001ed4 <__ledf2+0x78>
 8001e96:	433a      	orrs	r2, r7
 8001e98:	d11c      	bne.n	8001ed4 <__ledf2+0x78>
 8001e9a:	4663      	mov	r3, ip
 8001e9c:	2000      	movs	r0, #0
 8001e9e:	2b00      	cmp	r3, #0
 8001ea0:	d030      	beq.n	8001f04 <__ledf2+0xa8>
 8001ea2:	4651      	mov	r1, sl
 8001ea4:	2002      	movs	r0, #2
 8001ea6:	3901      	subs	r1, #1
 8001ea8:	4008      	ands	r0, r1
 8001eaa:	3801      	subs	r0, #1
 8001eac:	e02a      	b.n	8001f04 <__ledf2+0xa8>
 8001eae:	0039      	movs	r1, r7
 8001eb0:	4311      	orrs	r1, r2
 8001eb2:	d0ea      	beq.n	8001e8a <__ledf2+0x2e>
 8001eb4:	2002      	movs	r0, #2
 8001eb6:	e025      	b.n	8001f04 <__ledf2+0xa8>
 8001eb8:	4330      	orrs	r0, r6
 8001eba:	d1fb      	bne.n	8001eb4 <__ledf2+0x58>
 8001ebc:	42ac      	cmp	r4, r5
 8001ebe:	d026      	beq.n	8001f0e <__ledf2+0xb2>
 8001ec0:	2c00      	cmp	r4, #0
 8001ec2:	d126      	bne.n	8001f12 <__ledf2+0xb6>
 8001ec4:	433a      	orrs	r2, r7
 8001ec6:	d124      	bne.n	8001f12 <__ledf2+0xb6>
 8001ec8:	4651      	mov	r1, sl
 8001eca:	2002      	movs	r0, #2
 8001ecc:	3901      	subs	r1, #1
 8001ece:	4008      	ands	r0, r1
 8001ed0:	3801      	subs	r0, #1
 8001ed2:	e017      	b.n	8001f04 <__ledf2+0xa8>
 8001ed4:	4662      	mov	r2, ip
 8001ed6:	2a00      	cmp	r2, #0
 8001ed8:	d00f      	beq.n	8001efa <__ledf2+0x9e>
 8001eda:	459a      	cmp	sl, r3
 8001edc:	d1e1      	bne.n	8001ea2 <__ledf2+0x46>
 8001ede:	42a5      	cmp	r5, r4
 8001ee0:	db05      	blt.n	8001eee <__ledf2+0x92>
 8001ee2:	42be      	cmp	r6, r7
 8001ee4:	d8dd      	bhi.n	8001ea2 <__ledf2+0x46>
 8001ee6:	d019      	beq.n	8001f1c <__ledf2+0xc0>
 8001ee8:	2000      	movs	r0, #0
 8001eea:	42be      	cmp	r6, r7
 8001eec:	d20a      	bcs.n	8001f04 <__ledf2+0xa8>
 8001eee:	4650      	mov	r0, sl
 8001ef0:	2301      	movs	r3, #1
 8001ef2:	3801      	subs	r0, #1
 8001ef4:	4398      	bics	r0, r3
 8001ef6:	3001      	adds	r0, #1
 8001ef8:	e004      	b.n	8001f04 <__ledf2+0xa8>
 8001efa:	2201      	movs	r2, #1
 8001efc:	3b01      	subs	r3, #1
 8001efe:	4393      	bics	r3, r2
 8001f00:	0018      	movs	r0, r3
 8001f02:	3001      	adds	r0, #1
 8001f04:	bc1c      	pop	{r2, r3, r4}
 8001f06:	4690      	mov	r8, r2
 8001f08:	4699      	mov	r9, r3
 8001f0a:	46a2      	mov	sl, r4
 8001f0c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001f0e:	433a      	orrs	r2, r7
 8001f10:	d1d0      	bne.n	8001eb4 <__ledf2+0x58>
 8001f12:	459a      	cmp	sl, r3
 8001f14:	d1c5      	bne.n	8001ea2 <__ledf2+0x46>
 8001f16:	42a5      	cmp	r5, r4
 8001f18:	dcc3      	bgt.n	8001ea2 <__ledf2+0x46>
 8001f1a:	e7e0      	b.n	8001ede <__ledf2+0x82>
 8001f1c:	45c8      	cmp	r8, r9
 8001f1e:	d8c0      	bhi.n	8001ea2 <__ledf2+0x46>
 8001f20:	2000      	movs	r0, #0
 8001f22:	45c8      	cmp	r8, r9
 8001f24:	d3e3      	bcc.n	8001eee <__ledf2+0x92>
 8001f26:	e7ed      	b.n	8001f04 <__ledf2+0xa8>
 8001f28:	000007ff 	.word	0x000007ff

08001f2c <__aeabi_dmul>:
 8001f2c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001f2e:	4657      	mov	r7, sl
 8001f30:	46de      	mov	lr, fp
 8001f32:	464e      	mov	r6, r9
 8001f34:	4645      	mov	r5, r8
 8001f36:	b5e0      	push	{r5, r6, r7, lr}
 8001f38:	4683      	mov	fp, r0
 8001f3a:	0006      	movs	r6, r0
 8001f3c:	030f      	lsls	r7, r1, #12
 8001f3e:	0048      	lsls	r0, r1, #1
 8001f40:	b087      	sub	sp, #28
 8001f42:	4692      	mov	sl, r2
 8001f44:	001d      	movs	r5, r3
 8001f46:	0b3f      	lsrs	r7, r7, #12
 8001f48:	0d40      	lsrs	r0, r0, #21
 8001f4a:	0fcc      	lsrs	r4, r1, #31
 8001f4c:	2800      	cmp	r0, #0
 8001f4e:	d100      	bne.n	8001f52 <__aeabi_dmul+0x26>
 8001f50:	e06f      	b.n	8002032 <__aeabi_dmul+0x106>
 8001f52:	4bde      	ldr	r3, [pc, #888]	; (80022cc <__aeabi_dmul+0x3a0>)
 8001f54:	4298      	cmp	r0, r3
 8001f56:	d038      	beq.n	8001fca <__aeabi_dmul+0x9e>
 8001f58:	2380      	movs	r3, #128	; 0x80
 8001f5a:	00ff      	lsls	r7, r7, #3
 8001f5c:	041b      	lsls	r3, r3, #16
 8001f5e:	431f      	orrs	r7, r3
 8001f60:	0f73      	lsrs	r3, r6, #29
 8001f62:	433b      	orrs	r3, r7
 8001f64:	9301      	str	r3, [sp, #4]
 8001f66:	4bda      	ldr	r3, [pc, #872]	; (80022d0 <__aeabi_dmul+0x3a4>)
 8001f68:	2700      	movs	r7, #0
 8001f6a:	4699      	mov	r9, r3
 8001f6c:	2300      	movs	r3, #0
 8001f6e:	469b      	mov	fp, r3
 8001f70:	00f6      	lsls	r6, r6, #3
 8001f72:	4481      	add	r9, r0
 8001f74:	032b      	lsls	r3, r5, #12
 8001f76:	0069      	lsls	r1, r5, #1
 8001f78:	0b1b      	lsrs	r3, r3, #12
 8001f7a:	4652      	mov	r2, sl
 8001f7c:	4698      	mov	r8, r3
 8001f7e:	0d49      	lsrs	r1, r1, #21
 8001f80:	0fed      	lsrs	r5, r5, #31
 8001f82:	2900      	cmp	r1, #0
 8001f84:	d100      	bne.n	8001f88 <__aeabi_dmul+0x5c>
 8001f86:	e085      	b.n	8002094 <__aeabi_dmul+0x168>
 8001f88:	4bd0      	ldr	r3, [pc, #832]	; (80022cc <__aeabi_dmul+0x3a0>)
 8001f8a:	4299      	cmp	r1, r3
 8001f8c:	d100      	bne.n	8001f90 <__aeabi_dmul+0x64>
 8001f8e:	e073      	b.n	8002078 <__aeabi_dmul+0x14c>
 8001f90:	4643      	mov	r3, r8
 8001f92:	00da      	lsls	r2, r3, #3
 8001f94:	2380      	movs	r3, #128	; 0x80
 8001f96:	041b      	lsls	r3, r3, #16
 8001f98:	4313      	orrs	r3, r2
 8001f9a:	4652      	mov	r2, sl
 8001f9c:	48cc      	ldr	r0, [pc, #816]	; (80022d0 <__aeabi_dmul+0x3a4>)
 8001f9e:	0f52      	lsrs	r2, r2, #29
 8001fa0:	4684      	mov	ip, r0
 8001fa2:	4313      	orrs	r3, r2
 8001fa4:	4652      	mov	r2, sl
 8001fa6:	2000      	movs	r0, #0
 8001fa8:	4461      	add	r1, ip
 8001faa:	00d2      	lsls	r2, r2, #3
 8001fac:	4489      	add	r9, r1
 8001fae:	0021      	movs	r1, r4
 8001fb0:	4069      	eors	r1, r5
 8001fb2:	9100      	str	r1, [sp, #0]
 8001fb4:	468c      	mov	ip, r1
 8001fb6:	2101      	movs	r1, #1
 8001fb8:	4449      	add	r1, r9
 8001fba:	468a      	mov	sl, r1
 8001fbc:	2f0f      	cmp	r7, #15
 8001fbe:	d900      	bls.n	8001fc2 <__aeabi_dmul+0x96>
 8001fc0:	e090      	b.n	80020e4 <__aeabi_dmul+0x1b8>
 8001fc2:	49c4      	ldr	r1, [pc, #784]	; (80022d4 <__aeabi_dmul+0x3a8>)
 8001fc4:	00bf      	lsls	r7, r7, #2
 8001fc6:	59cf      	ldr	r7, [r1, r7]
 8001fc8:	46bf      	mov	pc, r7
 8001fca:	465b      	mov	r3, fp
 8001fcc:	433b      	orrs	r3, r7
 8001fce:	9301      	str	r3, [sp, #4]
 8001fd0:	d000      	beq.n	8001fd4 <__aeabi_dmul+0xa8>
 8001fd2:	e16a      	b.n	80022aa <__aeabi_dmul+0x37e>
 8001fd4:	2302      	movs	r3, #2
 8001fd6:	2708      	movs	r7, #8
 8001fd8:	2600      	movs	r6, #0
 8001fda:	4681      	mov	r9, r0
 8001fdc:	469b      	mov	fp, r3
 8001fde:	e7c9      	b.n	8001f74 <__aeabi_dmul+0x48>
 8001fe0:	0032      	movs	r2, r6
 8001fe2:	4658      	mov	r0, fp
 8001fe4:	9b01      	ldr	r3, [sp, #4]
 8001fe6:	4661      	mov	r1, ip
 8001fe8:	9100      	str	r1, [sp, #0]
 8001fea:	2802      	cmp	r0, #2
 8001fec:	d100      	bne.n	8001ff0 <__aeabi_dmul+0xc4>
 8001fee:	e075      	b.n	80020dc <__aeabi_dmul+0x1b0>
 8001ff0:	2803      	cmp	r0, #3
 8001ff2:	d100      	bne.n	8001ff6 <__aeabi_dmul+0xca>
 8001ff4:	e1fe      	b.n	80023f4 <__aeabi_dmul+0x4c8>
 8001ff6:	2801      	cmp	r0, #1
 8001ff8:	d000      	beq.n	8001ffc <__aeabi_dmul+0xd0>
 8001ffa:	e12c      	b.n	8002256 <__aeabi_dmul+0x32a>
 8001ffc:	2300      	movs	r3, #0
 8001ffe:	2700      	movs	r7, #0
 8002000:	2600      	movs	r6, #0
 8002002:	2500      	movs	r5, #0
 8002004:	033f      	lsls	r7, r7, #12
 8002006:	0d2a      	lsrs	r2, r5, #20
 8002008:	0b3f      	lsrs	r7, r7, #12
 800200a:	48b3      	ldr	r0, [pc, #716]	; (80022d8 <__aeabi_dmul+0x3ac>)
 800200c:	0512      	lsls	r2, r2, #20
 800200e:	433a      	orrs	r2, r7
 8002010:	4002      	ands	r2, r0
 8002012:	051b      	lsls	r3, r3, #20
 8002014:	4313      	orrs	r3, r2
 8002016:	9a00      	ldr	r2, [sp, #0]
 8002018:	005b      	lsls	r3, r3, #1
 800201a:	07d1      	lsls	r1, r2, #31
 800201c:	085b      	lsrs	r3, r3, #1
 800201e:	430b      	orrs	r3, r1
 8002020:	0030      	movs	r0, r6
 8002022:	0019      	movs	r1, r3
 8002024:	b007      	add	sp, #28
 8002026:	bc3c      	pop	{r2, r3, r4, r5}
 8002028:	4690      	mov	r8, r2
 800202a:	4699      	mov	r9, r3
 800202c:	46a2      	mov	sl, r4
 800202e:	46ab      	mov	fp, r5
 8002030:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002032:	465b      	mov	r3, fp
 8002034:	433b      	orrs	r3, r7
 8002036:	9301      	str	r3, [sp, #4]
 8002038:	d100      	bne.n	800203c <__aeabi_dmul+0x110>
 800203a:	e12f      	b.n	800229c <__aeabi_dmul+0x370>
 800203c:	2f00      	cmp	r7, #0
 800203e:	d100      	bne.n	8002042 <__aeabi_dmul+0x116>
 8002040:	e1a5      	b.n	800238e <__aeabi_dmul+0x462>
 8002042:	0038      	movs	r0, r7
 8002044:	f000 fe72 	bl	8002d2c <__clzsi2>
 8002048:	0003      	movs	r3, r0
 800204a:	3b0b      	subs	r3, #11
 800204c:	2b1c      	cmp	r3, #28
 800204e:	dd00      	ble.n	8002052 <__aeabi_dmul+0x126>
 8002050:	e196      	b.n	8002380 <__aeabi_dmul+0x454>
 8002052:	221d      	movs	r2, #29
 8002054:	1ad3      	subs	r3, r2, r3
 8002056:	465a      	mov	r2, fp
 8002058:	0001      	movs	r1, r0
 800205a:	40da      	lsrs	r2, r3
 800205c:	465e      	mov	r6, fp
 800205e:	3908      	subs	r1, #8
 8002060:	408f      	lsls	r7, r1
 8002062:	0013      	movs	r3, r2
 8002064:	408e      	lsls	r6, r1
 8002066:	433b      	orrs	r3, r7
 8002068:	9301      	str	r3, [sp, #4]
 800206a:	4b9c      	ldr	r3, [pc, #624]	; (80022dc <__aeabi_dmul+0x3b0>)
 800206c:	2700      	movs	r7, #0
 800206e:	1a1b      	subs	r3, r3, r0
 8002070:	4699      	mov	r9, r3
 8002072:	2300      	movs	r3, #0
 8002074:	469b      	mov	fp, r3
 8002076:	e77d      	b.n	8001f74 <__aeabi_dmul+0x48>
 8002078:	4641      	mov	r1, r8
 800207a:	4653      	mov	r3, sl
 800207c:	430b      	orrs	r3, r1
 800207e:	4993      	ldr	r1, [pc, #588]	; (80022cc <__aeabi_dmul+0x3a0>)
 8002080:	468c      	mov	ip, r1
 8002082:	44e1      	add	r9, ip
 8002084:	2b00      	cmp	r3, #0
 8002086:	d000      	beq.n	800208a <__aeabi_dmul+0x15e>
 8002088:	e11a      	b.n	80022c0 <__aeabi_dmul+0x394>
 800208a:	2202      	movs	r2, #2
 800208c:	2002      	movs	r0, #2
 800208e:	4317      	orrs	r7, r2
 8002090:	2200      	movs	r2, #0
 8002092:	e78c      	b.n	8001fae <__aeabi_dmul+0x82>
 8002094:	4313      	orrs	r3, r2
 8002096:	d100      	bne.n	800209a <__aeabi_dmul+0x16e>
 8002098:	e10d      	b.n	80022b6 <__aeabi_dmul+0x38a>
 800209a:	4643      	mov	r3, r8
 800209c:	2b00      	cmp	r3, #0
 800209e:	d100      	bne.n	80020a2 <__aeabi_dmul+0x176>
 80020a0:	e181      	b.n	80023a6 <__aeabi_dmul+0x47a>
 80020a2:	4640      	mov	r0, r8
 80020a4:	f000 fe42 	bl	8002d2c <__clzsi2>
 80020a8:	0002      	movs	r2, r0
 80020aa:	3a0b      	subs	r2, #11
 80020ac:	2a1c      	cmp	r2, #28
 80020ae:	dd00      	ble.n	80020b2 <__aeabi_dmul+0x186>
 80020b0:	e172      	b.n	8002398 <__aeabi_dmul+0x46c>
 80020b2:	0001      	movs	r1, r0
 80020b4:	4643      	mov	r3, r8
 80020b6:	3908      	subs	r1, #8
 80020b8:	408b      	lsls	r3, r1
 80020ba:	4698      	mov	r8, r3
 80020bc:	231d      	movs	r3, #29
 80020be:	1a9a      	subs	r2, r3, r2
 80020c0:	4653      	mov	r3, sl
 80020c2:	40d3      	lsrs	r3, r2
 80020c4:	001a      	movs	r2, r3
 80020c6:	4643      	mov	r3, r8
 80020c8:	4313      	orrs	r3, r2
 80020ca:	4652      	mov	r2, sl
 80020cc:	408a      	lsls	r2, r1
 80020ce:	4649      	mov	r1, r9
 80020d0:	1a08      	subs	r0, r1, r0
 80020d2:	4982      	ldr	r1, [pc, #520]	; (80022dc <__aeabi_dmul+0x3b0>)
 80020d4:	4689      	mov	r9, r1
 80020d6:	4481      	add	r9, r0
 80020d8:	2000      	movs	r0, #0
 80020da:	e768      	b.n	8001fae <__aeabi_dmul+0x82>
 80020dc:	4b7b      	ldr	r3, [pc, #492]	; (80022cc <__aeabi_dmul+0x3a0>)
 80020de:	2700      	movs	r7, #0
 80020e0:	2600      	movs	r6, #0
 80020e2:	e78e      	b.n	8002002 <__aeabi_dmul+0xd6>
 80020e4:	0c14      	lsrs	r4, r2, #16
 80020e6:	0412      	lsls	r2, r2, #16
 80020e8:	0c12      	lsrs	r2, r2, #16
 80020ea:	0011      	movs	r1, r2
 80020ec:	0c37      	lsrs	r7, r6, #16
 80020ee:	0436      	lsls	r6, r6, #16
 80020f0:	0c35      	lsrs	r5, r6, #16
 80020f2:	4379      	muls	r1, r7
 80020f4:	0028      	movs	r0, r5
 80020f6:	468c      	mov	ip, r1
 80020f8:	002e      	movs	r6, r5
 80020fa:	4360      	muls	r0, r4
 80020fc:	4460      	add	r0, ip
 80020fe:	4683      	mov	fp, r0
 8002100:	4356      	muls	r6, r2
 8002102:	0021      	movs	r1, r4
 8002104:	0c30      	lsrs	r0, r6, #16
 8002106:	4680      	mov	r8, r0
 8002108:	4658      	mov	r0, fp
 800210a:	4379      	muls	r1, r7
 800210c:	4440      	add	r0, r8
 800210e:	9102      	str	r1, [sp, #8]
 8002110:	4584      	cmp	ip, r0
 8002112:	d906      	bls.n	8002122 <__aeabi_dmul+0x1f6>
 8002114:	4688      	mov	r8, r1
 8002116:	2180      	movs	r1, #128	; 0x80
 8002118:	0249      	lsls	r1, r1, #9
 800211a:	468c      	mov	ip, r1
 800211c:	44e0      	add	r8, ip
 800211e:	4641      	mov	r1, r8
 8002120:	9102      	str	r1, [sp, #8]
 8002122:	0436      	lsls	r6, r6, #16
 8002124:	0c01      	lsrs	r1, r0, #16
 8002126:	0c36      	lsrs	r6, r6, #16
 8002128:	0400      	lsls	r0, r0, #16
 800212a:	468b      	mov	fp, r1
 800212c:	1981      	adds	r1, r0, r6
 800212e:	0c1e      	lsrs	r6, r3, #16
 8002130:	041b      	lsls	r3, r3, #16
 8002132:	0c1b      	lsrs	r3, r3, #16
 8002134:	9103      	str	r1, [sp, #12]
 8002136:	0019      	movs	r1, r3
 8002138:	4379      	muls	r1, r7
 800213a:	468c      	mov	ip, r1
 800213c:	0028      	movs	r0, r5
 800213e:	4375      	muls	r5, r6
 8002140:	4465      	add	r5, ip
 8002142:	46a8      	mov	r8, r5
 8002144:	4358      	muls	r0, r3
 8002146:	0c05      	lsrs	r5, r0, #16
 8002148:	4445      	add	r5, r8
 800214a:	4377      	muls	r7, r6
 800214c:	42a9      	cmp	r1, r5
 800214e:	d903      	bls.n	8002158 <__aeabi_dmul+0x22c>
 8002150:	2180      	movs	r1, #128	; 0x80
 8002152:	0249      	lsls	r1, r1, #9
 8002154:	468c      	mov	ip, r1
 8002156:	4467      	add	r7, ip
 8002158:	0c29      	lsrs	r1, r5, #16
 800215a:	468c      	mov	ip, r1
 800215c:	0039      	movs	r1, r7
 800215e:	0400      	lsls	r0, r0, #16
 8002160:	0c00      	lsrs	r0, r0, #16
 8002162:	042d      	lsls	r5, r5, #16
 8002164:	182d      	adds	r5, r5, r0
 8002166:	4461      	add	r1, ip
 8002168:	44ab      	add	fp, r5
 800216a:	9105      	str	r1, [sp, #20]
 800216c:	4659      	mov	r1, fp
 800216e:	9104      	str	r1, [sp, #16]
 8002170:	9901      	ldr	r1, [sp, #4]
 8002172:	040f      	lsls	r7, r1, #16
 8002174:	0c3f      	lsrs	r7, r7, #16
 8002176:	0c08      	lsrs	r0, r1, #16
 8002178:	0039      	movs	r1, r7
 800217a:	4351      	muls	r1, r2
 800217c:	4342      	muls	r2, r0
 800217e:	4690      	mov	r8, r2
 8002180:	0002      	movs	r2, r0
 8002182:	468c      	mov	ip, r1
 8002184:	0c09      	lsrs	r1, r1, #16
 8002186:	468b      	mov	fp, r1
 8002188:	4362      	muls	r2, r4
 800218a:	437c      	muls	r4, r7
 800218c:	4444      	add	r4, r8
 800218e:	445c      	add	r4, fp
 8002190:	45a0      	cmp	r8, r4
 8002192:	d903      	bls.n	800219c <__aeabi_dmul+0x270>
 8002194:	2180      	movs	r1, #128	; 0x80
 8002196:	0249      	lsls	r1, r1, #9
 8002198:	4688      	mov	r8, r1
 800219a:	4442      	add	r2, r8
 800219c:	0c21      	lsrs	r1, r4, #16
 800219e:	4688      	mov	r8, r1
 80021a0:	4661      	mov	r1, ip
 80021a2:	0409      	lsls	r1, r1, #16
 80021a4:	0c09      	lsrs	r1, r1, #16
 80021a6:	468c      	mov	ip, r1
 80021a8:	0039      	movs	r1, r7
 80021aa:	4359      	muls	r1, r3
 80021ac:	4343      	muls	r3, r0
 80021ae:	4370      	muls	r0, r6
 80021b0:	437e      	muls	r6, r7
 80021b2:	0c0f      	lsrs	r7, r1, #16
 80021b4:	18f6      	adds	r6, r6, r3
 80021b6:	0424      	lsls	r4, r4, #16
 80021b8:	19be      	adds	r6, r7, r6
 80021ba:	4464      	add	r4, ip
 80021bc:	4442      	add	r2, r8
 80021be:	468c      	mov	ip, r1
 80021c0:	42b3      	cmp	r3, r6
 80021c2:	d903      	bls.n	80021cc <__aeabi_dmul+0x2a0>
 80021c4:	2380      	movs	r3, #128	; 0x80
 80021c6:	025b      	lsls	r3, r3, #9
 80021c8:	4698      	mov	r8, r3
 80021ca:	4440      	add	r0, r8
 80021cc:	9b02      	ldr	r3, [sp, #8]
 80021ce:	4661      	mov	r1, ip
 80021d0:	4698      	mov	r8, r3
 80021d2:	9b04      	ldr	r3, [sp, #16]
 80021d4:	0437      	lsls	r7, r6, #16
 80021d6:	4443      	add	r3, r8
 80021d8:	469b      	mov	fp, r3
 80021da:	45ab      	cmp	fp, r5
 80021dc:	41ad      	sbcs	r5, r5
 80021de:	426b      	negs	r3, r5
 80021e0:	040d      	lsls	r5, r1, #16
 80021e2:	9905      	ldr	r1, [sp, #20]
 80021e4:	0c2d      	lsrs	r5, r5, #16
 80021e6:	468c      	mov	ip, r1
 80021e8:	197f      	adds	r7, r7, r5
 80021ea:	4467      	add	r7, ip
 80021ec:	18fd      	adds	r5, r7, r3
 80021ee:	46a8      	mov	r8, r5
 80021f0:	465d      	mov	r5, fp
 80021f2:	192d      	adds	r5, r5, r4
 80021f4:	42a5      	cmp	r5, r4
 80021f6:	41a4      	sbcs	r4, r4
 80021f8:	4693      	mov	fp, r2
 80021fa:	4264      	negs	r4, r4
 80021fc:	46a4      	mov	ip, r4
 80021fe:	44c3      	add	fp, r8
 8002200:	44dc      	add	ip, fp
 8002202:	428f      	cmp	r7, r1
 8002204:	41bf      	sbcs	r7, r7
 8002206:	4598      	cmp	r8, r3
 8002208:	419b      	sbcs	r3, r3
 800220a:	4593      	cmp	fp, r2
 800220c:	4192      	sbcs	r2, r2
 800220e:	45a4      	cmp	ip, r4
 8002210:	41a4      	sbcs	r4, r4
 8002212:	425b      	negs	r3, r3
 8002214:	427f      	negs	r7, r7
 8002216:	431f      	orrs	r7, r3
 8002218:	0c36      	lsrs	r6, r6, #16
 800221a:	4252      	negs	r2, r2
 800221c:	4264      	negs	r4, r4
 800221e:	19bf      	adds	r7, r7, r6
 8002220:	4322      	orrs	r2, r4
 8002222:	18bf      	adds	r7, r7, r2
 8002224:	4662      	mov	r2, ip
 8002226:	1838      	adds	r0, r7, r0
 8002228:	0243      	lsls	r3, r0, #9
 800222a:	0dd2      	lsrs	r2, r2, #23
 800222c:	9903      	ldr	r1, [sp, #12]
 800222e:	4313      	orrs	r3, r2
 8002230:	026a      	lsls	r2, r5, #9
 8002232:	430a      	orrs	r2, r1
 8002234:	1e50      	subs	r0, r2, #1
 8002236:	4182      	sbcs	r2, r0
 8002238:	4661      	mov	r1, ip
 800223a:	0ded      	lsrs	r5, r5, #23
 800223c:	432a      	orrs	r2, r5
 800223e:	024e      	lsls	r6, r1, #9
 8002240:	4332      	orrs	r2, r6
 8002242:	01d9      	lsls	r1, r3, #7
 8002244:	d400      	bmi.n	8002248 <__aeabi_dmul+0x31c>
 8002246:	e0b3      	b.n	80023b0 <__aeabi_dmul+0x484>
 8002248:	2601      	movs	r6, #1
 800224a:	0850      	lsrs	r0, r2, #1
 800224c:	4032      	ands	r2, r6
 800224e:	4302      	orrs	r2, r0
 8002250:	07de      	lsls	r6, r3, #31
 8002252:	4332      	orrs	r2, r6
 8002254:	085b      	lsrs	r3, r3, #1
 8002256:	4c22      	ldr	r4, [pc, #136]	; (80022e0 <__aeabi_dmul+0x3b4>)
 8002258:	4454      	add	r4, sl
 800225a:	2c00      	cmp	r4, #0
 800225c:	dd62      	ble.n	8002324 <__aeabi_dmul+0x3f8>
 800225e:	0751      	lsls	r1, r2, #29
 8002260:	d009      	beq.n	8002276 <__aeabi_dmul+0x34a>
 8002262:	200f      	movs	r0, #15
 8002264:	4010      	ands	r0, r2
 8002266:	2804      	cmp	r0, #4
 8002268:	d005      	beq.n	8002276 <__aeabi_dmul+0x34a>
 800226a:	1d10      	adds	r0, r2, #4
 800226c:	4290      	cmp	r0, r2
 800226e:	4192      	sbcs	r2, r2
 8002270:	4252      	negs	r2, r2
 8002272:	189b      	adds	r3, r3, r2
 8002274:	0002      	movs	r2, r0
 8002276:	01d9      	lsls	r1, r3, #7
 8002278:	d504      	bpl.n	8002284 <__aeabi_dmul+0x358>
 800227a:	2480      	movs	r4, #128	; 0x80
 800227c:	4819      	ldr	r0, [pc, #100]	; (80022e4 <__aeabi_dmul+0x3b8>)
 800227e:	00e4      	lsls	r4, r4, #3
 8002280:	4003      	ands	r3, r0
 8002282:	4454      	add	r4, sl
 8002284:	4818      	ldr	r0, [pc, #96]	; (80022e8 <__aeabi_dmul+0x3bc>)
 8002286:	4284      	cmp	r4, r0
 8002288:	dd00      	ble.n	800228c <__aeabi_dmul+0x360>
 800228a:	e727      	b.n	80020dc <__aeabi_dmul+0x1b0>
 800228c:	075e      	lsls	r6, r3, #29
 800228e:	025b      	lsls	r3, r3, #9
 8002290:	08d2      	lsrs	r2, r2, #3
 8002292:	0b1f      	lsrs	r7, r3, #12
 8002294:	0563      	lsls	r3, r4, #21
 8002296:	4316      	orrs	r6, r2
 8002298:	0d5b      	lsrs	r3, r3, #21
 800229a:	e6b2      	b.n	8002002 <__aeabi_dmul+0xd6>
 800229c:	2300      	movs	r3, #0
 800229e:	4699      	mov	r9, r3
 80022a0:	3301      	adds	r3, #1
 80022a2:	2704      	movs	r7, #4
 80022a4:	2600      	movs	r6, #0
 80022a6:	469b      	mov	fp, r3
 80022a8:	e664      	b.n	8001f74 <__aeabi_dmul+0x48>
 80022aa:	2303      	movs	r3, #3
 80022ac:	9701      	str	r7, [sp, #4]
 80022ae:	4681      	mov	r9, r0
 80022b0:	270c      	movs	r7, #12
 80022b2:	469b      	mov	fp, r3
 80022b4:	e65e      	b.n	8001f74 <__aeabi_dmul+0x48>
 80022b6:	2201      	movs	r2, #1
 80022b8:	2001      	movs	r0, #1
 80022ba:	4317      	orrs	r7, r2
 80022bc:	2200      	movs	r2, #0
 80022be:	e676      	b.n	8001fae <__aeabi_dmul+0x82>
 80022c0:	2303      	movs	r3, #3
 80022c2:	2003      	movs	r0, #3
 80022c4:	431f      	orrs	r7, r3
 80022c6:	4643      	mov	r3, r8
 80022c8:	e671      	b.n	8001fae <__aeabi_dmul+0x82>
 80022ca:	46c0      	nop			; (mov r8, r8)
 80022cc:	000007ff 	.word	0x000007ff
 80022d0:	fffffc01 	.word	0xfffffc01
 80022d4:	08009534 	.word	0x08009534
 80022d8:	800fffff 	.word	0x800fffff
 80022dc:	fffffc0d 	.word	0xfffffc0d
 80022e0:	000003ff 	.word	0x000003ff
 80022e4:	feffffff 	.word	0xfeffffff
 80022e8:	000007fe 	.word	0x000007fe
 80022ec:	2300      	movs	r3, #0
 80022ee:	2780      	movs	r7, #128	; 0x80
 80022f0:	9300      	str	r3, [sp, #0]
 80022f2:	033f      	lsls	r7, r7, #12
 80022f4:	2600      	movs	r6, #0
 80022f6:	4b43      	ldr	r3, [pc, #268]	; (8002404 <__aeabi_dmul+0x4d8>)
 80022f8:	e683      	b.n	8002002 <__aeabi_dmul+0xd6>
 80022fa:	9b01      	ldr	r3, [sp, #4]
 80022fc:	0032      	movs	r2, r6
 80022fe:	46a4      	mov	ip, r4
 8002300:	4658      	mov	r0, fp
 8002302:	e670      	b.n	8001fe6 <__aeabi_dmul+0xba>
 8002304:	46ac      	mov	ip, r5
 8002306:	e66e      	b.n	8001fe6 <__aeabi_dmul+0xba>
 8002308:	2780      	movs	r7, #128	; 0x80
 800230a:	9901      	ldr	r1, [sp, #4]
 800230c:	033f      	lsls	r7, r7, #12
 800230e:	4239      	tst	r1, r7
 8002310:	d02d      	beq.n	800236e <__aeabi_dmul+0x442>
 8002312:	423b      	tst	r3, r7
 8002314:	d12b      	bne.n	800236e <__aeabi_dmul+0x442>
 8002316:	431f      	orrs	r7, r3
 8002318:	033f      	lsls	r7, r7, #12
 800231a:	0b3f      	lsrs	r7, r7, #12
 800231c:	9500      	str	r5, [sp, #0]
 800231e:	0016      	movs	r6, r2
 8002320:	4b38      	ldr	r3, [pc, #224]	; (8002404 <__aeabi_dmul+0x4d8>)
 8002322:	e66e      	b.n	8002002 <__aeabi_dmul+0xd6>
 8002324:	2501      	movs	r5, #1
 8002326:	1b2d      	subs	r5, r5, r4
 8002328:	2d38      	cmp	r5, #56	; 0x38
 800232a:	dd00      	ble.n	800232e <__aeabi_dmul+0x402>
 800232c:	e666      	b.n	8001ffc <__aeabi_dmul+0xd0>
 800232e:	2d1f      	cmp	r5, #31
 8002330:	dc40      	bgt.n	80023b4 <__aeabi_dmul+0x488>
 8002332:	4835      	ldr	r0, [pc, #212]	; (8002408 <__aeabi_dmul+0x4dc>)
 8002334:	001c      	movs	r4, r3
 8002336:	4450      	add	r0, sl
 8002338:	0016      	movs	r6, r2
 800233a:	4082      	lsls	r2, r0
 800233c:	4084      	lsls	r4, r0
 800233e:	40ee      	lsrs	r6, r5
 8002340:	1e50      	subs	r0, r2, #1
 8002342:	4182      	sbcs	r2, r0
 8002344:	4334      	orrs	r4, r6
 8002346:	4314      	orrs	r4, r2
 8002348:	40eb      	lsrs	r3, r5
 800234a:	0762      	lsls	r2, r4, #29
 800234c:	d009      	beq.n	8002362 <__aeabi_dmul+0x436>
 800234e:	220f      	movs	r2, #15
 8002350:	4022      	ands	r2, r4
 8002352:	2a04      	cmp	r2, #4
 8002354:	d005      	beq.n	8002362 <__aeabi_dmul+0x436>
 8002356:	0022      	movs	r2, r4
 8002358:	1d14      	adds	r4, r2, #4
 800235a:	4294      	cmp	r4, r2
 800235c:	4180      	sbcs	r0, r0
 800235e:	4240      	negs	r0, r0
 8002360:	181b      	adds	r3, r3, r0
 8002362:	021a      	lsls	r2, r3, #8
 8002364:	d53e      	bpl.n	80023e4 <__aeabi_dmul+0x4b8>
 8002366:	2301      	movs	r3, #1
 8002368:	2700      	movs	r7, #0
 800236a:	2600      	movs	r6, #0
 800236c:	e649      	b.n	8002002 <__aeabi_dmul+0xd6>
 800236e:	2780      	movs	r7, #128	; 0x80
 8002370:	9b01      	ldr	r3, [sp, #4]
 8002372:	033f      	lsls	r7, r7, #12
 8002374:	431f      	orrs	r7, r3
 8002376:	033f      	lsls	r7, r7, #12
 8002378:	0b3f      	lsrs	r7, r7, #12
 800237a:	9400      	str	r4, [sp, #0]
 800237c:	4b21      	ldr	r3, [pc, #132]	; (8002404 <__aeabi_dmul+0x4d8>)
 800237e:	e640      	b.n	8002002 <__aeabi_dmul+0xd6>
 8002380:	0003      	movs	r3, r0
 8002382:	465a      	mov	r2, fp
 8002384:	3b28      	subs	r3, #40	; 0x28
 8002386:	409a      	lsls	r2, r3
 8002388:	2600      	movs	r6, #0
 800238a:	9201      	str	r2, [sp, #4]
 800238c:	e66d      	b.n	800206a <__aeabi_dmul+0x13e>
 800238e:	4658      	mov	r0, fp
 8002390:	f000 fccc 	bl	8002d2c <__clzsi2>
 8002394:	3020      	adds	r0, #32
 8002396:	e657      	b.n	8002048 <__aeabi_dmul+0x11c>
 8002398:	0003      	movs	r3, r0
 800239a:	4652      	mov	r2, sl
 800239c:	3b28      	subs	r3, #40	; 0x28
 800239e:	409a      	lsls	r2, r3
 80023a0:	0013      	movs	r3, r2
 80023a2:	2200      	movs	r2, #0
 80023a4:	e693      	b.n	80020ce <__aeabi_dmul+0x1a2>
 80023a6:	4650      	mov	r0, sl
 80023a8:	f000 fcc0 	bl	8002d2c <__clzsi2>
 80023ac:	3020      	adds	r0, #32
 80023ae:	e67b      	b.n	80020a8 <__aeabi_dmul+0x17c>
 80023b0:	46ca      	mov	sl, r9
 80023b2:	e750      	b.n	8002256 <__aeabi_dmul+0x32a>
 80023b4:	201f      	movs	r0, #31
 80023b6:	001e      	movs	r6, r3
 80023b8:	4240      	negs	r0, r0
 80023ba:	1b04      	subs	r4, r0, r4
 80023bc:	40e6      	lsrs	r6, r4
 80023be:	2d20      	cmp	r5, #32
 80023c0:	d003      	beq.n	80023ca <__aeabi_dmul+0x49e>
 80023c2:	4c12      	ldr	r4, [pc, #72]	; (800240c <__aeabi_dmul+0x4e0>)
 80023c4:	4454      	add	r4, sl
 80023c6:	40a3      	lsls	r3, r4
 80023c8:	431a      	orrs	r2, r3
 80023ca:	1e50      	subs	r0, r2, #1
 80023cc:	4182      	sbcs	r2, r0
 80023ce:	4332      	orrs	r2, r6
 80023d0:	2607      	movs	r6, #7
 80023d2:	2700      	movs	r7, #0
 80023d4:	4016      	ands	r6, r2
 80023d6:	d009      	beq.n	80023ec <__aeabi_dmul+0x4c0>
 80023d8:	200f      	movs	r0, #15
 80023da:	2300      	movs	r3, #0
 80023dc:	4010      	ands	r0, r2
 80023de:	0014      	movs	r4, r2
 80023e0:	2804      	cmp	r0, #4
 80023e2:	d1b9      	bne.n	8002358 <__aeabi_dmul+0x42c>
 80023e4:	0022      	movs	r2, r4
 80023e6:	075e      	lsls	r6, r3, #29
 80023e8:	025b      	lsls	r3, r3, #9
 80023ea:	0b1f      	lsrs	r7, r3, #12
 80023ec:	08d2      	lsrs	r2, r2, #3
 80023ee:	4316      	orrs	r6, r2
 80023f0:	2300      	movs	r3, #0
 80023f2:	e606      	b.n	8002002 <__aeabi_dmul+0xd6>
 80023f4:	2780      	movs	r7, #128	; 0x80
 80023f6:	033f      	lsls	r7, r7, #12
 80023f8:	431f      	orrs	r7, r3
 80023fa:	033f      	lsls	r7, r7, #12
 80023fc:	0b3f      	lsrs	r7, r7, #12
 80023fe:	0016      	movs	r6, r2
 8002400:	4b00      	ldr	r3, [pc, #0]	; (8002404 <__aeabi_dmul+0x4d8>)
 8002402:	e5fe      	b.n	8002002 <__aeabi_dmul+0xd6>
 8002404:	000007ff 	.word	0x000007ff
 8002408:	0000041e 	.word	0x0000041e
 800240c:	0000043e 	.word	0x0000043e

08002410 <__aeabi_dsub>:
 8002410:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002412:	4657      	mov	r7, sl
 8002414:	464e      	mov	r6, r9
 8002416:	4645      	mov	r5, r8
 8002418:	46de      	mov	lr, fp
 800241a:	000c      	movs	r4, r1
 800241c:	0309      	lsls	r1, r1, #12
 800241e:	b5e0      	push	{r5, r6, r7, lr}
 8002420:	0a49      	lsrs	r1, r1, #9
 8002422:	0f46      	lsrs	r6, r0, #29
 8002424:	005f      	lsls	r7, r3, #1
 8002426:	4331      	orrs	r1, r6
 8002428:	031e      	lsls	r6, r3, #12
 800242a:	0fdb      	lsrs	r3, r3, #31
 800242c:	0a76      	lsrs	r6, r6, #9
 800242e:	469b      	mov	fp, r3
 8002430:	0f53      	lsrs	r3, r2, #29
 8002432:	4333      	orrs	r3, r6
 8002434:	4ec8      	ldr	r6, [pc, #800]	; (8002758 <__aeabi_dsub+0x348>)
 8002436:	0065      	lsls	r5, r4, #1
 8002438:	00c0      	lsls	r0, r0, #3
 800243a:	0fe4      	lsrs	r4, r4, #31
 800243c:	00d2      	lsls	r2, r2, #3
 800243e:	0d6d      	lsrs	r5, r5, #21
 8002440:	46a2      	mov	sl, r4
 8002442:	4681      	mov	r9, r0
 8002444:	0d7f      	lsrs	r7, r7, #21
 8002446:	469c      	mov	ip, r3
 8002448:	4690      	mov	r8, r2
 800244a:	42b7      	cmp	r7, r6
 800244c:	d100      	bne.n	8002450 <__aeabi_dsub+0x40>
 800244e:	e0b9      	b.n	80025c4 <__aeabi_dsub+0x1b4>
 8002450:	465b      	mov	r3, fp
 8002452:	2601      	movs	r6, #1
 8002454:	4073      	eors	r3, r6
 8002456:	469b      	mov	fp, r3
 8002458:	1bee      	subs	r6, r5, r7
 800245a:	45a3      	cmp	fp, r4
 800245c:	d100      	bne.n	8002460 <__aeabi_dsub+0x50>
 800245e:	e083      	b.n	8002568 <__aeabi_dsub+0x158>
 8002460:	2e00      	cmp	r6, #0
 8002462:	dd63      	ble.n	800252c <__aeabi_dsub+0x11c>
 8002464:	2f00      	cmp	r7, #0
 8002466:	d000      	beq.n	800246a <__aeabi_dsub+0x5a>
 8002468:	e0b1      	b.n	80025ce <__aeabi_dsub+0x1be>
 800246a:	4663      	mov	r3, ip
 800246c:	4313      	orrs	r3, r2
 800246e:	d100      	bne.n	8002472 <__aeabi_dsub+0x62>
 8002470:	e123      	b.n	80026ba <__aeabi_dsub+0x2aa>
 8002472:	1e73      	subs	r3, r6, #1
 8002474:	2b00      	cmp	r3, #0
 8002476:	d000      	beq.n	800247a <__aeabi_dsub+0x6a>
 8002478:	e1ba      	b.n	80027f0 <__aeabi_dsub+0x3e0>
 800247a:	1a86      	subs	r6, r0, r2
 800247c:	4663      	mov	r3, ip
 800247e:	42b0      	cmp	r0, r6
 8002480:	4180      	sbcs	r0, r0
 8002482:	2501      	movs	r5, #1
 8002484:	1ac9      	subs	r1, r1, r3
 8002486:	4240      	negs	r0, r0
 8002488:	1a09      	subs	r1, r1, r0
 800248a:	020b      	lsls	r3, r1, #8
 800248c:	d400      	bmi.n	8002490 <__aeabi_dsub+0x80>
 800248e:	e147      	b.n	8002720 <__aeabi_dsub+0x310>
 8002490:	0249      	lsls	r1, r1, #9
 8002492:	0a4b      	lsrs	r3, r1, #9
 8002494:	4698      	mov	r8, r3
 8002496:	4643      	mov	r3, r8
 8002498:	2b00      	cmp	r3, #0
 800249a:	d100      	bne.n	800249e <__aeabi_dsub+0x8e>
 800249c:	e189      	b.n	80027b2 <__aeabi_dsub+0x3a2>
 800249e:	4640      	mov	r0, r8
 80024a0:	f000 fc44 	bl	8002d2c <__clzsi2>
 80024a4:	0003      	movs	r3, r0
 80024a6:	3b08      	subs	r3, #8
 80024a8:	2b1f      	cmp	r3, #31
 80024aa:	dd00      	ble.n	80024ae <__aeabi_dsub+0x9e>
 80024ac:	e17c      	b.n	80027a8 <__aeabi_dsub+0x398>
 80024ae:	2220      	movs	r2, #32
 80024b0:	0030      	movs	r0, r6
 80024b2:	1ad2      	subs	r2, r2, r3
 80024b4:	4641      	mov	r1, r8
 80024b6:	40d0      	lsrs	r0, r2
 80024b8:	4099      	lsls	r1, r3
 80024ba:	0002      	movs	r2, r0
 80024bc:	409e      	lsls	r6, r3
 80024be:	430a      	orrs	r2, r1
 80024c0:	429d      	cmp	r5, r3
 80024c2:	dd00      	ble.n	80024c6 <__aeabi_dsub+0xb6>
 80024c4:	e16a      	b.n	800279c <__aeabi_dsub+0x38c>
 80024c6:	1b5d      	subs	r5, r3, r5
 80024c8:	1c6b      	adds	r3, r5, #1
 80024ca:	2b1f      	cmp	r3, #31
 80024cc:	dd00      	ble.n	80024d0 <__aeabi_dsub+0xc0>
 80024ce:	e194      	b.n	80027fa <__aeabi_dsub+0x3ea>
 80024d0:	2120      	movs	r1, #32
 80024d2:	0010      	movs	r0, r2
 80024d4:	0035      	movs	r5, r6
 80024d6:	1ac9      	subs	r1, r1, r3
 80024d8:	408e      	lsls	r6, r1
 80024da:	40da      	lsrs	r2, r3
 80024dc:	4088      	lsls	r0, r1
 80024de:	40dd      	lsrs	r5, r3
 80024e0:	1e71      	subs	r1, r6, #1
 80024e2:	418e      	sbcs	r6, r1
 80024e4:	0011      	movs	r1, r2
 80024e6:	2207      	movs	r2, #7
 80024e8:	4328      	orrs	r0, r5
 80024ea:	2500      	movs	r5, #0
 80024ec:	4306      	orrs	r6, r0
 80024ee:	4032      	ands	r2, r6
 80024f0:	2a00      	cmp	r2, #0
 80024f2:	d009      	beq.n	8002508 <__aeabi_dsub+0xf8>
 80024f4:	230f      	movs	r3, #15
 80024f6:	4033      	ands	r3, r6
 80024f8:	2b04      	cmp	r3, #4
 80024fa:	d005      	beq.n	8002508 <__aeabi_dsub+0xf8>
 80024fc:	1d33      	adds	r3, r6, #4
 80024fe:	42b3      	cmp	r3, r6
 8002500:	41b6      	sbcs	r6, r6
 8002502:	4276      	negs	r6, r6
 8002504:	1989      	adds	r1, r1, r6
 8002506:	001e      	movs	r6, r3
 8002508:	020b      	lsls	r3, r1, #8
 800250a:	d400      	bmi.n	800250e <__aeabi_dsub+0xfe>
 800250c:	e23d      	b.n	800298a <__aeabi_dsub+0x57a>
 800250e:	1c6a      	adds	r2, r5, #1
 8002510:	4b91      	ldr	r3, [pc, #580]	; (8002758 <__aeabi_dsub+0x348>)
 8002512:	0555      	lsls	r5, r2, #21
 8002514:	0d6d      	lsrs	r5, r5, #21
 8002516:	429a      	cmp	r2, r3
 8002518:	d100      	bne.n	800251c <__aeabi_dsub+0x10c>
 800251a:	e119      	b.n	8002750 <__aeabi_dsub+0x340>
 800251c:	4a8f      	ldr	r2, [pc, #572]	; (800275c <__aeabi_dsub+0x34c>)
 800251e:	08f6      	lsrs	r6, r6, #3
 8002520:	400a      	ands	r2, r1
 8002522:	0757      	lsls	r7, r2, #29
 8002524:	0252      	lsls	r2, r2, #9
 8002526:	4337      	orrs	r7, r6
 8002528:	0b12      	lsrs	r2, r2, #12
 800252a:	e09b      	b.n	8002664 <__aeabi_dsub+0x254>
 800252c:	2e00      	cmp	r6, #0
 800252e:	d000      	beq.n	8002532 <__aeabi_dsub+0x122>
 8002530:	e0c5      	b.n	80026be <__aeabi_dsub+0x2ae>
 8002532:	1c6e      	adds	r6, r5, #1
 8002534:	0576      	lsls	r6, r6, #21
 8002536:	0d76      	lsrs	r6, r6, #21
 8002538:	2e01      	cmp	r6, #1
 800253a:	dc00      	bgt.n	800253e <__aeabi_dsub+0x12e>
 800253c:	e148      	b.n	80027d0 <__aeabi_dsub+0x3c0>
 800253e:	4667      	mov	r7, ip
 8002540:	1a86      	subs	r6, r0, r2
 8002542:	1bcb      	subs	r3, r1, r7
 8002544:	42b0      	cmp	r0, r6
 8002546:	41bf      	sbcs	r7, r7
 8002548:	427f      	negs	r7, r7
 800254a:	46b8      	mov	r8, r7
 800254c:	001f      	movs	r7, r3
 800254e:	4643      	mov	r3, r8
 8002550:	1aff      	subs	r7, r7, r3
 8002552:	003b      	movs	r3, r7
 8002554:	46b8      	mov	r8, r7
 8002556:	021b      	lsls	r3, r3, #8
 8002558:	d500      	bpl.n	800255c <__aeabi_dsub+0x14c>
 800255a:	e15f      	b.n	800281c <__aeabi_dsub+0x40c>
 800255c:	4337      	orrs	r7, r6
 800255e:	d19a      	bne.n	8002496 <__aeabi_dsub+0x86>
 8002560:	2200      	movs	r2, #0
 8002562:	2400      	movs	r4, #0
 8002564:	2500      	movs	r5, #0
 8002566:	e079      	b.n	800265c <__aeabi_dsub+0x24c>
 8002568:	2e00      	cmp	r6, #0
 800256a:	dc00      	bgt.n	800256e <__aeabi_dsub+0x15e>
 800256c:	e0fa      	b.n	8002764 <__aeabi_dsub+0x354>
 800256e:	2f00      	cmp	r7, #0
 8002570:	d100      	bne.n	8002574 <__aeabi_dsub+0x164>
 8002572:	e08d      	b.n	8002690 <__aeabi_dsub+0x280>
 8002574:	4b78      	ldr	r3, [pc, #480]	; (8002758 <__aeabi_dsub+0x348>)
 8002576:	429d      	cmp	r5, r3
 8002578:	d067      	beq.n	800264a <__aeabi_dsub+0x23a>
 800257a:	2380      	movs	r3, #128	; 0x80
 800257c:	4667      	mov	r7, ip
 800257e:	041b      	lsls	r3, r3, #16
 8002580:	431f      	orrs	r7, r3
 8002582:	46bc      	mov	ip, r7
 8002584:	2e38      	cmp	r6, #56	; 0x38
 8002586:	dc00      	bgt.n	800258a <__aeabi_dsub+0x17a>
 8002588:	e152      	b.n	8002830 <__aeabi_dsub+0x420>
 800258a:	4663      	mov	r3, ip
 800258c:	4313      	orrs	r3, r2
 800258e:	1e5a      	subs	r2, r3, #1
 8002590:	4193      	sbcs	r3, r2
 8002592:	181e      	adds	r6, r3, r0
 8002594:	4286      	cmp	r6, r0
 8002596:	4180      	sbcs	r0, r0
 8002598:	4240      	negs	r0, r0
 800259a:	1809      	adds	r1, r1, r0
 800259c:	020b      	lsls	r3, r1, #8
 800259e:	d400      	bmi.n	80025a2 <__aeabi_dsub+0x192>
 80025a0:	e0be      	b.n	8002720 <__aeabi_dsub+0x310>
 80025a2:	4b6d      	ldr	r3, [pc, #436]	; (8002758 <__aeabi_dsub+0x348>)
 80025a4:	3501      	adds	r5, #1
 80025a6:	429d      	cmp	r5, r3
 80025a8:	d100      	bne.n	80025ac <__aeabi_dsub+0x19c>
 80025aa:	e0d2      	b.n	8002752 <__aeabi_dsub+0x342>
 80025ac:	4a6b      	ldr	r2, [pc, #428]	; (800275c <__aeabi_dsub+0x34c>)
 80025ae:	0873      	lsrs	r3, r6, #1
 80025b0:	400a      	ands	r2, r1
 80025b2:	2101      	movs	r1, #1
 80025b4:	400e      	ands	r6, r1
 80025b6:	431e      	orrs	r6, r3
 80025b8:	0851      	lsrs	r1, r2, #1
 80025ba:	07d3      	lsls	r3, r2, #31
 80025bc:	2207      	movs	r2, #7
 80025be:	431e      	orrs	r6, r3
 80025c0:	4032      	ands	r2, r6
 80025c2:	e795      	b.n	80024f0 <__aeabi_dsub+0xe0>
 80025c4:	001e      	movs	r6, r3
 80025c6:	4316      	orrs	r6, r2
 80025c8:	d000      	beq.n	80025cc <__aeabi_dsub+0x1bc>
 80025ca:	e745      	b.n	8002458 <__aeabi_dsub+0x48>
 80025cc:	e740      	b.n	8002450 <__aeabi_dsub+0x40>
 80025ce:	4b62      	ldr	r3, [pc, #392]	; (8002758 <__aeabi_dsub+0x348>)
 80025d0:	429d      	cmp	r5, r3
 80025d2:	d03a      	beq.n	800264a <__aeabi_dsub+0x23a>
 80025d4:	2380      	movs	r3, #128	; 0x80
 80025d6:	4667      	mov	r7, ip
 80025d8:	041b      	lsls	r3, r3, #16
 80025da:	431f      	orrs	r7, r3
 80025dc:	46bc      	mov	ip, r7
 80025de:	2e38      	cmp	r6, #56	; 0x38
 80025e0:	dd00      	ble.n	80025e4 <__aeabi_dsub+0x1d4>
 80025e2:	e0eb      	b.n	80027bc <__aeabi_dsub+0x3ac>
 80025e4:	2e1f      	cmp	r6, #31
 80025e6:	dc00      	bgt.n	80025ea <__aeabi_dsub+0x1da>
 80025e8:	e13a      	b.n	8002860 <__aeabi_dsub+0x450>
 80025ea:	0033      	movs	r3, r6
 80025ec:	4667      	mov	r7, ip
 80025ee:	3b20      	subs	r3, #32
 80025f0:	40df      	lsrs	r7, r3
 80025f2:	003b      	movs	r3, r7
 80025f4:	2e20      	cmp	r6, #32
 80025f6:	d005      	beq.n	8002604 <__aeabi_dsub+0x1f4>
 80025f8:	2740      	movs	r7, #64	; 0x40
 80025fa:	1bbf      	subs	r7, r7, r6
 80025fc:	4666      	mov	r6, ip
 80025fe:	40be      	lsls	r6, r7
 8002600:	4332      	orrs	r2, r6
 8002602:	4690      	mov	r8, r2
 8002604:	4646      	mov	r6, r8
 8002606:	1e72      	subs	r2, r6, #1
 8002608:	4196      	sbcs	r6, r2
 800260a:	4333      	orrs	r3, r6
 800260c:	e0da      	b.n	80027c4 <__aeabi_dsub+0x3b4>
 800260e:	2b00      	cmp	r3, #0
 8002610:	d100      	bne.n	8002614 <__aeabi_dsub+0x204>
 8002612:	e214      	b.n	8002a3e <__aeabi_dsub+0x62e>
 8002614:	4663      	mov	r3, ip
 8002616:	4313      	orrs	r3, r2
 8002618:	d100      	bne.n	800261c <__aeabi_dsub+0x20c>
 800261a:	e168      	b.n	80028ee <__aeabi_dsub+0x4de>
 800261c:	2380      	movs	r3, #128	; 0x80
 800261e:	074e      	lsls	r6, r1, #29
 8002620:	08c0      	lsrs	r0, r0, #3
 8002622:	08c9      	lsrs	r1, r1, #3
 8002624:	031b      	lsls	r3, r3, #12
 8002626:	4306      	orrs	r6, r0
 8002628:	4219      	tst	r1, r3
 800262a:	d008      	beq.n	800263e <__aeabi_dsub+0x22e>
 800262c:	4660      	mov	r0, ip
 800262e:	08c0      	lsrs	r0, r0, #3
 8002630:	4218      	tst	r0, r3
 8002632:	d104      	bne.n	800263e <__aeabi_dsub+0x22e>
 8002634:	4663      	mov	r3, ip
 8002636:	0001      	movs	r1, r0
 8002638:	08d2      	lsrs	r2, r2, #3
 800263a:	075e      	lsls	r6, r3, #29
 800263c:	4316      	orrs	r6, r2
 800263e:	00f3      	lsls	r3, r6, #3
 8002640:	4699      	mov	r9, r3
 8002642:	00c9      	lsls	r1, r1, #3
 8002644:	0f72      	lsrs	r2, r6, #29
 8002646:	4d44      	ldr	r5, [pc, #272]	; (8002758 <__aeabi_dsub+0x348>)
 8002648:	4311      	orrs	r1, r2
 800264a:	464b      	mov	r3, r9
 800264c:	08de      	lsrs	r6, r3, #3
 800264e:	4b42      	ldr	r3, [pc, #264]	; (8002758 <__aeabi_dsub+0x348>)
 8002650:	074f      	lsls	r7, r1, #29
 8002652:	4337      	orrs	r7, r6
 8002654:	08ca      	lsrs	r2, r1, #3
 8002656:	429d      	cmp	r5, r3
 8002658:	d100      	bne.n	800265c <__aeabi_dsub+0x24c>
 800265a:	e06e      	b.n	800273a <__aeabi_dsub+0x32a>
 800265c:	0312      	lsls	r2, r2, #12
 800265e:	056d      	lsls	r5, r5, #21
 8002660:	0b12      	lsrs	r2, r2, #12
 8002662:	0d6d      	lsrs	r5, r5, #21
 8002664:	2100      	movs	r1, #0
 8002666:	0312      	lsls	r2, r2, #12
 8002668:	0b13      	lsrs	r3, r2, #12
 800266a:	0d0a      	lsrs	r2, r1, #20
 800266c:	0512      	lsls	r2, r2, #20
 800266e:	431a      	orrs	r2, r3
 8002670:	4b3b      	ldr	r3, [pc, #236]	; (8002760 <__aeabi_dsub+0x350>)
 8002672:	052d      	lsls	r5, r5, #20
 8002674:	4013      	ands	r3, r2
 8002676:	432b      	orrs	r3, r5
 8002678:	005b      	lsls	r3, r3, #1
 800267a:	07e4      	lsls	r4, r4, #31
 800267c:	085b      	lsrs	r3, r3, #1
 800267e:	4323      	orrs	r3, r4
 8002680:	0038      	movs	r0, r7
 8002682:	0019      	movs	r1, r3
 8002684:	bc3c      	pop	{r2, r3, r4, r5}
 8002686:	4690      	mov	r8, r2
 8002688:	4699      	mov	r9, r3
 800268a:	46a2      	mov	sl, r4
 800268c:	46ab      	mov	fp, r5
 800268e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8002690:	4663      	mov	r3, ip
 8002692:	4313      	orrs	r3, r2
 8002694:	d011      	beq.n	80026ba <__aeabi_dsub+0x2aa>
 8002696:	1e73      	subs	r3, r6, #1
 8002698:	2b00      	cmp	r3, #0
 800269a:	d000      	beq.n	800269e <__aeabi_dsub+0x28e>
 800269c:	e107      	b.n	80028ae <__aeabi_dsub+0x49e>
 800269e:	1886      	adds	r6, r0, r2
 80026a0:	4286      	cmp	r6, r0
 80026a2:	4180      	sbcs	r0, r0
 80026a4:	4461      	add	r1, ip
 80026a6:	4240      	negs	r0, r0
 80026a8:	1809      	adds	r1, r1, r0
 80026aa:	2501      	movs	r5, #1
 80026ac:	020b      	lsls	r3, r1, #8
 80026ae:	d537      	bpl.n	8002720 <__aeabi_dsub+0x310>
 80026b0:	2502      	movs	r5, #2
 80026b2:	e77b      	b.n	80025ac <__aeabi_dsub+0x19c>
 80026b4:	003e      	movs	r6, r7
 80026b6:	4661      	mov	r1, ip
 80026b8:	4691      	mov	r9, r2
 80026ba:	0035      	movs	r5, r6
 80026bc:	e7c5      	b.n	800264a <__aeabi_dsub+0x23a>
 80026be:	465c      	mov	r4, fp
 80026c0:	2d00      	cmp	r5, #0
 80026c2:	d000      	beq.n	80026c6 <__aeabi_dsub+0x2b6>
 80026c4:	e0e1      	b.n	800288a <__aeabi_dsub+0x47a>
 80026c6:	000b      	movs	r3, r1
 80026c8:	4303      	orrs	r3, r0
 80026ca:	d0f3      	beq.n	80026b4 <__aeabi_dsub+0x2a4>
 80026cc:	1c73      	adds	r3, r6, #1
 80026ce:	d100      	bne.n	80026d2 <__aeabi_dsub+0x2c2>
 80026d0:	e1ac      	b.n	8002a2c <__aeabi_dsub+0x61c>
 80026d2:	4b21      	ldr	r3, [pc, #132]	; (8002758 <__aeabi_dsub+0x348>)
 80026d4:	429f      	cmp	r7, r3
 80026d6:	d100      	bne.n	80026da <__aeabi_dsub+0x2ca>
 80026d8:	e13a      	b.n	8002950 <__aeabi_dsub+0x540>
 80026da:	43f3      	mvns	r3, r6
 80026dc:	2b38      	cmp	r3, #56	; 0x38
 80026de:	dd00      	ble.n	80026e2 <__aeabi_dsub+0x2d2>
 80026e0:	e16f      	b.n	80029c2 <__aeabi_dsub+0x5b2>
 80026e2:	2b1f      	cmp	r3, #31
 80026e4:	dd00      	ble.n	80026e8 <__aeabi_dsub+0x2d8>
 80026e6:	e18c      	b.n	8002a02 <__aeabi_dsub+0x5f2>
 80026e8:	2520      	movs	r5, #32
 80026ea:	000e      	movs	r6, r1
 80026ec:	1aed      	subs	r5, r5, r3
 80026ee:	40ae      	lsls	r6, r5
 80026f0:	46b0      	mov	r8, r6
 80026f2:	0006      	movs	r6, r0
 80026f4:	46aa      	mov	sl, r5
 80026f6:	40de      	lsrs	r6, r3
 80026f8:	4645      	mov	r5, r8
 80026fa:	4335      	orrs	r5, r6
 80026fc:	002e      	movs	r6, r5
 80026fe:	4655      	mov	r5, sl
 8002700:	40d9      	lsrs	r1, r3
 8002702:	40a8      	lsls	r0, r5
 8002704:	4663      	mov	r3, ip
 8002706:	1e45      	subs	r5, r0, #1
 8002708:	41a8      	sbcs	r0, r5
 800270a:	1a5b      	subs	r3, r3, r1
 800270c:	469c      	mov	ip, r3
 800270e:	4330      	orrs	r0, r6
 8002710:	1a16      	subs	r6, r2, r0
 8002712:	42b2      	cmp	r2, r6
 8002714:	4192      	sbcs	r2, r2
 8002716:	4663      	mov	r3, ip
 8002718:	4252      	negs	r2, r2
 800271a:	1a99      	subs	r1, r3, r2
 800271c:	003d      	movs	r5, r7
 800271e:	e6b4      	b.n	800248a <__aeabi_dsub+0x7a>
 8002720:	2207      	movs	r2, #7
 8002722:	4032      	ands	r2, r6
 8002724:	2a00      	cmp	r2, #0
 8002726:	d000      	beq.n	800272a <__aeabi_dsub+0x31a>
 8002728:	e6e4      	b.n	80024f4 <__aeabi_dsub+0xe4>
 800272a:	4b0b      	ldr	r3, [pc, #44]	; (8002758 <__aeabi_dsub+0x348>)
 800272c:	08f6      	lsrs	r6, r6, #3
 800272e:	074f      	lsls	r7, r1, #29
 8002730:	4337      	orrs	r7, r6
 8002732:	08ca      	lsrs	r2, r1, #3
 8002734:	429d      	cmp	r5, r3
 8002736:	d000      	beq.n	800273a <__aeabi_dsub+0x32a>
 8002738:	e790      	b.n	800265c <__aeabi_dsub+0x24c>
 800273a:	003b      	movs	r3, r7
 800273c:	4313      	orrs	r3, r2
 800273e:	d100      	bne.n	8002742 <__aeabi_dsub+0x332>
 8002740:	e1a6      	b.n	8002a90 <__aeabi_dsub+0x680>
 8002742:	2380      	movs	r3, #128	; 0x80
 8002744:	031b      	lsls	r3, r3, #12
 8002746:	431a      	orrs	r2, r3
 8002748:	0312      	lsls	r2, r2, #12
 800274a:	0b12      	lsrs	r2, r2, #12
 800274c:	4d02      	ldr	r5, [pc, #8]	; (8002758 <__aeabi_dsub+0x348>)
 800274e:	e789      	b.n	8002664 <__aeabi_dsub+0x254>
 8002750:	0015      	movs	r5, r2
 8002752:	2200      	movs	r2, #0
 8002754:	2700      	movs	r7, #0
 8002756:	e785      	b.n	8002664 <__aeabi_dsub+0x254>
 8002758:	000007ff 	.word	0x000007ff
 800275c:	ff7fffff 	.word	0xff7fffff
 8002760:	800fffff 	.word	0x800fffff
 8002764:	2e00      	cmp	r6, #0
 8002766:	d000      	beq.n	800276a <__aeabi_dsub+0x35a>
 8002768:	e0c7      	b.n	80028fa <__aeabi_dsub+0x4ea>
 800276a:	1c6b      	adds	r3, r5, #1
 800276c:	055e      	lsls	r6, r3, #21
 800276e:	0d76      	lsrs	r6, r6, #21
 8002770:	2e01      	cmp	r6, #1
 8002772:	dc00      	bgt.n	8002776 <__aeabi_dsub+0x366>
 8002774:	e0f0      	b.n	8002958 <__aeabi_dsub+0x548>
 8002776:	4dc8      	ldr	r5, [pc, #800]	; (8002a98 <__aeabi_dsub+0x688>)
 8002778:	42ab      	cmp	r3, r5
 800277a:	d100      	bne.n	800277e <__aeabi_dsub+0x36e>
 800277c:	e0b9      	b.n	80028f2 <__aeabi_dsub+0x4e2>
 800277e:	1885      	adds	r5, r0, r2
 8002780:	000a      	movs	r2, r1
 8002782:	4285      	cmp	r5, r0
 8002784:	4189      	sbcs	r1, r1
 8002786:	4462      	add	r2, ip
 8002788:	4249      	negs	r1, r1
 800278a:	1851      	adds	r1, r2, r1
 800278c:	2207      	movs	r2, #7
 800278e:	07ce      	lsls	r6, r1, #31
 8002790:	086d      	lsrs	r5, r5, #1
 8002792:	432e      	orrs	r6, r5
 8002794:	0849      	lsrs	r1, r1, #1
 8002796:	4032      	ands	r2, r6
 8002798:	001d      	movs	r5, r3
 800279a:	e6a9      	b.n	80024f0 <__aeabi_dsub+0xe0>
 800279c:	49bf      	ldr	r1, [pc, #764]	; (8002a9c <__aeabi_dsub+0x68c>)
 800279e:	1aed      	subs	r5, r5, r3
 80027a0:	4011      	ands	r1, r2
 80027a2:	2207      	movs	r2, #7
 80027a4:	4032      	ands	r2, r6
 80027a6:	e6a3      	b.n	80024f0 <__aeabi_dsub+0xe0>
 80027a8:	0032      	movs	r2, r6
 80027aa:	3828      	subs	r0, #40	; 0x28
 80027ac:	4082      	lsls	r2, r0
 80027ae:	2600      	movs	r6, #0
 80027b0:	e686      	b.n	80024c0 <__aeabi_dsub+0xb0>
 80027b2:	0030      	movs	r0, r6
 80027b4:	f000 faba 	bl	8002d2c <__clzsi2>
 80027b8:	3020      	adds	r0, #32
 80027ba:	e673      	b.n	80024a4 <__aeabi_dsub+0x94>
 80027bc:	4663      	mov	r3, ip
 80027be:	4313      	orrs	r3, r2
 80027c0:	1e5a      	subs	r2, r3, #1
 80027c2:	4193      	sbcs	r3, r2
 80027c4:	1ac6      	subs	r6, r0, r3
 80027c6:	42b0      	cmp	r0, r6
 80027c8:	4180      	sbcs	r0, r0
 80027ca:	4240      	negs	r0, r0
 80027cc:	1a09      	subs	r1, r1, r0
 80027ce:	e65c      	b.n	800248a <__aeabi_dsub+0x7a>
 80027d0:	000e      	movs	r6, r1
 80027d2:	4667      	mov	r7, ip
 80027d4:	4306      	orrs	r6, r0
 80027d6:	4317      	orrs	r7, r2
 80027d8:	2d00      	cmp	r5, #0
 80027da:	d15e      	bne.n	800289a <__aeabi_dsub+0x48a>
 80027dc:	2e00      	cmp	r6, #0
 80027de:	d000      	beq.n	80027e2 <__aeabi_dsub+0x3d2>
 80027e0:	e0f3      	b.n	80029ca <__aeabi_dsub+0x5ba>
 80027e2:	2f00      	cmp	r7, #0
 80027e4:	d100      	bne.n	80027e8 <__aeabi_dsub+0x3d8>
 80027e6:	e11e      	b.n	8002a26 <__aeabi_dsub+0x616>
 80027e8:	465c      	mov	r4, fp
 80027ea:	4661      	mov	r1, ip
 80027ec:	4691      	mov	r9, r2
 80027ee:	e72c      	b.n	800264a <__aeabi_dsub+0x23a>
 80027f0:	4fa9      	ldr	r7, [pc, #676]	; (8002a98 <__aeabi_dsub+0x688>)
 80027f2:	42be      	cmp	r6, r7
 80027f4:	d07b      	beq.n	80028ee <__aeabi_dsub+0x4de>
 80027f6:	001e      	movs	r6, r3
 80027f8:	e6f1      	b.n	80025de <__aeabi_dsub+0x1ce>
 80027fa:	0010      	movs	r0, r2
 80027fc:	3d1f      	subs	r5, #31
 80027fe:	40e8      	lsrs	r0, r5
 8002800:	2b20      	cmp	r3, #32
 8002802:	d003      	beq.n	800280c <__aeabi_dsub+0x3fc>
 8002804:	2140      	movs	r1, #64	; 0x40
 8002806:	1acb      	subs	r3, r1, r3
 8002808:	409a      	lsls	r2, r3
 800280a:	4316      	orrs	r6, r2
 800280c:	1e73      	subs	r3, r6, #1
 800280e:	419e      	sbcs	r6, r3
 8002810:	2207      	movs	r2, #7
 8002812:	4306      	orrs	r6, r0
 8002814:	4032      	ands	r2, r6
 8002816:	2100      	movs	r1, #0
 8002818:	2500      	movs	r5, #0
 800281a:	e783      	b.n	8002724 <__aeabi_dsub+0x314>
 800281c:	1a16      	subs	r6, r2, r0
 800281e:	4663      	mov	r3, ip
 8002820:	42b2      	cmp	r2, r6
 8002822:	4180      	sbcs	r0, r0
 8002824:	1a59      	subs	r1, r3, r1
 8002826:	4240      	negs	r0, r0
 8002828:	1a0b      	subs	r3, r1, r0
 800282a:	4698      	mov	r8, r3
 800282c:	465c      	mov	r4, fp
 800282e:	e632      	b.n	8002496 <__aeabi_dsub+0x86>
 8002830:	2e1f      	cmp	r6, #31
 8002832:	dd00      	ble.n	8002836 <__aeabi_dsub+0x426>
 8002834:	e0ab      	b.n	800298e <__aeabi_dsub+0x57e>
 8002836:	2720      	movs	r7, #32
 8002838:	1bbb      	subs	r3, r7, r6
 800283a:	469a      	mov	sl, r3
 800283c:	4663      	mov	r3, ip
 800283e:	4657      	mov	r7, sl
 8002840:	40bb      	lsls	r3, r7
 8002842:	4699      	mov	r9, r3
 8002844:	0013      	movs	r3, r2
 8002846:	464f      	mov	r7, r9
 8002848:	40f3      	lsrs	r3, r6
 800284a:	431f      	orrs	r7, r3
 800284c:	003b      	movs	r3, r7
 800284e:	4657      	mov	r7, sl
 8002850:	40ba      	lsls	r2, r7
 8002852:	1e57      	subs	r7, r2, #1
 8002854:	41ba      	sbcs	r2, r7
 8002856:	4313      	orrs	r3, r2
 8002858:	4662      	mov	r2, ip
 800285a:	40f2      	lsrs	r2, r6
 800285c:	1889      	adds	r1, r1, r2
 800285e:	e698      	b.n	8002592 <__aeabi_dsub+0x182>
 8002860:	2720      	movs	r7, #32
 8002862:	1bbb      	subs	r3, r7, r6
 8002864:	469a      	mov	sl, r3
 8002866:	4663      	mov	r3, ip
 8002868:	4657      	mov	r7, sl
 800286a:	40bb      	lsls	r3, r7
 800286c:	4699      	mov	r9, r3
 800286e:	0013      	movs	r3, r2
 8002870:	464f      	mov	r7, r9
 8002872:	40f3      	lsrs	r3, r6
 8002874:	431f      	orrs	r7, r3
 8002876:	003b      	movs	r3, r7
 8002878:	4657      	mov	r7, sl
 800287a:	40ba      	lsls	r2, r7
 800287c:	1e57      	subs	r7, r2, #1
 800287e:	41ba      	sbcs	r2, r7
 8002880:	4313      	orrs	r3, r2
 8002882:	4662      	mov	r2, ip
 8002884:	40f2      	lsrs	r2, r6
 8002886:	1a89      	subs	r1, r1, r2
 8002888:	e79c      	b.n	80027c4 <__aeabi_dsub+0x3b4>
 800288a:	4b83      	ldr	r3, [pc, #524]	; (8002a98 <__aeabi_dsub+0x688>)
 800288c:	429f      	cmp	r7, r3
 800288e:	d05f      	beq.n	8002950 <__aeabi_dsub+0x540>
 8002890:	2580      	movs	r5, #128	; 0x80
 8002892:	042d      	lsls	r5, r5, #16
 8002894:	4273      	negs	r3, r6
 8002896:	4329      	orrs	r1, r5
 8002898:	e720      	b.n	80026dc <__aeabi_dsub+0x2cc>
 800289a:	2e00      	cmp	r6, #0
 800289c:	d10c      	bne.n	80028b8 <__aeabi_dsub+0x4a8>
 800289e:	2f00      	cmp	r7, #0
 80028a0:	d100      	bne.n	80028a4 <__aeabi_dsub+0x494>
 80028a2:	e0d0      	b.n	8002a46 <__aeabi_dsub+0x636>
 80028a4:	465c      	mov	r4, fp
 80028a6:	4661      	mov	r1, ip
 80028a8:	4691      	mov	r9, r2
 80028aa:	4d7b      	ldr	r5, [pc, #492]	; (8002a98 <__aeabi_dsub+0x688>)
 80028ac:	e6cd      	b.n	800264a <__aeabi_dsub+0x23a>
 80028ae:	4f7a      	ldr	r7, [pc, #488]	; (8002a98 <__aeabi_dsub+0x688>)
 80028b0:	42be      	cmp	r6, r7
 80028b2:	d01c      	beq.n	80028ee <__aeabi_dsub+0x4de>
 80028b4:	001e      	movs	r6, r3
 80028b6:	e665      	b.n	8002584 <__aeabi_dsub+0x174>
 80028b8:	2f00      	cmp	r7, #0
 80028ba:	d018      	beq.n	80028ee <__aeabi_dsub+0x4de>
 80028bc:	08c0      	lsrs	r0, r0, #3
 80028be:	074e      	lsls	r6, r1, #29
 80028c0:	4306      	orrs	r6, r0
 80028c2:	2080      	movs	r0, #128	; 0x80
 80028c4:	08c9      	lsrs	r1, r1, #3
 80028c6:	0300      	lsls	r0, r0, #12
 80028c8:	4201      	tst	r1, r0
 80028ca:	d008      	beq.n	80028de <__aeabi_dsub+0x4ce>
 80028cc:	4663      	mov	r3, ip
 80028ce:	08dc      	lsrs	r4, r3, #3
 80028d0:	4204      	tst	r4, r0
 80028d2:	d104      	bne.n	80028de <__aeabi_dsub+0x4ce>
 80028d4:	0021      	movs	r1, r4
 80028d6:	46da      	mov	sl, fp
 80028d8:	08d2      	lsrs	r2, r2, #3
 80028da:	075e      	lsls	r6, r3, #29
 80028dc:	4316      	orrs	r6, r2
 80028de:	00f3      	lsls	r3, r6, #3
 80028e0:	4699      	mov	r9, r3
 80028e2:	2401      	movs	r4, #1
 80028e4:	4653      	mov	r3, sl
 80028e6:	00c9      	lsls	r1, r1, #3
 80028e8:	0f72      	lsrs	r2, r6, #29
 80028ea:	4311      	orrs	r1, r2
 80028ec:	401c      	ands	r4, r3
 80028ee:	4d6a      	ldr	r5, [pc, #424]	; (8002a98 <__aeabi_dsub+0x688>)
 80028f0:	e6ab      	b.n	800264a <__aeabi_dsub+0x23a>
 80028f2:	001d      	movs	r5, r3
 80028f4:	2200      	movs	r2, #0
 80028f6:	2700      	movs	r7, #0
 80028f8:	e6b4      	b.n	8002664 <__aeabi_dsub+0x254>
 80028fa:	2d00      	cmp	r5, #0
 80028fc:	d159      	bne.n	80029b2 <__aeabi_dsub+0x5a2>
 80028fe:	000b      	movs	r3, r1
 8002900:	4303      	orrs	r3, r0
 8002902:	d100      	bne.n	8002906 <__aeabi_dsub+0x4f6>
 8002904:	e6d6      	b.n	80026b4 <__aeabi_dsub+0x2a4>
 8002906:	1c73      	adds	r3, r6, #1
 8002908:	d100      	bne.n	800290c <__aeabi_dsub+0x4fc>
 800290a:	e0b2      	b.n	8002a72 <__aeabi_dsub+0x662>
 800290c:	4b62      	ldr	r3, [pc, #392]	; (8002a98 <__aeabi_dsub+0x688>)
 800290e:	429f      	cmp	r7, r3
 8002910:	d01e      	beq.n	8002950 <__aeabi_dsub+0x540>
 8002912:	43f3      	mvns	r3, r6
 8002914:	2b38      	cmp	r3, #56	; 0x38
 8002916:	dc6f      	bgt.n	80029f8 <__aeabi_dsub+0x5e8>
 8002918:	2b1f      	cmp	r3, #31
 800291a:	dd00      	ble.n	800291e <__aeabi_dsub+0x50e>
 800291c:	e097      	b.n	8002a4e <__aeabi_dsub+0x63e>
 800291e:	2520      	movs	r5, #32
 8002920:	000e      	movs	r6, r1
 8002922:	1aed      	subs	r5, r5, r3
 8002924:	40ae      	lsls	r6, r5
 8002926:	46b0      	mov	r8, r6
 8002928:	0006      	movs	r6, r0
 800292a:	46aa      	mov	sl, r5
 800292c:	40de      	lsrs	r6, r3
 800292e:	4645      	mov	r5, r8
 8002930:	4335      	orrs	r5, r6
 8002932:	002e      	movs	r6, r5
 8002934:	4655      	mov	r5, sl
 8002936:	40a8      	lsls	r0, r5
 8002938:	40d9      	lsrs	r1, r3
 800293a:	1e45      	subs	r5, r0, #1
 800293c:	41a8      	sbcs	r0, r5
 800293e:	448c      	add	ip, r1
 8002940:	4306      	orrs	r6, r0
 8002942:	18b6      	adds	r6, r6, r2
 8002944:	4296      	cmp	r6, r2
 8002946:	4192      	sbcs	r2, r2
 8002948:	4251      	negs	r1, r2
 800294a:	4461      	add	r1, ip
 800294c:	003d      	movs	r5, r7
 800294e:	e625      	b.n	800259c <__aeabi_dsub+0x18c>
 8002950:	003d      	movs	r5, r7
 8002952:	4661      	mov	r1, ip
 8002954:	4691      	mov	r9, r2
 8002956:	e678      	b.n	800264a <__aeabi_dsub+0x23a>
 8002958:	000b      	movs	r3, r1
 800295a:	4303      	orrs	r3, r0
 800295c:	2d00      	cmp	r5, #0
 800295e:	d000      	beq.n	8002962 <__aeabi_dsub+0x552>
 8002960:	e655      	b.n	800260e <__aeabi_dsub+0x1fe>
 8002962:	2b00      	cmp	r3, #0
 8002964:	d0f5      	beq.n	8002952 <__aeabi_dsub+0x542>
 8002966:	4663      	mov	r3, ip
 8002968:	4313      	orrs	r3, r2
 800296a:	d100      	bne.n	800296e <__aeabi_dsub+0x55e>
 800296c:	e66d      	b.n	800264a <__aeabi_dsub+0x23a>
 800296e:	1886      	adds	r6, r0, r2
 8002970:	4286      	cmp	r6, r0
 8002972:	4180      	sbcs	r0, r0
 8002974:	4461      	add	r1, ip
 8002976:	4240      	negs	r0, r0
 8002978:	1809      	adds	r1, r1, r0
 800297a:	2200      	movs	r2, #0
 800297c:	020b      	lsls	r3, r1, #8
 800297e:	d400      	bmi.n	8002982 <__aeabi_dsub+0x572>
 8002980:	e6d0      	b.n	8002724 <__aeabi_dsub+0x314>
 8002982:	4b46      	ldr	r3, [pc, #280]	; (8002a9c <__aeabi_dsub+0x68c>)
 8002984:	3501      	adds	r5, #1
 8002986:	4019      	ands	r1, r3
 8002988:	e5b2      	b.n	80024f0 <__aeabi_dsub+0xe0>
 800298a:	46b1      	mov	r9, r6
 800298c:	e65d      	b.n	800264a <__aeabi_dsub+0x23a>
 800298e:	0033      	movs	r3, r6
 8002990:	4667      	mov	r7, ip
 8002992:	3b20      	subs	r3, #32
 8002994:	40df      	lsrs	r7, r3
 8002996:	003b      	movs	r3, r7
 8002998:	2e20      	cmp	r6, #32
 800299a:	d005      	beq.n	80029a8 <__aeabi_dsub+0x598>
 800299c:	2740      	movs	r7, #64	; 0x40
 800299e:	1bbf      	subs	r7, r7, r6
 80029a0:	4666      	mov	r6, ip
 80029a2:	40be      	lsls	r6, r7
 80029a4:	4332      	orrs	r2, r6
 80029a6:	4690      	mov	r8, r2
 80029a8:	4646      	mov	r6, r8
 80029aa:	1e72      	subs	r2, r6, #1
 80029ac:	4196      	sbcs	r6, r2
 80029ae:	4333      	orrs	r3, r6
 80029b0:	e5ef      	b.n	8002592 <__aeabi_dsub+0x182>
 80029b2:	4b39      	ldr	r3, [pc, #228]	; (8002a98 <__aeabi_dsub+0x688>)
 80029b4:	429f      	cmp	r7, r3
 80029b6:	d0cb      	beq.n	8002950 <__aeabi_dsub+0x540>
 80029b8:	2580      	movs	r5, #128	; 0x80
 80029ba:	042d      	lsls	r5, r5, #16
 80029bc:	4273      	negs	r3, r6
 80029be:	4329      	orrs	r1, r5
 80029c0:	e7a8      	b.n	8002914 <__aeabi_dsub+0x504>
 80029c2:	4308      	orrs	r0, r1
 80029c4:	1e41      	subs	r1, r0, #1
 80029c6:	4188      	sbcs	r0, r1
 80029c8:	e6a2      	b.n	8002710 <__aeabi_dsub+0x300>
 80029ca:	2f00      	cmp	r7, #0
 80029cc:	d100      	bne.n	80029d0 <__aeabi_dsub+0x5c0>
 80029ce:	e63c      	b.n	800264a <__aeabi_dsub+0x23a>
 80029d0:	4663      	mov	r3, ip
 80029d2:	1a86      	subs	r6, r0, r2
 80029d4:	1acf      	subs	r7, r1, r3
 80029d6:	42b0      	cmp	r0, r6
 80029d8:	419b      	sbcs	r3, r3
 80029da:	425b      	negs	r3, r3
 80029dc:	1afb      	subs	r3, r7, r3
 80029de:	4698      	mov	r8, r3
 80029e0:	021b      	lsls	r3, r3, #8
 80029e2:	d54e      	bpl.n	8002a82 <__aeabi_dsub+0x672>
 80029e4:	1a16      	subs	r6, r2, r0
 80029e6:	4663      	mov	r3, ip
 80029e8:	42b2      	cmp	r2, r6
 80029ea:	4192      	sbcs	r2, r2
 80029ec:	1a59      	subs	r1, r3, r1
 80029ee:	4252      	negs	r2, r2
 80029f0:	1a89      	subs	r1, r1, r2
 80029f2:	465c      	mov	r4, fp
 80029f4:	2200      	movs	r2, #0
 80029f6:	e57b      	b.n	80024f0 <__aeabi_dsub+0xe0>
 80029f8:	4301      	orrs	r1, r0
 80029fa:	000e      	movs	r6, r1
 80029fc:	1e71      	subs	r1, r6, #1
 80029fe:	418e      	sbcs	r6, r1
 8002a00:	e79f      	b.n	8002942 <__aeabi_dsub+0x532>
 8002a02:	001d      	movs	r5, r3
 8002a04:	000e      	movs	r6, r1
 8002a06:	3d20      	subs	r5, #32
 8002a08:	40ee      	lsrs	r6, r5
 8002a0a:	46b0      	mov	r8, r6
 8002a0c:	2b20      	cmp	r3, #32
 8002a0e:	d004      	beq.n	8002a1a <__aeabi_dsub+0x60a>
 8002a10:	2540      	movs	r5, #64	; 0x40
 8002a12:	1aeb      	subs	r3, r5, r3
 8002a14:	4099      	lsls	r1, r3
 8002a16:	4308      	orrs	r0, r1
 8002a18:	4681      	mov	r9, r0
 8002a1a:	4648      	mov	r0, r9
 8002a1c:	4643      	mov	r3, r8
 8002a1e:	1e41      	subs	r1, r0, #1
 8002a20:	4188      	sbcs	r0, r1
 8002a22:	4318      	orrs	r0, r3
 8002a24:	e674      	b.n	8002710 <__aeabi_dsub+0x300>
 8002a26:	2200      	movs	r2, #0
 8002a28:	2400      	movs	r4, #0
 8002a2a:	e617      	b.n	800265c <__aeabi_dsub+0x24c>
 8002a2c:	1a16      	subs	r6, r2, r0
 8002a2e:	4663      	mov	r3, ip
 8002a30:	42b2      	cmp	r2, r6
 8002a32:	4192      	sbcs	r2, r2
 8002a34:	1a59      	subs	r1, r3, r1
 8002a36:	4252      	negs	r2, r2
 8002a38:	1a89      	subs	r1, r1, r2
 8002a3a:	003d      	movs	r5, r7
 8002a3c:	e525      	b.n	800248a <__aeabi_dsub+0x7a>
 8002a3e:	4661      	mov	r1, ip
 8002a40:	4691      	mov	r9, r2
 8002a42:	4d15      	ldr	r5, [pc, #84]	; (8002a98 <__aeabi_dsub+0x688>)
 8002a44:	e601      	b.n	800264a <__aeabi_dsub+0x23a>
 8002a46:	2280      	movs	r2, #128	; 0x80
 8002a48:	2400      	movs	r4, #0
 8002a4a:	0312      	lsls	r2, r2, #12
 8002a4c:	e679      	b.n	8002742 <__aeabi_dsub+0x332>
 8002a4e:	001d      	movs	r5, r3
 8002a50:	000e      	movs	r6, r1
 8002a52:	3d20      	subs	r5, #32
 8002a54:	40ee      	lsrs	r6, r5
 8002a56:	46b0      	mov	r8, r6
 8002a58:	2b20      	cmp	r3, #32
 8002a5a:	d004      	beq.n	8002a66 <__aeabi_dsub+0x656>
 8002a5c:	2540      	movs	r5, #64	; 0x40
 8002a5e:	1aeb      	subs	r3, r5, r3
 8002a60:	4099      	lsls	r1, r3
 8002a62:	4308      	orrs	r0, r1
 8002a64:	4681      	mov	r9, r0
 8002a66:	464e      	mov	r6, r9
 8002a68:	4643      	mov	r3, r8
 8002a6a:	1e71      	subs	r1, r6, #1
 8002a6c:	418e      	sbcs	r6, r1
 8002a6e:	431e      	orrs	r6, r3
 8002a70:	e767      	b.n	8002942 <__aeabi_dsub+0x532>
 8002a72:	1886      	adds	r6, r0, r2
 8002a74:	4296      	cmp	r6, r2
 8002a76:	419b      	sbcs	r3, r3
 8002a78:	4461      	add	r1, ip
 8002a7a:	425b      	negs	r3, r3
 8002a7c:	18c9      	adds	r1, r1, r3
 8002a7e:	003d      	movs	r5, r7
 8002a80:	e58c      	b.n	800259c <__aeabi_dsub+0x18c>
 8002a82:	4647      	mov	r7, r8
 8002a84:	4337      	orrs	r7, r6
 8002a86:	d0ce      	beq.n	8002a26 <__aeabi_dsub+0x616>
 8002a88:	2207      	movs	r2, #7
 8002a8a:	4641      	mov	r1, r8
 8002a8c:	4032      	ands	r2, r6
 8002a8e:	e649      	b.n	8002724 <__aeabi_dsub+0x314>
 8002a90:	2700      	movs	r7, #0
 8002a92:	003a      	movs	r2, r7
 8002a94:	e5e6      	b.n	8002664 <__aeabi_dsub+0x254>
 8002a96:	46c0      	nop			; (mov r8, r8)
 8002a98:	000007ff 	.word	0x000007ff
 8002a9c:	ff7fffff 	.word	0xff7fffff

08002aa0 <__aeabi_d2iz>:
 8002aa0:	b530      	push	{r4, r5, lr}
 8002aa2:	4d14      	ldr	r5, [pc, #80]	; (8002af4 <__aeabi_d2iz+0x54>)
 8002aa4:	030a      	lsls	r2, r1, #12
 8002aa6:	004b      	lsls	r3, r1, #1
 8002aa8:	0b12      	lsrs	r2, r2, #12
 8002aaa:	0d5b      	lsrs	r3, r3, #21
 8002aac:	0fc9      	lsrs	r1, r1, #31
 8002aae:	2400      	movs	r4, #0
 8002ab0:	42ab      	cmp	r3, r5
 8002ab2:	dd11      	ble.n	8002ad8 <__aeabi_d2iz+0x38>
 8002ab4:	4c10      	ldr	r4, [pc, #64]	; (8002af8 <__aeabi_d2iz+0x58>)
 8002ab6:	42a3      	cmp	r3, r4
 8002ab8:	dc10      	bgt.n	8002adc <__aeabi_d2iz+0x3c>
 8002aba:	2480      	movs	r4, #128	; 0x80
 8002abc:	0364      	lsls	r4, r4, #13
 8002abe:	4322      	orrs	r2, r4
 8002ac0:	4c0e      	ldr	r4, [pc, #56]	; (8002afc <__aeabi_d2iz+0x5c>)
 8002ac2:	1ae4      	subs	r4, r4, r3
 8002ac4:	2c1f      	cmp	r4, #31
 8002ac6:	dd0c      	ble.n	8002ae2 <__aeabi_d2iz+0x42>
 8002ac8:	480d      	ldr	r0, [pc, #52]	; (8002b00 <__aeabi_d2iz+0x60>)
 8002aca:	1ac3      	subs	r3, r0, r3
 8002acc:	40da      	lsrs	r2, r3
 8002ace:	0013      	movs	r3, r2
 8002ad0:	425c      	negs	r4, r3
 8002ad2:	2900      	cmp	r1, #0
 8002ad4:	d100      	bne.n	8002ad8 <__aeabi_d2iz+0x38>
 8002ad6:	001c      	movs	r4, r3
 8002ad8:	0020      	movs	r0, r4
 8002ada:	bd30      	pop	{r4, r5, pc}
 8002adc:	4b09      	ldr	r3, [pc, #36]	; (8002b04 <__aeabi_d2iz+0x64>)
 8002ade:	18cc      	adds	r4, r1, r3
 8002ae0:	e7fa      	b.n	8002ad8 <__aeabi_d2iz+0x38>
 8002ae2:	4d09      	ldr	r5, [pc, #36]	; (8002b08 <__aeabi_d2iz+0x68>)
 8002ae4:	40e0      	lsrs	r0, r4
 8002ae6:	46ac      	mov	ip, r5
 8002ae8:	4463      	add	r3, ip
 8002aea:	409a      	lsls	r2, r3
 8002aec:	0013      	movs	r3, r2
 8002aee:	4303      	orrs	r3, r0
 8002af0:	e7ee      	b.n	8002ad0 <__aeabi_d2iz+0x30>
 8002af2:	46c0      	nop			; (mov r8, r8)
 8002af4:	000003fe 	.word	0x000003fe
 8002af8:	0000041d 	.word	0x0000041d
 8002afc:	00000433 	.word	0x00000433
 8002b00:	00000413 	.word	0x00000413
 8002b04:	7fffffff 	.word	0x7fffffff
 8002b08:	fffffbed 	.word	0xfffffbed

08002b0c <__aeabi_i2d>:
 8002b0c:	b570      	push	{r4, r5, r6, lr}
 8002b0e:	2800      	cmp	r0, #0
 8002b10:	d02d      	beq.n	8002b6e <__aeabi_i2d+0x62>
 8002b12:	17c3      	asrs	r3, r0, #31
 8002b14:	18c5      	adds	r5, r0, r3
 8002b16:	405d      	eors	r5, r3
 8002b18:	0fc4      	lsrs	r4, r0, #31
 8002b1a:	0028      	movs	r0, r5
 8002b1c:	f000 f906 	bl	8002d2c <__clzsi2>
 8002b20:	4b15      	ldr	r3, [pc, #84]	; (8002b78 <__aeabi_i2d+0x6c>)
 8002b22:	1a1b      	subs	r3, r3, r0
 8002b24:	055b      	lsls	r3, r3, #21
 8002b26:	0d5b      	lsrs	r3, r3, #21
 8002b28:	280a      	cmp	r0, #10
 8002b2a:	dd15      	ble.n	8002b58 <__aeabi_i2d+0x4c>
 8002b2c:	380b      	subs	r0, #11
 8002b2e:	4085      	lsls	r5, r0
 8002b30:	2200      	movs	r2, #0
 8002b32:	032d      	lsls	r5, r5, #12
 8002b34:	0b2d      	lsrs	r5, r5, #12
 8002b36:	2100      	movs	r1, #0
 8002b38:	0010      	movs	r0, r2
 8002b3a:	032d      	lsls	r5, r5, #12
 8002b3c:	0d0a      	lsrs	r2, r1, #20
 8002b3e:	0b2d      	lsrs	r5, r5, #12
 8002b40:	0512      	lsls	r2, r2, #20
 8002b42:	432a      	orrs	r2, r5
 8002b44:	4d0d      	ldr	r5, [pc, #52]	; (8002b7c <__aeabi_i2d+0x70>)
 8002b46:	051b      	lsls	r3, r3, #20
 8002b48:	402a      	ands	r2, r5
 8002b4a:	4313      	orrs	r3, r2
 8002b4c:	005b      	lsls	r3, r3, #1
 8002b4e:	07e4      	lsls	r4, r4, #31
 8002b50:	085b      	lsrs	r3, r3, #1
 8002b52:	4323      	orrs	r3, r4
 8002b54:	0019      	movs	r1, r3
 8002b56:	bd70      	pop	{r4, r5, r6, pc}
 8002b58:	0002      	movs	r2, r0
 8002b5a:	0029      	movs	r1, r5
 8002b5c:	3215      	adds	r2, #21
 8002b5e:	4091      	lsls	r1, r2
 8002b60:	000a      	movs	r2, r1
 8002b62:	210b      	movs	r1, #11
 8002b64:	1a08      	subs	r0, r1, r0
 8002b66:	40c5      	lsrs	r5, r0
 8002b68:	032d      	lsls	r5, r5, #12
 8002b6a:	0b2d      	lsrs	r5, r5, #12
 8002b6c:	e7e3      	b.n	8002b36 <__aeabi_i2d+0x2a>
 8002b6e:	2400      	movs	r4, #0
 8002b70:	2300      	movs	r3, #0
 8002b72:	2500      	movs	r5, #0
 8002b74:	2200      	movs	r2, #0
 8002b76:	e7de      	b.n	8002b36 <__aeabi_i2d+0x2a>
 8002b78:	0000041e 	.word	0x0000041e
 8002b7c:	800fffff 	.word	0x800fffff

08002b80 <__aeabi_f2d>:
 8002b80:	0041      	lsls	r1, r0, #1
 8002b82:	0e09      	lsrs	r1, r1, #24
 8002b84:	1c4b      	adds	r3, r1, #1
 8002b86:	b570      	push	{r4, r5, r6, lr}
 8002b88:	b2db      	uxtb	r3, r3
 8002b8a:	0246      	lsls	r6, r0, #9
 8002b8c:	0a75      	lsrs	r5, r6, #9
 8002b8e:	0fc4      	lsrs	r4, r0, #31
 8002b90:	2b01      	cmp	r3, #1
 8002b92:	dd14      	ble.n	8002bbe <__aeabi_f2d+0x3e>
 8002b94:	23e0      	movs	r3, #224	; 0xe0
 8002b96:	009b      	lsls	r3, r3, #2
 8002b98:	076d      	lsls	r5, r5, #29
 8002b9a:	0b36      	lsrs	r6, r6, #12
 8002b9c:	18cb      	adds	r3, r1, r3
 8002b9e:	2100      	movs	r1, #0
 8002ba0:	0d0a      	lsrs	r2, r1, #20
 8002ba2:	0028      	movs	r0, r5
 8002ba4:	0512      	lsls	r2, r2, #20
 8002ba6:	4d1c      	ldr	r5, [pc, #112]	; (8002c18 <__aeabi_f2d+0x98>)
 8002ba8:	4332      	orrs	r2, r6
 8002baa:	055b      	lsls	r3, r3, #21
 8002bac:	402a      	ands	r2, r5
 8002bae:	085b      	lsrs	r3, r3, #1
 8002bb0:	4313      	orrs	r3, r2
 8002bb2:	005b      	lsls	r3, r3, #1
 8002bb4:	07e4      	lsls	r4, r4, #31
 8002bb6:	085b      	lsrs	r3, r3, #1
 8002bb8:	4323      	orrs	r3, r4
 8002bba:	0019      	movs	r1, r3
 8002bbc:	bd70      	pop	{r4, r5, r6, pc}
 8002bbe:	2900      	cmp	r1, #0
 8002bc0:	d114      	bne.n	8002bec <__aeabi_f2d+0x6c>
 8002bc2:	2d00      	cmp	r5, #0
 8002bc4:	d01e      	beq.n	8002c04 <__aeabi_f2d+0x84>
 8002bc6:	0028      	movs	r0, r5
 8002bc8:	f000 f8b0 	bl	8002d2c <__clzsi2>
 8002bcc:	280a      	cmp	r0, #10
 8002bce:	dc1c      	bgt.n	8002c0a <__aeabi_f2d+0x8a>
 8002bd0:	230b      	movs	r3, #11
 8002bd2:	002a      	movs	r2, r5
 8002bd4:	1a1b      	subs	r3, r3, r0
 8002bd6:	40da      	lsrs	r2, r3
 8002bd8:	0003      	movs	r3, r0
 8002bda:	3315      	adds	r3, #21
 8002bdc:	409d      	lsls	r5, r3
 8002bde:	4b0f      	ldr	r3, [pc, #60]	; (8002c1c <__aeabi_f2d+0x9c>)
 8002be0:	0312      	lsls	r2, r2, #12
 8002be2:	1a1b      	subs	r3, r3, r0
 8002be4:	055b      	lsls	r3, r3, #21
 8002be6:	0b16      	lsrs	r6, r2, #12
 8002be8:	0d5b      	lsrs	r3, r3, #21
 8002bea:	e7d8      	b.n	8002b9e <__aeabi_f2d+0x1e>
 8002bec:	2d00      	cmp	r5, #0
 8002bee:	d006      	beq.n	8002bfe <__aeabi_f2d+0x7e>
 8002bf0:	0b32      	lsrs	r2, r6, #12
 8002bf2:	2680      	movs	r6, #128	; 0x80
 8002bf4:	0336      	lsls	r6, r6, #12
 8002bf6:	076d      	lsls	r5, r5, #29
 8002bf8:	4316      	orrs	r6, r2
 8002bfa:	4b09      	ldr	r3, [pc, #36]	; (8002c20 <__aeabi_f2d+0xa0>)
 8002bfc:	e7cf      	b.n	8002b9e <__aeabi_f2d+0x1e>
 8002bfe:	4b08      	ldr	r3, [pc, #32]	; (8002c20 <__aeabi_f2d+0xa0>)
 8002c00:	2600      	movs	r6, #0
 8002c02:	e7cc      	b.n	8002b9e <__aeabi_f2d+0x1e>
 8002c04:	2300      	movs	r3, #0
 8002c06:	2600      	movs	r6, #0
 8002c08:	e7c9      	b.n	8002b9e <__aeabi_f2d+0x1e>
 8002c0a:	0003      	movs	r3, r0
 8002c0c:	002a      	movs	r2, r5
 8002c0e:	3b0b      	subs	r3, #11
 8002c10:	409a      	lsls	r2, r3
 8002c12:	2500      	movs	r5, #0
 8002c14:	e7e3      	b.n	8002bde <__aeabi_f2d+0x5e>
 8002c16:	46c0      	nop			; (mov r8, r8)
 8002c18:	800fffff 	.word	0x800fffff
 8002c1c:	00000389 	.word	0x00000389
 8002c20:	000007ff 	.word	0x000007ff

08002c24 <__aeabi_d2f>:
 8002c24:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002c26:	004c      	lsls	r4, r1, #1
 8002c28:	0d64      	lsrs	r4, r4, #21
 8002c2a:	030b      	lsls	r3, r1, #12
 8002c2c:	1c62      	adds	r2, r4, #1
 8002c2e:	0a5b      	lsrs	r3, r3, #9
 8002c30:	0f46      	lsrs	r6, r0, #29
 8002c32:	0552      	lsls	r2, r2, #21
 8002c34:	0fc9      	lsrs	r1, r1, #31
 8002c36:	431e      	orrs	r6, r3
 8002c38:	00c5      	lsls	r5, r0, #3
 8002c3a:	0d52      	lsrs	r2, r2, #21
 8002c3c:	2a01      	cmp	r2, #1
 8002c3e:	dd29      	ble.n	8002c94 <__aeabi_d2f+0x70>
 8002c40:	4b37      	ldr	r3, [pc, #220]	; (8002d20 <__aeabi_d2f+0xfc>)
 8002c42:	18e7      	adds	r7, r4, r3
 8002c44:	2ffe      	cmp	r7, #254	; 0xfe
 8002c46:	dc1c      	bgt.n	8002c82 <__aeabi_d2f+0x5e>
 8002c48:	2f00      	cmp	r7, #0
 8002c4a:	dd3b      	ble.n	8002cc4 <__aeabi_d2f+0xa0>
 8002c4c:	0180      	lsls	r0, r0, #6
 8002c4e:	1e43      	subs	r3, r0, #1
 8002c50:	4198      	sbcs	r0, r3
 8002c52:	2207      	movs	r2, #7
 8002c54:	00f3      	lsls	r3, r6, #3
 8002c56:	0f6d      	lsrs	r5, r5, #29
 8002c58:	4303      	orrs	r3, r0
 8002c5a:	432b      	orrs	r3, r5
 8002c5c:	401a      	ands	r2, r3
 8002c5e:	2a00      	cmp	r2, #0
 8002c60:	d004      	beq.n	8002c6c <__aeabi_d2f+0x48>
 8002c62:	220f      	movs	r2, #15
 8002c64:	401a      	ands	r2, r3
 8002c66:	2a04      	cmp	r2, #4
 8002c68:	d000      	beq.n	8002c6c <__aeabi_d2f+0x48>
 8002c6a:	3304      	adds	r3, #4
 8002c6c:	2280      	movs	r2, #128	; 0x80
 8002c6e:	04d2      	lsls	r2, r2, #19
 8002c70:	401a      	ands	r2, r3
 8002c72:	d024      	beq.n	8002cbe <__aeabi_d2f+0x9a>
 8002c74:	3701      	adds	r7, #1
 8002c76:	b2fa      	uxtb	r2, r7
 8002c78:	2fff      	cmp	r7, #255	; 0xff
 8002c7a:	d002      	beq.n	8002c82 <__aeabi_d2f+0x5e>
 8002c7c:	019b      	lsls	r3, r3, #6
 8002c7e:	0a58      	lsrs	r0, r3, #9
 8002c80:	e001      	b.n	8002c86 <__aeabi_d2f+0x62>
 8002c82:	22ff      	movs	r2, #255	; 0xff
 8002c84:	2000      	movs	r0, #0
 8002c86:	0240      	lsls	r0, r0, #9
 8002c88:	05d2      	lsls	r2, r2, #23
 8002c8a:	0a40      	lsrs	r0, r0, #9
 8002c8c:	07c9      	lsls	r1, r1, #31
 8002c8e:	4310      	orrs	r0, r2
 8002c90:	4308      	orrs	r0, r1
 8002c92:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002c94:	4335      	orrs	r5, r6
 8002c96:	2c00      	cmp	r4, #0
 8002c98:	d104      	bne.n	8002ca4 <__aeabi_d2f+0x80>
 8002c9a:	2d00      	cmp	r5, #0
 8002c9c:	d10a      	bne.n	8002cb4 <__aeabi_d2f+0x90>
 8002c9e:	2200      	movs	r2, #0
 8002ca0:	2000      	movs	r0, #0
 8002ca2:	e7f0      	b.n	8002c86 <__aeabi_d2f+0x62>
 8002ca4:	2d00      	cmp	r5, #0
 8002ca6:	d0ec      	beq.n	8002c82 <__aeabi_d2f+0x5e>
 8002ca8:	2080      	movs	r0, #128	; 0x80
 8002caa:	03c0      	lsls	r0, r0, #15
 8002cac:	4330      	orrs	r0, r6
 8002cae:	22ff      	movs	r2, #255	; 0xff
 8002cb0:	e7e9      	b.n	8002c86 <__aeabi_d2f+0x62>
 8002cb2:	2400      	movs	r4, #0
 8002cb4:	2300      	movs	r3, #0
 8002cb6:	025b      	lsls	r3, r3, #9
 8002cb8:	0a58      	lsrs	r0, r3, #9
 8002cba:	b2e2      	uxtb	r2, r4
 8002cbc:	e7e3      	b.n	8002c86 <__aeabi_d2f+0x62>
 8002cbe:	08db      	lsrs	r3, r3, #3
 8002cc0:	003c      	movs	r4, r7
 8002cc2:	e7f8      	b.n	8002cb6 <__aeabi_d2f+0x92>
 8002cc4:	003b      	movs	r3, r7
 8002cc6:	3317      	adds	r3, #23
 8002cc8:	dbf3      	blt.n	8002cb2 <__aeabi_d2f+0x8e>
 8002cca:	2380      	movs	r3, #128	; 0x80
 8002ccc:	041b      	lsls	r3, r3, #16
 8002cce:	4333      	orrs	r3, r6
 8002cd0:	261e      	movs	r6, #30
 8002cd2:	1bf6      	subs	r6, r6, r7
 8002cd4:	2e1f      	cmp	r6, #31
 8002cd6:	dd14      	ble.n	8002d02 <__aeabi_d2f+0xde>
 8002cd8:	2202      	movs	r2, #2
 8002cda:	4252      	negs	r2, r2
 8002cdc:	1bd7      	subs	r7, r2, r7
 8002cde:	001a      	movs	r2, r3
 8002ce0:	40fa      	lsrs	r2, r7
 8002ce2:	0017      	movs	r7, r2
 8002ce4:	2e20      	cmp	r6, #32
 8002ce6:	d004      	beq.n	8002cf2 <__aeabi_d2f+0xce>
 8002ce8:	4a0e      	ldr	r2, [pc, #56]	; (8002d24 <__aeabi_d2f+0x100>)
 8002cea:	4694      	mov	ip, r2
 8002cec:	4464      	add	r4, ip
 8002cee:	40a3      	lsls	r3, r4
 8002cf0:	431d      	orrs	r5, r3
 8002cf2:	002b      	movs	r3, r5
 8002cf4:	1e5d      	subs	r5, r3, #1
 8002cf6:	41ab      	sbcs	r3, r5
 8002cf8:	2207      	movs	r2, #7
 8002cfa:	433b      	orrs	r3, r7
 8002cfc:	401a      	ands	r2, r3
 8002cfe:	2700      	movs	r7, #0
 8002d00:	e7ad      	b.n	8002c5e <__aeabi_d2f+0x3a>
 8002d02:	4a09      	ldr	r2, [pc, #36]	; (8002d28 <__aeabi_d2f+0x104>)
 8002d04:	0028      	movs	r0, r5
 8002d06:	18a2      	adds	r2, r4, r2
 8002d08:	4095      	lsls	r5, r2
 8002d0a:	4093      	lsls	r3, r2
 8002d0c:	1e6c      	subs	r4, r5, #1
 8002d0e:	41a5      	sbcs	r5, r4
 8002d10:	40f0      	lsrs	r0, r6
 8002d12:	2207      	movs	r2, #7
 8002d14:	432b      	orrs	r3, r5
 8002d16:	4303      	orrs	r3, r0
 8002d18:	401a      	ands	r2, r3
 8002d1a:	2700      	movs	r7, #0
 8002d1c:	e79f      	b.n	8002c5e <__aeabi_d2f+0x3a>
 8002d1e:	46c0      	nop			; (mov r8, r8)
 8002d20:	fffffc80 	.word	0xfffffc80
 8002d24:	fffffca2 	.word	0xfffffca2
 8002d28:	fffffc82 	.word	0xfffffc82

08002d2c <__clzsi2>:
 8002d2c:	211c      	movs	r1, #28
 8002d2e:	2301      	movs	r3, #1
 8002d30:	041b      	lsls	r3, r3, #16
 8002d32:	4298      	cmp	r0, r3
 8002d34:	d301      	bcc.n	8002d3a <__clzsi2+0xe>
 8002d36:	0c00      	lsrs	r0, r0, #16
 8002d38:	3910      	subs	r1, #16
 8002d3a:	0a1b      	lsrs	r3, r3, #8
 8002d3c:	4298      	cmp	r0, r3
 8002d3e:	d301      	bcc.n	8002d44 <__clzsi2+0x18>
 8002d40:	0a00      	lsrs	r0, r0, #8
 8002d42:	3908      	subs	r1, #8
 8002d44:	091b      	lsrs	r3, r3, #4
 8002d46:	4298      	cmp	r0, r3
 8002d48:	d301      	bcc.n	8002d4e <__clzsi2+0x22>
 8002d4a:	0900      	lsrs	r0, r0, #4
 8002d4c:	3904      	subs	r1, #4
 8002d4e:	a202      	add	r2, pc, #8	; (adr r2, 8002d58 <__clzsi2+0x2c>)
 8002d50:	5c10      	ldrb	r0, [r2, r0]
 8002d52:	1840      	adds	r0, r0, r1
 8002d54:	4770      	bx	lr
 8002d56:	46c0      	nop			; (mov r8, r8)
 8002d58:	02020304 	.word	0x02020304
 8002d5c:	01010101 	.word	0x01010101
	...

08002d68 <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 8002d68:	b580      	push	{r7, lr}
 8002d6a:	b084      	sub	sp, #16
 8002d6c:	af00      	add	r7, sp, #0
 8002d6e:	60f8      	str	r0, [r7, #12]
 8002d70:	60b9      	str	r1, [r7, #8]
 8002d72:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 8002d74:	68fb      	ldr	r3, [r7, #12]
 8002d76:	4a06      	ldr	r2, [pc, #24]	; (8002d90 <vApplicationGetIdleTaskMemory+0x28>)
 8002d78:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 8002d7a:	68bb      	ldr	r3, [r7, #8]
 8002d7c:	4a05      	ldr	r2, [pc, #20]	; (8002d94 <vApplicationGetIdleTaskMemory+0x2c>)
 8002d7e:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 8002d80:	687b      	ldr	r3, [r7, #4]
 8002d82:	2280      	movs	r2, #128	; 0x80
 8002d84:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 8002d86:	46c0      	nop			; (mov r8, r8)
 8002d88:	46bd      	mov	sp, r7
 8002d8a:	b004      	add	sp, #16
 8002d8c:	bd80      	pop	{r7, pc}
 8002d8e:	46c0      	nop			; (mov r8, r8)
 8002d90:	20000094 	.word	0x20000094
 8002d94:	200000e8 	.word	0x200000e8

08002d98 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8002d98:	b5b0      	push	{r4, r5, r7, lr}
 8002d9a:	b0a4      	sub	sp, #144	; 0x90
 8002d9c:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8002d9e:	f001 faeb 	bl	8004378 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8002da2:	f000 f8a9 	bl	8002ef8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8002da6:	f000 fb79 	bl	800349c <MX_GPIO_Init>
  MX_ADC_Init();
 8002daa:	f000 f8fd 	bl	8002fa8 <MX_ADC_Init>
  MX_TIM2_Init();
 8002dae:	f000 f957 	bl	8003060 <MX_TIM2_Init>
  MX_TIM3_Init();
 8002db2:	f000 f9c7 	bl	8003144 <MX_TIM3_Init>
  MX_TIM16_Init();
 8002db6:	f000 fa39 	bl	800322c <MX_TIM16_Init>
  MX_TIM17_Init();
 8002dba:	f000 fabb 	bl	8003334 <MX_TIM17_Init>
  MX_USART1_UART_Init();
 8002dbe:	f000 fb3d 	bl	800343c <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_1);
 8002dc2:	4b3f      	ldr	r3, [pc, #252]	; (8002ec0 <main+0x128>)
 8002dc4:	2100      	movs	r1, #0
 8002dc6:	0018      	movs	r0, r3
 8002dc8:	f003 f840 	bl	8005e4c <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_2);
 8002dcc:	4b3c      	ldr	r3, [pc, #240]	; (8002ec0 <main+0x128>)
 8002dce:	2104      	movs	r1, #4
 8002dd0:	0018      	movs	r0, r3
 8002dd2:	f003 f83b 	bl	8005e4c <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_3);
 8002dd6:	4b3a      	ldr	r3, [pc, #232]	; (8002ec0 <main+0x128>)
 8002dd8:	2108      	movs	r1, #8
 8002dda:	0018      	movs	r0, r3
 8002ddc:	f003 f836 	bl	8005e4c <HAL_TIM_PWM_Start>

  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_2);
 8002de0:	4b38      	ldr	r3, [pc, #224]	; (8002ec4 <main+0x12c>)
 8002de2:	2104      	movs	r1, #4
 8002de4:	0018      	movs	r0, r3
 8002de6:	f003 f831 	bl	8005e4c <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_3);
 8002dea:	4b36      	ldr	r3, [pc, #216]	; (8002ec4 <main+0x12c>)
 8002dec:	2108      	movs	r1, #8
 8002dee:	0018      	movs	r0, r3
 8002df0:	f003 f82c 	bl	8005e4c <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_4);
 8002df4:	4b33      	ldr	r3, [pc, #204]	; (8002ec4 <main+0x12c>)
 8002df6:	210c      	movs	r1, #12
 8002df8:	0018      	movs	r0, r3
 8002dfa:	f003 f827 	bl	8005e4c <HAL_TIM_PWM_Start>

  HAL_TIM_PWM_Start(&htim16, TIM_CHANNEL_1);
 8002dfe:	4b32      	ldr	r3, [pc, #200]	; (8002ec8 <main+0x130>)
 8002e00:	2100      	movs	r1, #0
 8002e02:	0018      	movs	r0, r3
 8002e04:	f003 f822 	bl	8005e4c <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim17, TIM_CHANNEL_1);
 8002e08:	4b30      	ldr	r3, [pc, #192]	; (8002ecc <main+0x134>)
 8002e0a:	2100      	movs	r1, #0
 8002e0c:	0018      	movs	r0, r3
 8002e0e:	f003 f81d 	bl	8005e4c <HAL_TIM_PWM_Start>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of defaultTask */
  osThreadDef(defaultTask, StartDefaultTask, osPriorityNormal, 0, 128);
 8002e12:	2174      	movs	r1, #116	; 0x74
 8002e14:	187b      	adds	r3, r7, r1
 8002e16:	4a2e      	ldr	r2, [pc, #184]	; (8002ed0 <main+0x138>)
 8002e18:	ca31      	ldmia	r2!, {r0, r4, r5}
 8002e1a:	c331      	stmia	r3!, {r0, r4, r5}
 8002e1c:	ca31      	ldmia	r2!, {r0, r4, r5}
 8002e1e:	c331      	stmia	r3!, {r0, r4, r5}
 8002e20:	6812      	ldr	r2, [r2, #0]
 8002e22:	601a      	str	r2, [r3, #0]
  defaultTaskHandle = osThreadCreate(osThread(defaultTask), NULL);
 8002e24:	187b      	adds	r3, r7, r1
 8002e26:	2100      	movs	r1, #0
 8002e28:	0018      	movs	r0, r3
 8002e2a:	f004 fb75 	bl	8007518 <osThreadCreate>
 8002e2e:	0002      	movs	r2, r0
 8002e30:	4b28      	ldr	r3, [pc, #160]	; (8002ed4 <main+0x13c>)
 8002e32:	601a      	str	r2, [r3, #0]

  /* definition and creation of waterSensor */
  osThreadDef(waterSensor, StartWaterSensor, osPriorityNormal, 0, 128);
 8002e34:	2158      	movs	r1, #88	; 0x58
 8002e36:	187b      	adds	r3, r7, r1
 8002e38:	4a27      	ldr	r2, [pc, #156]	; (8002ed8 <main+0x140>)
 8002e3a:	ca31      	ldmia	r2!, {r0, r4, r5}
 8002e3c:	c331      	stmia	r3!, {r0, r4, r5}
 8002e3e:	ca31      	ldmia	r2!, {r0, r4, r5}
 8002e40:	c331      	stmia	r3!, {r0, r4, r5}
 8002e42:	6812      	ldr	r2, [r2, #0]
 8002e44:	601a      	str	r2, [r3, #0]
  waterSensorHandle = osThreadCreate(osThread(waterSensor), NULL);
 8002e46:	187b      	adds	r3, r7, r1
 8002e48:	2100      	movs	r1, #0
 8002e4a:	0018      	movs	r0, r3
 8002e4c:	f004 fb64 	bl	8007518 <osThreadCreate>
 8002e50:	0002      	movs	r2, r0
 8002e52:	4b22      	ldr	r3, [pc, #136]	; (8002edc <main+0x144>)
 8002e54:	601a      	str	r2, [r3, #0]

  /* definition and creation of lightSensor */
  osThreadDef(lightSensor, StartLightSensor, osPriorityNormal, 0, 128);
 8002e56:	213c      	movs	r1, #60	; 0x3c
 8002e58:	187b      	adds	r3, r7, r1
 8002e5a:	4a21      	ldr	r2, [pc, #132]	; (8002ee0 <main+0x148>)
 8002e5c:	ca31      	ldmia	r2!, {r0, r4, r5}
 8002e5e:	c331      	stmia	r3!, {r0, r4, r5}
 8002e60:	ca31      	ldmia	r2!, {r0, r4, r5}
 8002e62:	c331      	stmia	r3!, {r0, r4, r5}
 8002e64:	6812      	ldr	r2, [r2, #0]
 8002e66:	601a      	str	r2, [r3, #0]
  lightSensorHandle = osThreadCreate(osThread(lightSensor), NULL);
 8002e68:	187b      	adds	r3, r7, r1
 8002e6a:	2100      	movs	r1, #0
 8002e6c:	0018      	movs	r0, r3
 8002e6e:	f004 fb53 	bl	8007518 <osThreadCreate>
 8002e72:	0002      	movs	r2, r0
 8002e74:	4b1b      	ldr	r3, [pc, #108]	; (8002ee4 <main+0x14c>)
 8002e76:	601a      	str	r2, [r3, #0]

  /* definition and creation of distanceSensor */
  osThreadDef(distanceSensor, StartDistSensor, osPriorityNormal, 0, 128);
 8002e78:	2120      	movs	r1, #32
 8002e7a:	187b      	adds	r3, r7, r1
 8002e7c:	4a1a      	ldr	r2, [pc, #104]	; (8002ee8 <main+0x150>)
 8002e7e:	ca31      	ldmia	r2!, {r0, r4, r5}
 8002e80:	c331      	stmia	r3!, {r0, r4, r5}
 8002e82:	ca31      	ldmia	r2!, {r0, r4, r5}
 8002e84:	c331      	stmia	r3!, {r0, r4, r5}
 8002e86:	6812      	ldr	r2, [r2, #0]
 8002e88:	601a      	str	r2, [r3, #0]
  distanceSensorHandle = osThreadCreate(osThread(distanceSensor), NULL);
 8002e8a:	187b      	adds	r3, r7, r1
 8002e8c:	2100      	movs	r1, #0
 8002e8e:	0018      	movs	r0, r3
 8002e90:	f004 fb42 	bl	8007518 <osThreadCreate>
 8002e94:	0002      	movs	r2, r0
 8002e96:	4b15      	ldr	r3, [pc, #84]	; (8002eec <main+0x154>)
 8002e98:	601a      	str	r2, [r3, #0]

  /* definition and creation of button */
  osThreadDef(button, StartButton, osPriorityIdle, 0, 128);
 8002e9a:	1d3b      	adds	r3, r7, #4
 8002e9c:	4a14      	ldr	r2, [pc, #80]	; (8002ef0 <main+0x158>)
 8002e9e:	ca13      	ldmia	r2!, {r0, r1, r4}
 8002ea0:	c313      	stmia	r3!, {r0, r1, r4}
 8002ea2:	ca13      	ldmia	r2!, {r0, r1, r4}
 8002ea4:	c313      	stmia	r3!, {r0, r1, r4}
 8002ea6:	6812      	ldr	r2, [r2, #0]
 8002ea8:	601a      	str	r2, [r3, #0]
  buttonHandle = osThreadCreate(osThread(button), NULL);
 8002eaa:	1d3b      	adds	r3, r7, #4
 8002eac:	2100      	movs	r1, #0
 8002eae:	0018      	movs	r0, r3
 8002eb0:	f004 fb32 	bl	8007518 <osThreadCreate>
 8002eb4:	0002      	movs	r2, r0
 8002eb6:	4b0f      	ldr	r3, [pc, #60]	; (8002ef4 <main+0x15c>)
 8002eb8:	601a      	str	r2, [r3, #0]
  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  /* USER CODE END RTOS_THREADS */

  /* Start scheduler */
  osKernelStart();
 8002eba:	f004 fb25 	bl	8007508 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
	while (1)
 8002ebe:	e7fe      	b.n	8002ebe <main+0x126>
 8002ec0:	20001490 	.word	0x20001490
 8002ec4:	200013a8 	.word	0x200013a8
 8002ec8:	20001510 	.word	0x20001510
 8002ecc:	20001364 	.word	0x20001364
 8002ed0:	08009294 	.word	0x08009294
 8002ed4:	20001340 	.word	0x20001340
 8002ed8:	080092bc 	.word	0x080092bc
 8002edc:	200013a4 	.word	0x200013a4
 8002ee0:	080092e4 	.word	0x080092e4
 8002ee4:	20001360 	.word	0x20001360
 8002ee8:	08009310 	.word	0x08009310
 8002eec:	2000148c 	.word	0x2000148c
 8002ef0:	08009334 	.word	0x08009334
 8002ef4:	20001468 	.word	0x20001468

08002ef8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8002ef8:	b590      	push	{r4, r7, lr}
 8002efa:	b097      	sub	sp, #92	; 0x5c
 8002efc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8002efe:	2428      	movs	r4, #40	; 0x28
 8002f00:	193b      	adds	r3, r7, r4
 8002f02:	0018      	movs	r0, r3
 8002f04:	2330      	movs	r3, #48	; 0x30
 8002f06:	001a      	movs	r2, r3
 8002f08:	2100      	movs	r1, #0
 8002f0a:	f005 fbb1 	bl	8008670 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8002f0e:	2318      	movs	r3, #24
 8002f10:	18fb      	adds	r3, r7, r3
 8002f12:	0018      	movs	r0, r3
 8002f14:	2310      	movs	r3, #16
 8002f16:	001a      	movs	r2, r3
 8002f18:	2100      	movs	r1, #0
 8002f1a:	f005 fba9 	bl	8008670 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8002f1e:	1d3b      	adds	r3, r7, #4
 8002f20:	0018      	movs	r0, r3
 8002f22:	2314      	movs	r3, #20
 8002f24:	001a      	movs	r2, r3
 8002f26:	2100      	movs	r1, #0
 8002f28:	f005 fba2 	bl	8008670 <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8002f2c:	0021      	movs	r1, r4
 8002f2e:	187b      	adds	r3, r7, r1
 8002f30:	2202      	movs	r2, #2
 8002f32:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8002f34:	187b      	adds	r3, r7, r1
 8002f36:	2201      	movs	r2, #1
 8002f38:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8002f3a:	187b      	adds	r3, r7, r1
 8002f3c:	2210      	movs	r2, #16
 8002f3e:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8002f40:	187b      	adds	r3, r7, r1
 8002f42:	2200      	movs	r2, #0
 8002f44:	621a      	str	r2, [r3, #32]
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8002f46:	187b      	adds	r3, r7, r1
 8002f48:	0018      	movs	r0, r3
 8002f4a:	f002 f98f 	bl	800526c <HAL_RCC_OscConfig>
 8002f4e:	1e03      	subs	r3, r0, #0
 8002f50:	d001      	beq.n	8002f56 <SystemClock_Config+0x5e>
  {
    Error_Handler();
 8002f52:	f000 ff6f 	bl	8003e34 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8002f56:	2118      	movs	r1, #24
 8002f58:	187b      	adds	r3, r7, r1
 8002f5a:	2207      	movs	r2, #7
 8002f5c:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8002f5e:	187b      	adds	r3, r7, r1
 8002f60:	2200      	movs	r2, #0
 8002f62:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8002f64:	187b      	adds	r3, r7, r1
 8002f66:	2200      	movs	r2, #0
 8002f68:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8002f6a:	187b      	adds	r3, r7, r1
 8002f6c:	2200      	movs	r2, #0
 8002f6e:	60da      	str	r2, [r3, #12]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8002f70:	187b      	adds	r3, r7, r1
 8002f72:	2100      	movs	r1, #0
 8002f74:	0018      	movs	r0, r3
 8002f76:	f002 fc95 	bl	80058a4 <HAL_RCC_ClockConfig>
 8002f7a:	1e03      	subs	r3, r0, #0
 8002f7c:	d001      	beq.n	8002f82 <SystemClock_Config+0x8a>
  {
    Error_Handler();
 8002f7e:	f000 ff59 	bl	8003e34 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8002f82:	1d3b      	adds	r3, r7, #4
 8002f84:	2201      	movs	r2, #1
 8002f86:	601a      	str	r2, [r3, #0]
  PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK1;
 8002f88:	1d3b      	adds	r3, r7, #4
 8002f8a:	2200      	movs	r2, #0
 8002f8c:	609a      	str	r2, [r3, #8]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8002f8e:	1d3b      	adds	r3, r7, #4
 8002f90:	0018      	movs	r0, r3
 8002f92:	f002 fe03 	bl	8005b9c <HAL_RCCEx_PeriphCLKConfig>
 8002f96:	1e03      	subs	r3, r0, #0
 8002f98:	d001      	beq.n	8002f9e <SystemClock_Config+0xa6>
  {
    Error_Handler();
 8002f9a:	f000 ff4b 	bl	8003e34 <Error_Handler>
  }
}
 8002f9e:	46c0      	nop			; (mov r8, r8)
 8002fa0:	46bd      	mov	sp, r7
 8002fa2:	b017      	add	sp, #92	; 0x5c
 8002fa4:	bd90      	pop	{r4, r7, pc}
	...

08002fa8 <MX_ADC_Init>:
  * @brief ADC Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC_Init(void)
{
 8002fa8:	b580      	push	{r7, lr}
 8002faa:	b084      	sub	sp, #16
 8002fac:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC_Init 0 */

  /* USER CODE END ADC_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8002fae:	1d3b      	adds	r3, r7, #4
 8002fb0:	0018      	movs	r0, r3
 8002fb2:	230c      	movs	r3, #12
 8002fb4:	001a      	movs	r2, r3
 8002fb6:	2100      	movs	r1, #0
 8002fb8:	f005 fb5a 	bl	8008670 <memset>
  /* USER CODE BEGIN ADC_Init 1 */

  /* USER CODE END ADC_Init 1 */
  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc.Instance = ADC1;
 8002fbc:	4b26      	ldr	r3, [pc, #152]	; (8003058 <MX_ADC_Init+0xb0>)
 8002fbe:	4a27      	ldr	r2, [pc, #156]	; (800305c <MX_ADC_Init+0xb4>)
 8002fc0:	601a      	str	r2, [r3, #0]
  hadc.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 8002fc2:	4b25      	ldr	r3, [pc, #148]	; (8003058 <MX_ADC_Init+0xb0>)
 8002fc4:	2280      	movs	r2, #128	; 0x80
 8002fc6:	05d2      	lsls	r2, r2, #23
 8002fc8:	605a      	str	r2, [r3, #4]
  hadc.Init.Resolution = ADC_RESOLUTION_12B;
 8002fca:	4b23      	ldr	r3, [pc, #140]	; (8003058 <MX_ADC_Init+0xb0>)
 8002fcc:	2200      	movs	r2, #0
 8002fce:	609a      	str	r2, [r3, #8]
  hadc.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8002fd0:	4b21      	ldr	r3, [pc, #132]	; (8003058 <MX_ADC_Init+0xb0>)
 8002fd2:	2200      	movs	r2, #0
 8002fd4:	60da      	str	r2, [r3, #12]
  hadc.Init.ScanConvMode = ADC_SCAN_DIRECTION_FORWARD;
 8002fd6:	4b20      	ldr	r3, [pc, #128]	; (8003058 <MX_ADC_Init+0xb0>)
 8002fd8:	2201      	movs	r2, #1
 8002fda:	611a      	str	r2, [r3, #16]
  hadc.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8002fdc:	4b1e      	ldr	r3, [pc, #120]	; (8003058 <MX_ADC_Init+0xb0>)
 8002fde:	2204      	movs	r2, #4
 8002fe0:	615a      	str	r2, [r3, #20]
  hadc.Init.LowPowerAutoWait = DISABLE;
 8002fe2:	4b1d      	ldr	r3, [pc, #116]	; (8003058 <MX_ADC_Init+0xb0>)
 8002fe4:	2200      	movs	r2, #0
 8002fe6:	761a      	strb	r2, [r3, #24]
  hadc.Init.LowPowerAutoPowerOff = DISABLE;
 8002fe8:	4b1b      	ldr	r3, [pc, #108]	; (8003058 <MX_ADC_Init+0xb0>)
 8002fea:	2200      	movs	r2, #0
 8002fec:	765a      	strb	r2, [r3, #25]
  hadc.Init.ContinuousConvMode = ENABLE;
 8002fee:	4b1a      	ldr	r3, [pc, #104]	; (8003058 <MX_ADC_Init+0xb0>)
 8002ff0:	2201      	movs	r2, #1
 8002ff2:	769a      	strb	r2, [r3, #26]
  hadc.Init.DiscontinuousConvMode = DISABLE;
 8002ff4:	4b18      	ldr	r3, [pc, #96]	; (8003058 <MX_ADC_Init+0xb0>)
 8002ff6:	2200      	movs	r2, #0
 8002ff8:	76da      	strb	r2, [r3, #27]
  hadc.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8002ffa:	4b17      	ldr	r3, [pc, #92]	; (8003058 <MX_ADC_Init+0xb0>)
 8002ffc:	22c2      	movs	r2, #194	; 0xc2
 8002ffe:	32ff      	adds	r2, #255	; 0xff
 8003000:	61da      	str	r2, [r3, #28]
  hadc.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8003002:	4b15      	ldr	r3, [pc, #84]	; (8003058 <MX_ADC_Init+0xb0>)
 8003004:	2200      	movs	r2, #0
 8003006:	621a      	str	r2, [r3, #32]
  hadc.Init.DMAContinuousRequests = DISABLE;
 8003008:	4b13      	ldr	r3, [pc, #76]	; (8003058 <MX_ADC_Init+0xb0>)
 800300a:	2224      	movs	r2, #36	; 0x24
 800300c:	2100      	movs	r1, #0
 800300e:	5499      	strb	r1, [r3, r2]
  hadc.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8003010:	4b11      	ldr	r3, [pc, #68]	; (8003058 <MX_ADC_Init+0xb0>)
 8003012:	2201      	movs	r2, #1
 8003014:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_ADC_Init(&hadc) != HAL_OK)
 8003016:	4b10      	ldr	r3, [pc, #64]	; (8003058 <MX_ADC_Init+0xb0>)
 8003018:	0018      	movs	r0, r3
 800301a:	f001 f9dd 	bl	80043d8 <HAL_ADC_Init>
 800301e:	1e03      	subs	r3, r0, #0
 8003020:	d001      	beq.n	8003026 <MX_ADC_Init+0x7e>
  {
    Error_Handler();
 8003022:	f000 ff07 	bl	8003e34 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel to be converted.
  */
  sConfig.Channel = ADC_CHANNEL_4;
 8003026:	1d3b      	adds	r3, r7, #4
 8003028:	2204      	movs	r2, #4
 800302a:	601a      	str	r2, [r3, #0]
  sConfig.Rank = ADC_RANK_CHANNEL_NUMBER;
 800302c:	1d3b      	adds	r3, r7, #4
 800302e:	2280      	movs	r2, #128	; 0x80
 8003030:	0152      	lsls	r2, r2, #5
 8003032:	605a      	str	r2, [r3, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 8003034:	1d3b      	adds	r3, r7, #4
 8003036:	2280      	movs	r2, #128	; 0x80
 8003038:	0552      	lsls	r2, r2, #21
 800303a:	609a      	str	r2, [r3, #8]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 800303c:	1d3a      	adds	r2, r7, #4
 800303e:	4b06      	ldr	r3, [pc, #24]	; (8003058 <MX_ADC_Init+0xb0>)
 8003040:	0011      	movs	r1, r2
 8003042:	0018      	movs	r0, r3
 8003044:	f001 fc3a 	bl	80048bc <HAL_ADC_ConfigChannel>
 8003048:	1e03      	subs	r3, r0, #0
 800304a:	d001      	beq.n	8003050 <MX_ADC_Init+0xa8>
  {
    Error_Handler();
 800304c:	f000 fef2 	bl	8003e34 <Error_Handler>
  }
  /* USER CODE BEGIN ADC_Init 2 */

  /* USER CODE END ADC_Init 2 */

}
 8003050:	46c0      	nop			; (mov r8, r8)
 8003052:	46bd      	mov	sp, r7
 8003054:	b004      	add	sp, #16
 8003056:	bd80      	pop	{r7, pc}
 8003058:	200014d0 	.word	0x200014d0
 800305c:	40012400 	.word	0x40012400

08003060 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8003060:	b580      	push	{r7, lr}
 8003062:	b08a      	sub	sp, #40	; 0x28
 8003064:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8003066:	2320      	movs	r3, #32
 8003068:	18fb      	adds	r3, r7, r3
 800306a:	0018      	movs	r0, r3
 800306c:	2308      	movs	r3, #8
 800306e:	001a      	movs	r2, r3
 8003070:	2100      	movs	r1, #0
 8003072:	f005 fafd 	bl	8008670 <memset>
  TIM_OC_InitTypeDef sConfigOC = {0};
 8003076:	1d3b      	adds	r3, r7, #4
 8003078:	0018      	movs	r0, r3
 800307a:	231c      	movs	r3, #28
 800307c:	001a      	movs	r2, r3
 800307e:	2100      	movs	r1, #0
 8003080:	f005 faf6 	bl	8008670 <memset>

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8003084:	4b2e      	ldr	r3, [pc, #184]	; (8003140 <MX_TIM2_Init+0xe0>)
 8003086:	2280      	movs	r2, #128	; 0x80
 8003088:	05d2      	lsls	r2, r2, #23
 800308a:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 64;
 800308c:	4b2c      	ldr	r3, [pc, #176]	; (8003140 <MX_TIM2_Init+0xe0>)
 800308e:	2240      	movs	r2, #64	; 0x40
 8003090:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003092:	4b2b      	ldr	r3, [pc, #172]	; (8003140 <MX_TIM2_Init+0xe0>)
 8003094:	2200      	movs	r2, #0
 8003096:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 255;
 8003098:	4b29      	ldr	r3, [pc, #164]	; (8003140 <MX_TIM2_Init+0xe0>)
 800309a:	22ff      	movs	r2, #255	; 0xff
 800309c:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800309e:	4b28      	ldr	r3, [pc, #160]	; (8003140 <MX_TIM2_Init+0xe0>)
 80030a0:	2200      	movs	r2, #0
 80030a2:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80030a4:	4b26      	ldr	r3, [pc, #152]	; (8003140 <MX_TIM2_Init+0xe0>)
 80030a6:	2200      	movs	r2, #0
 80030a8:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 80030aa:	4b25      	ldr	r3, [pc, #148]	; (8003140 <MX_TIM2_Init+0xe0>)
 80030ac:	0018      	movs	r0, r3
 80030ae:	f002 fea1 	bl	8005df4 <HAL_TIM_PWM_Init>
 80030b2:	1e03      	subs	r3, r0, #0
 80030b4:	d001      	beq.n	80030ba <MX_TIM2_Init+0x5a>
  {
    Error_Handler();
 80030b6:	f000 febd 	bl	8003e34 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80030ba:	2120      	movs	r1, #32
 80030bc:	187b      	adds	r3, r7, r1
 80030be:	2200      	movs	r2, #0
 80030c0:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80030c2:	187b      	adds	r3, r7, r1
 80030c4:	2200      	movs	r2, #0
 80030c6:	605a      	str	r2, [r3, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80030c8:	187a      	adds	r2, r7, r1
 80030ca:	4b1d      	ldr	r3, [pc, #116]	; (8003140 <MX_TIM2_Init+0xe0>)
 80030cc:	0011      	movs	r1, r2
 80030ce:	0018      	movs	r0, r3
 80030d0:	f003 fb96 	bl	8006800 <HAL_TIMEx_MasterConfigSynchronization>
 80030d4:	1e03      	subs	r3, r0, #0
 80030d6:	d001      	beq.n	80030dc <MX_TIM2_Init+0x7c>
  {
    Error_Handler();
 80030d8:	f000 feac 	bl	8003e34 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80030dc:	1d3b      	adds	r3, r7, #4
 80030de:	2260      	movs	r2, #96	; 0x60
 80030e0:	601a      	str	r2, [r3, #0]
  sConfigOC.Pulse = 2;
 80030e2:	1d3b      	adds	r3, r7, #4
 80030e4:	2202      	movs	r2, #2
 80030e6:	605a      	str	r2, [r3, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80030e8:	1d3b      	adds	r3, r7, #4
 80030ea:	2200      	movs	r2, #0
 80030ec:	609a      	str	r2, [r3, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80030ee:	1d3b      	adds	r3, r7, #4
 80030f0:	2200      	movs	r2, #0
 80030f2:	611a      	str	r2, [r3, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80030f4:	1d39      	adds	r1, r7, #4
 80030f6:	4b12      	ldr	r3, [pc, #72]	; (8003140 <MX_TIM2_Init+0xe0>)
 80030f8:	2200      	movs	r2, #0
 80030fa:	0018      	movs	r0, r3
 80030fc:	f003 f808 	bl	8006110 <HAL_TIM_PWM_ConfigChannel>
 8003100:	1e03      	subs	r3, r0, #0
 8003102:	d001      	beq.n	8003108 <MX_TIM2_Init+0xa8>
  {
    Error_Handler();
 8003104:	f000 fe96 	bl	8003e34 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8003108:	1d39      	adds	r1, r7, #4
 800310a:	4b0d      	ldr	r3, [pc, #52]	; (8003140 <MX_TIM2_Init+0xe0>)
 800310c:	2204      	movs	r2, #4
 800310e:	0018      	movs	r0, r3
 8003110:	f002 fffe 	bl	8006110 <HAL_TIM_PWM_ConfigChannel>
 8003114:	1e03      	subs	r3, r0, #0
 8003116:	d001      	beq.n	800311c <MX_TIM2_Init+0xbc>
  {
    Error_Handler();
 8003118:	f000 fe8c 	bl	8003e34 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 800311c:	1d39      	adds	r1, r7, #4
 800311e:	4b08      	ldr	r3, [pc, #32]	; (8003140 <MX_TIM2_Init+0xe0>)
 8003120:	2208      	movs	r2, #8
 8003122:	0018      	movs	r0, r3
 8003124:	f002 fff4 	bl	8006110 <HAL_TIM_PWM_ConfigChannel>
 8003128:	1e03      	subs	r3, r0, #0
 800312a:	d001      	beq.n	8003130 <MX_TIM2_Init+0xd0>
  {
    Error_Handler();
 800312c:	f000 fe82 	bl	8003e34 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 8003130:	4b03      	ldr	r3, [pc, #12]	; (8003140 <MX_TIM2_Init+0xe0>)
 8003132:	0018      	movs	r0, r3
 8003134:	f000 ff54 	bl	8003fe0 <HAL_TIM_MspPostInit>

}
 8003138:	46c0      	nop			; (mov r8, r8)
 800313a:	46bd      	mov	sp, r7
 800313c:	b00a      	add	sp, #40	; 0x28
 800313e:	bd80      	pop	{r7, pc}
 8003140:	20001490 	.word	0x20001490

08003144 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8003144:	b580      	push	{r7, lr}
 8003146:	b08a      	sub	sp, #40	; 0x28
 8003148:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800314a:	2320      	movs	r3, #32
 800314c:	18fb      	adds	r3, r7, r3
 800314e:	0018      	movs	r0, r3
 8003150:	2308      	movs	r3, #8
 8003152:	001a      	movs	r2, r3
 8003154:	2100      	movs	r1, #0
 8003156:	f005 fa8b 	bl	8008670 <memset>
  TIM_OC_InitTypeDef sConfigOC = {0};
 800315a:	1d3b      	adds	r3, r7, #4
 800315c:	0018      	movs	r0, r3
 800315e:	231c      	movs	r3, #28
 8003160:	001a      	movs	r2, r3
 8003162:	2100      	movs	r1, #0
 8003164:	f005 fa84 	bl	8008670 <memset>

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8003168:	4b2e      	ldr	r3, [pc, #184]	; (8003224 <MX_TIM3_Init+0xe0>)
 800316a:	4a2f      	ldr	r2, [pc, #188]	; (8003228 <MX_TIM3_Init+0xe4>)
 800316c:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 64;
 800316e:	4b2d      	ldr	r3, [pc, #180]	; (8003224 <MX_TIM3_Init+0xe0>)
 8003170:	2240      	movs	r2, #64	; 0x40
 8003172:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003174:	4b2b      	ldr	r3, [pc, #172]	; (8003224 <MX_TIM3_Init+0xe0>)
 8003176:	2200      	movs	r2, #0
 8003178:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 255;
 800317a:	4b2a      	ldr	r3, [pc, #168]	; (8003224 <MX_TIM3_Init+0xe0>)
 800317c:	22ff      	movs	r2, #255	; 0xff
 800317e:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8003180:	4b28      	ldr	r3, [pc, #160]	; (8003224 <MX_TIM3_Init+0xe0>)
 8003182:	2200      	movs	r2, #0
 8003184:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8003186:	4b27      	ldr	r3, [pc, #156]	; (8003224 <MX_TIM3_Init+0xe0>)
 8003188:	2200      	movs	r2, #0
 800318a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 800318c:	4b25      	ldr	r3, [pc, #148]	; (8003224 <MX_TIM3_Init+0xe0>)
 800318e:	0018      	movs	r0, r3
 8003190:	f002 fe30 	bl	8005df4 <HAL_TIM_PWM_Init>
 8003194:	1e03      	subs	r3, r0, #0
 8003196:	d001      	beq.n	800319c <MX_TIM3_Init+0x58>
  {
    Error_Handler();
 8003198:	f000 fe4c 	bl	8003e34 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800319c:	2120      	movs	r1, #32
 800319e:	187b      	adds	r3, r7, r1
 80031a0:	2200      	movs	r2, #0
 80031a2:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80031a4:	187b      	adds	r3, r7, r1
 80031a6:	2200      	movs	r2, #0
 80031a8:	605a      	str	r2, [r3, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 80031aa:	187a      	adds	r2, r7, r1
 80031ac:	4b1d      	ldr	r3, [pc, #116]	; (8003224 <MX_TIM3_Init+0xe0>)
 80031ae:	0011      	movs	r1, r2
 80031b0:	0018      	movs	r0, r3
 80031b2:	f003 fb25 	bl	8006800 <HAL_TIMEx_MasterConfigSynchronization>
 80031b6:	1e03      	subs	r3, r0, #0
 80031b8:	d001      	beq.n	80031be <MX_TIM3_Init+0x7a>
  {
    Error_Handler();
 80031ba:	f000 fe3b 	bl	8003e34 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80031be:	1d3b      	adds	r3, r7, #4
 80031c0:	2260      	movs	r2, #96	; 0x60
 80031c2:	601a      	str	r2, [r3, #0]
  sConfigOC.Pulse = 2;
 80031c4:	1d3b      	adds	r3, r7, #4
 80031c6:	2202      	movs	r2, #2
 80031c8:	605a      	str	r2, [r3, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80031ca:	1d3b      	adds	r3, r7, #4
 80031cc:	2200      	movs	r2, #0
 80031ce:	609a      	str	r2, [r3, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80031d0:	1d3b      	adds	r3, r7, #4
 80031d2:	2200      	movs	r2, #0
 80031d4:	611a      	str	r2, [r3, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 80031d6:	1d39      	adds	r1, r7, #4
 80031d8:	4b12      	ldr	r3, [pc, #72]	; (8003224 <MX_TIM3_Init+0xe0>)
 80031da:	2204      	movs	r2, #4
 80031dc:	0018      	movs	r0, r3
 80031de:	f002 ff97 	bl	8006110 <HAL_TIM_PWM_ConfigChannel>
 80031e2:	1e03      	subs	r3, r0, #0
 80031e4:	d001      	beq.n	80031ea <MX_TIM3_Init+0xa6>
  {
    Error_Handler();
 80031e6:	f000 fe25 	bl	8003e34 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 80031ea:	1d39      	adds	r1, r7, #4
 80031ec:	4b0d      	ldr	r3, [pc, #52]	; (8003224 <MX_TIM3_Init+0xe0>)
 80031ee:	2208      	movs	r2, #8
 80031f0:	0018      	movs	r0, r3
 80031f2:	f002 ff8d 	bl	8006110 <HAL_TIM_PWM_ConfigChannel>
 80031f6:	1e03      	subs	r3, r0, #0
 80031f8:	d001      	beq.n	80031fe <MX_TIM3_Init+0xba>
  {
    Error_Handler();
 80031fa:	f000 fe1b 	bl	8003e34 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 80031fe:	1d39      	adds	r1, r7, #4
 8003200:	4b08      	ldr	r3, [pc, #32]	; (8003224 <MX_TIM3_Init+0xe0>)
 8003202:	220c      	movs	r2, #12
 8003204:	0018      	movs	r0, r3
 8003206:	f002 ff83 	bl	8006110 <HAL_TIM_PWM_ConfigChannel>
 800320a:	1e03      	subs	r3, r0, #0
 800320c:	d001      	beq.n	8003212 <MX_TIM3_Init+0xce>
  {
    Error_Handler();
 800320e:	f000 fe11 	bl	8003e34 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8003212:	4b04      	ldr	r3, [pc, #16]	; (8003224 <MX_TIM3_Init+0xe0>)
 8003214:	0018      	movs	r0, r3
 8003216:	f000 fee3 	bl	8003fe0 <HAL_TIM_MspPostInit>

}
 800321a:	46c0      	nop			; (mov r8, r8)
 800321c:	46bd      	mov	sp, r7
 800321e:	b00a      	add	sp, #40	; 0x28
 8003220:	bd80      	pop	{r7, pc}
 8003222:	46c0      	nop			; (mov r8, r8)
 8003224:	200013a8 	.word	0x200013a8
 8003228:	40000400 	.word	0x40000400

0800322c <MX_TIM16_Init>:
  * @brief TIM16 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM16_Init(void)
{
 800322c:	b580      	push	{r7, lr}
 800322e:	b090      	sub	sp, #64	; 0x40
 8003230:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM16_Init 0 */

  /* USER CODE END TIM16_Init 0 */

  TIM_OC_InitTypeDef sConfigOC = {0};
 8003232:	2324      	movs	r3, #36	; 0x24
 8003234:	18fb      	adds	r3, r7, r3
 8003236:	0018      	movs	r0, r3
 8003238:	231c      	movs	r3, #28
 800323a:	001a      	movs	r2, r3
 800323c:	2100      	movs	r1, #0
 800323e:	f005 fa17 	bl	8008670 <memset>
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8003242:	1d3b      	adds	r3, r7, #4
 8003244:	0018      	movs	r0, r3
 8003246:	2320      	movs	r3, #32
 8003248:	001a      	movs	r2, r3
 800324a:	2100      	movs	r1, #0
 800324c:	f005 fa10 	bl	8008670 <memset>

  /* USER CODE BEGIN TIM16_Init 1 */

  /* USER CODE END TIM16_Init 1 */
  htim16.Instance = TIM16;
 8003250:	4b36      	ldr	r3, [pc, #216]	; (800332c <MX_TIM16_Init+0x100>)
 8003252:	4a37      	ldr	r2, [pc, #220]	; (8003330 <MX_TIM16_Init+0x104>)
 8003254:	601a      	str	r2, [r3, #0]
  htim16.Init.Prescaler = 64;
 8003256:	4b35      	ldr	r3, [pc, #212]	; (800332c <MX_TIM16_Init+0x100>)
 8003258:	2240      	movs	r2, #64	; 0x40
 800325a:	605a      	str	r2, [r3, #4]
  htim16.Init.CounterMode = TIM_COUNTERMODE_UP;
 800325c:	4b33      	ldr	r3, [pc, #204]	; (800332c <MX_TIM16_Init+0x100>)
 800325e:	2200      	movs	r2, #0
 8003260:	609a      	str	r2, [r3, #8]
  htim16.Init.Period = 255;
 8003262:	4b32      	ldr	r3, [pc, #200]	; (800332c <MX_TIM16_Init+0x100>)
 8003264:	22ff      	movs	r2, #255	; 0xff
 8003266:	60da      	str	r2, [r3, #12]
  htim16.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8003268:	4b30      	ldr	r3, [pc, #192]	; (800332c <MX_TIM16_Init+0x100>)
 800326a:	2200      	movs	r2, #0
 800326c:	611a      	str	r2, [r3, #16]
  htim16.Init.RepetitionCounter = 0;
 800326e:	4b2f      	ldr	r3, [pc, #188]	; (800332c <MX_TIM16_Init+0x100>)
 8003270:	2200      	movs	r2, #0
 8003272:	615a      	str	r2, [r3, #20]
  htim16.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8003274:	4b2d      	ldr	r3, [pc, #180]	; (800332c <MX_TIM16_Init+0x100>)
 8003276:	2200      	movs	r2, #0
 8003278:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim16) != HAL_OK)
 800327a:	4b2c      	ldr	r3, [pc, #176]	; (800332c <MX_TIM16_Init+0x100>)
 800327c:	0018      	movs	r0, r3
 800327e:	f002 fd6b 	bl	8005d58 <HAL_TIM_Base_Init>
 8003282:	1e03      	subs	r3, r0, #0
 8003284:	d001      	beq.n	800328a <MX_TIM16_Init+0x5e>
  {
    Error_Handler();
 8003286:	f000 fdd5 	bl	8003e34 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim16) != HAL_OK)
 800328a:	4b28      	ldr	r3, [pc, #160]	; (800332c <MX_TIM16_Init+0x100>)
 800328c:	0018      	movs	r0, r3
 800328e:	f002 fdb1 	bl	8005df4 <HAL_TIM_PWM_Init>
 8003292:	1e03      	subs	r3, r0, #0
 8003294:	d001      	beq.n	800329a <MX_TIM16_Init+0x6e>
  {
    Error_Handler();
 8003296:	f000 fdcd 	bl	8003e34 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800329a:	2124      	movs	r1, #36	; 0x24
 800329c:	187b      	adds	r3, r7, r1
 800329e:	2260      	movs	r2, #96	; 0x60
 80032a0:	601a      	str	r2, [r3, #0]
  sConfigOC.Pulse = 2;
 80032a2:	187b      	adds	r3, r7, r1
 80032a4:	2202      	movs	r2, #2
 80032a6:	605a      	str	r2, [r3, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80032a8:	187b      	adds	r3, r7, r1
 80032aa:	2200      	movs	r2, #0
 80032ac:	609a      	str	r2, [r3, #8]
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 80032ae:	187b      	adds	r3, r7, r1
 80032b0:	2200      	movs	r2, #0
 80032b2:	60da      	str	r2, [r3, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80032b4:	187b      	adds	r3, r7, r1
 80032b6:	2200      	movs	r2, #0
 80032b8:	611a      	str	r2, [r3, #16]
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 80032ba:	187b      	adds	r3, r7, r1
 80032bc:	2200      	movs	r2, #0
 80032be:	615a      	str	r2, [r3, #20]
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 80032c0:	187b      	adds	r3, r7, r1
 80032c2:	2200      	movs	r2, #0
 80032c4:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_ConfigChannel(&htim16, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80032c6:	1879      	adds	r1, r7, r1
 80032c8:	4b18      	ldr	r3, [pc, #96]	; (800332c <MX_TIM16_Init+0x100>)
 80032ca:	2200      	movs	r2, #0
 80032cc:	0018      	movs	r0, r3
 80032ce:	f002 ff1f 	bl	8006110 <HAL_TIM_PWM_ConfigChannel>
 80032d2:	1e03      	subs	r3, r0, #0
 80032d4:	d001      	beq.n	80032da <MX_TIM16_Init+0xae>
  {
    Error_Handler();
 80032d6:	f000 fdad 	bl	8003e34 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 80032da:	1d3b      	adds	r3, r7, #4
 80032dc:	2200      	movs	r2, #0
 80032de:	601a      	str	r2, [r3, #0]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 80032e0:	1d3b      	adds	r3, r7, #4
 80032e2:	2200      	movs	r2, #0
 80032e4:	605a      	str	r2, [r3, #4]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 80032e6:	1d3b      	adds	r3, r7, #4
 80032e8:	2200      	movs	r2, #0
 80032ea:	609a      	str	r2, [r3, #8]
  sBreakDeadTimeConfig.DeadTime = 0;
 80032ec:	1d3b      	adds	r3, r7, #4
 80032ee:	2200      	movs	r2, #0
 80032f0:	60da      	str	r2, [r3, #12]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 80032f2:	1d3b      	adds	r3, r7, #4
 80032f4:	2200      	movs	r2, #0
 80032f6:	611a      	str	r2, [r3, #16]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 80032f8:	1d3b      	adds	r3, r7, #4
 80032fa:	2280      	movs	r2, #128	; 0x80
 80032fc:	0192      	lsls	r2, r2, #6
 80032fe:	615a      	str	r2, [r3, #20]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8003300:	1d3b      	adds	r3, r7, #4
 8003302:	2200      	movs	r2, #0
 8003304:	61da      	str	r2, [r3, #28]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim16, &sBreakDeadTimeConfig) != HAL_OK)
 8003306:	1d3a      	adds	r2, r7, #4
 8003308:	4b08      	ldr	r3, [pc, #32]	; (800332c <MX_TIM16_Init+0x100>)
 800330a:	0011      	movs	r1, r2
 800330c:	0018      	movs	r0, r3
 800330e:	f003 fad5 	bl	80068bc <HAL_TIMEx_ConfigBreakDeadTime>
 8003312:	1e03      	subs	r3, r0, #0
 8003314:	d001      	beq.n	800331a <MX_TIM16_Init+0xee>
  {
    Error_Handler();
 8003316:	f000 fd8d 	bl	8003e34 <Error_Handler>
  }
  /* USER CODE BEGIN TIM16_Init 2 */

  /* USER CODE END TIM16_Init 2 */
  HAL_TIM_MspPostInit(&htim16);
 800331a:	4b04      	ldr	r3, [pc, #16]	; (800332c <MX_TIM16_Init+0x100>)
 800331c:	0018      	movs	r0, r3
 800331e:	f000 fe5f 	bl	8003fe0 <HAL_TIM_MspPostInit>

}
 8003322:	46c0      	nop			; (mov r8, r8)
 8003324:	46bd      	mov	sp, r7
 8003326:	b010      	add	sp, #64	; 0x40
 8003328:	bd80      	pop	{r7, pc}
 800332a:	46c0      	nop			; (mov r8, r8)
 800332c:	20001510 	.word	0x20001510
 8003330:	40014400 	.word	0x40014400

08003334 <MX_TIM17_Init>:
  * @brief TIM17 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM17_Init(void)
{
 8003334:	b580      	push	{r7, lr}
 8003336:	b090      	sub	sp, #64	; 0x40
 8003338:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM17_Init 0 */

  /* USER CODE END TIM17_Init 0 */

  TIM_OC_InitTypeDef sConfigOC = {0};
 800333a:	2324      	movs	r3, #36	; 0x24
 800333c:	18fb      	adds	r3, r7, r3
 800333e:	0018      	movs	r0, r3
 8003340:	231c      	movs	r3, #28
 8003342:	001a      	movs	r2, r3
 8003344:	2100      	movs	r1, #0
 8003346:	f005 f993 	bl	8008670 <memset>
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 800334a:	1d3b      	adds	r3, r7, #4
 800334c:	0018      	movs	r0, r3
 800334e:	2320      	movs	r3, #32
 8003350:	001a      	movs	r2, r3
 8003352:	2100      	movs	r1, #0
 8003354:	f005 f98c 	bl	8008670 <memset>

  /* USER CODE BEGIN TIM17_Init 1 */

  /* USER CODE END TIM17_Init 1 */
  htim17.Instance = TIM17;
 8003358:	4b36      	ldr	r3, [pc, #216]	; (8003434 <MX_TIM17_Init+0x100>)
 800335a:	4a37      	ldr	r2, [pc, #220]	; (8003438 <MX_TIM17_Init+0x104>)
 800335c:	601a      	str	r2, [r3, #0]
  htim17.Init.Prescaler = 64;
 800335e:	4b35      	ldr	r3, [pc, #212]	; (8003434 <MX_TIM17_Init+0x100>)
 8003360:	2240      	movs	r2, #64	; 0x40
 8003362:	605a      	str	r2, [r3, #4]
  htim17.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003364:	4b33      	ldr	r3, [pc, #204]	; (8003434 <MX_TIM17_Init+0x100>)
 8003366:	2200      	movs	r2, #0
 8003368:	609a      	str	r2, [r3, #8]
  htim17.Init.Period = 255;
 800336a:	4b32      	ldr	r3, [pc, #200]	; (8003434 <MX_TIM17_Init+0x100>)
 800336c:	22ff      	movs	r2, #255	; 0xff
 800336e:	60da      	str	r2, [r3, #12]
  htim17.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8003370:	4b30      	ldr	r3, [pc, #192]	; (8003434 <MX_TIM17_Init+0x100>)
 8003372:	2200      	movs	r2, #0
 8003374:	611a      	str	r2, [r3, #16]
  htim17.Init.RepetitionCounter = 0;
 8003376:	4b2f      	ldr	r3, [pc, #188]	; (8003434 <MX_TIM17_Init+0x100>)
 8003378:	2200      	movs	r2, #0
 800337a:	615a      	str	r2, [r3, #20]
  htim17.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800337c:	4b2d      	ldr	r3, [pc, #180]	; (8003434 <MX_TIM17_Init+0x100>)
 800337e:	2200      	movs	r2, #0
 8003380:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim17) != HAL_OK)
 8003382:	4b2c      	ldr	r3, [pc, #176]	; (8003434 <MX_TIM17_Init+0x100>)
 8003384:	0018      	movs	r0, r3
 8003386:	f002 fce7 	bl	8005d58 <HAL_TIM_Base_Init>
 800338a:	1e03      	subs	r3, r0, #0
 800338c:	d001      	beq.n	8003392 <MX_TIM17_Init+0x5e>
  {
    Error_Handler();
 800338e:	f000 fd51 	bl	8003e34 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim17) != HAL_OK)
 8003392:	4b28      	ldr	r3, [pc, #160]	; (8003434 <MX_TIM17_Init+0x100>)
 8003394:	0018      	movs	r0, r3
 8003396:	f002 fd2d 	bl	8005df4 <HAL_TIM_PWM_Init>
 800339a:	1e03      	subs	r3, r0, #0
 800339c:	d001      	beq.n	80033a2 <MX_TIM17_Init+0x6e>
  {
    Error_Handler();
 800339e:	f000 fd49 	bl	8003e34 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80033a2:	2124      	movs	r1, #36	; 0x24
 80033a4:	187b      	adds	r3, r7, r1
 80033a6:	2260      	movs	r2, #96	; 0x60
 80033a8:	601a      	str	r2, [r3, #0]
  sConfigOC.Pulse = 2;
 80033aa:	187b      	adds	r3, r7, r1
 80033ac:	2202      	movs	r2, #2
 80033ae:	605a      	str	r2, [r3, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80033b0:	187b      	adds	r3, r7, r1
 80033b2:	2200      	movs	r2, #0
 80033b4:	609a      	str	r2, [r3, #8]
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 80033b6:	187b      	adds	r3, r7, r1
 80033b8:	2200      	movs	r2, #0
 80033ba:	60da      	str	r2, [r3, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80033bc:	187b      	adds	r3, r7, r1
 80033be:	2200      	movs	r2, #0
 80033c0:	611a      	str	r2, [r3, #16]
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 80033c2:	187b      	adds	r3, r7, r1
 80033c4:	2200      	movs	r2, #0
 80033c6:	615a      	str	r2, [r3, #20]
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 80033c8:	187b      	adds	r3, r7, r1
 80033ca:	2200      	movs	r2, #0
 80033cc:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_ConfigChannel(&htim17, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80033ce:	1879      	adds	r1, r7, r1
 80033d0:	4b18      	ldr	r3, [pc, #96]	; (8003434 <MX_TIM17_Init+0x100>)
 80033d2:	2200      	movs	r2, #0
 80033d4:	0018      	movs	r0, r3
 80033d6:	f002 fe9b 	bl	8006110 <HAL_TIM_PWM_ConfigChannel>
 80033da:	1e03      	subs	r3, r0, #0
 80033dc:	d001      	beq.n	80033e2 <MX_TIM17_Init+0xae>
  {
    Error_Handler();
 80033de:	f000 fd29 	bl	8003e34 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 80033e2:	1d3b      	adds	r3, r7, #4
 80033e4:	2200      	movs	r2, #0
 80033e6:	601a      	str	r2, [r3, #0]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 80033e8:	1d3b      	adds	r3, r7, #4
 80033ea:	2200      	movs	r2, #0
 80033ec:	605a      	str	r2, [r3, #4]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 80033ee:	1d3b      	adds	r3, r7, #4
 80033f0:	2200      	movs	r2, #0
 80033f2:	609a      	str	r2, [r3, #8]
  sBreakDeadTimeConfig.DeadTime = 0;
 80033f4:	1d3b      	adds	r3, r7, #4
 80033f6:	2200      	movs	r2, #0
 80033f8:	60da      	str	r2, [r3, #12]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 80033fa:	1d3b      	adds	r3, r7, #4
 80033fc:	2200      	movs	r2, #0
 80033fe:	611a      	str	r2, [r3, #16]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8003400:	1d3b      	adds	r3, r7, #4
 8003402:	2280      	movs	r2, #128	; 0x80
 8003404:	0192      	lsls	r2, r2, #6
 8003406:	615a      	str	r2, [r3, #20]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8003408:	1d3b      	adds	r3, r7, #4
 800340a:	2200      	movs	r2, #0
 800340c:	61da      	str	r2, [r3, #28]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim17, &sBreakDeadTimeConfig) != HAL_OK)
 800340e:	1d3a      	adds	r2, r7, #4
 8003410:	4b08      	ldr	r3, [pc, #32]	; (8003434 <MX_TIM17_Init+0x100>)
 8003412:	0011      	movs	r1, r2
 8003414:	0018      	movs	r0, r3
 8003416:	f003 fa51 	bl	80068bc <HAL_TIMEx_ConfigBreakDeadTime>
 800341a:	1e03      	subs	r3, r0, #0
 800341c:	d001      	beq.n	8003422 <MX_TIM17_Init+0xee>
  {
    Error_Handler();
 800341e:	f000 fd09 	bl	8003e34 <Error_Handler>
  }
  /* USER CODE BEGIN TIM17_Init 2 */

  /* USER CODE END TIM17_Init 2 */
  HAL_TIM_MspPostInit(&htim17);
 8003422:	4b04      	ldr	r3, [pc, #16]	; (8003434 <MX_TIM17_Init+0x100>)
 8003424:	0018      	movs	r0, r3
 8003426:	f000 fddb 	bl	8003fe0 <HAL_TIM_MspPostInit>

}
 800342a:	46c0      	nop			; (mov r8, r8)
 800342c:	46bd      	mov	sp, r7
 800342e:	b010      	add	sp, #64	; 0x40
 8003430:	bd80      	pop	{r7, pc}
 8003432:	46c0      	nop			; (mov r8, r8)
 8003434:	20001364 	.word	0x20001364
 8003438:	40014800 	.word	0x40014800

0800343c <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 800343c:	b580      	push	{r7, lr}
 800343e:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8003440:	4b14      	ldr	r3, [pc, #80]	; (8003494 <MX_USART1_UART_Init+0x58>)
 8003442:	4a15      	ldr	r2, [pc, #84]	; (8003498 <MX_USART1_UART_Init+0x5c>)
 8003444:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 9600;
 8003446:	4b13      	ldr	r3, [pc, #76]	; (8003494 <MX_USART1_UART_Init+0x58>)
 8003448:	2296      	movs	r2, #150	; 0x96
 800344a:	0192      	lsls	r2, r2, #6
 800344c:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800344e:	4b11      	ldr	r3, [pc, #68]	; (8003494 <MX_USART1_UART_Init+0x58>)
 8003450:	2200      	movs	r2, #0
 8003452:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8003454:	4b0f      	ldr	r3, [pc, #60]	; (8003494 <MX_USART1_UART_Init+0x58>)
 8003456:	2200      	movs	r2, #0
 8003458:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800345a:	4b0e      	ldr	r3, [pc, #56]	; (8003494 <MX_USART1_UART_Init+0x58>)
 800345c:	2200      	movs	r2, #0
 800345e:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8003460:	4b0c      	ldr	r3, [pc, #48]	; (8003494 <MX_USART1_UART_Init+0x58>)
 8003462:	220c      	movs	r2, #12
 8003464:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8003466:	4b0b      	ldr	r3, [pc, #44]	; (8003494 <MX_USART1_UART_Init+0x58>)
 8003468:	2200      	movs	r2, #0
 800346a:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 800346c:	4b09      	ldr	r3, [pc, #36]	; (8003494 <MX_USART1_UART_Init+0x58>)
 800346e:	2200      	movs	r2, #0
 8003470:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8003472:	4b08      	ldr	r3, [pc, #32]	; (8003494 <MX_USART1_UART_Init+0x58>)
 8003474:	2200      	movs	r2, #0
 8003476:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8003478:	4b06      	ldr	r3, [pc, #24]	; (8003494 <MX_USART1_UART_Init+0x58>)
 800347a:	2200      	movs	r2, #0
 800347c:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 800347e:	4b05      	ldr	r3, [pc, #20]	; (8003494 <MX_USART1_UART_Init+0x58>)
 8003480:	0018      	movs	r0, r3
 8003482:	f003 fa89 	bl	8006998 <HAL_UART_Init>
 8003486:	1e03      	subs	r3, r0, #0
 8003488:	d001      	beq.n	800348e <MX_USART1_UART_Init+0x52>
  {
    Error_Handler();
 800348a:	f000 fcd3 	bl	8003e34 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 800348e:	46c0      	nop			; (mov r8, r8)
 8003490:	46bd      	mov	sp, r7
 8003492:	bd80      	pop	{r7, pc}
 8003494:	200013e8 	.word	0x200013e8
 8003498:	40013800 	.word	0x40013800

0800349c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800349c:	b590      	push	{r4, r7, lr}
 800349e:	b089      	sub	sp, #36	; 0x24
 80034a0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80034a2:	240c      	movs	r4, #12
 80034a4:	193b      	adds	r3, r7, r4
 80034a6:	0018      	movs	r0, r3
 80034a8:	2314      	movs	r3, #20
 80034aa:	001a      	movs	r2, r3
 80034ac:	2100      	movs	r1, #0
 80034ae:	f005 f8df 	bl	8008670 <memset>

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80034b2:	4b38      	ldr	r3, [pc, #224]	; (8003594 <MX_GPIO_Init+0xf8>)
 80034b4:	695a      	ldr	r2, [r3, #20]
 80034b6:	4b37      	ldr	r3, [pc, #220]	; (8003594 <MX_GPIO_Init+0xf8>)
 80034b8:	2180      	movs	r1, #128	; 0x80
 80034ba:	0309      	lsls	r1, r1, #12
 80034bc:	430a      	orrs	r2, r1
 80034be:	615a      	str	r2, [r3, #20]
 80034c0:	4b34      	ldr	r3, [pc, #208]	; (8003594 <MX_GPIO_Init+0xf8>)
 80034c2:	695a      	ldr	r2, [r3, #20]
 80034c4:	2380      	movs	r3, #128	; 0x80
 80034c6:	031b      	lsls	r3, r3, #12
 80034c8:	4013      	ands	r3, r2
 80034ca:	60bb      	str	r3, [r7, #8]
 80034cc:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80034ce:	4b31      	ldr	r3, [pc, #196]	; (8003594 <MX_GPIO_Init+0xf8>)
 80034d0:	695a      	ldr	r2, [r3, #20]
 80034d2:	4b30      	ldr	r3, [pc, #192]	; (8003594 <MX_GPIO_Init+0xf8>)
 80034d4:	2180      	movs	r1, #128	; 0x80
 80034d6:	0289      	lsls	r1, r1, #10
 80034d8:	430a      	orrs	r2, r1
 80034da:	615a      	str	r2, [r3, #20]
 80034dc:	4b2d      	ldr	r3, [pc, #180]	; (8003594 <MX_GPIO_Init+0xf8>)
 80034de:	695a      	ldr	r2, [r3, #20]
 80034e0:	2380      	movs	r3, #128	; 0x80
 80034e2:	029b      	lsls	r3, r3, #10
 80034e4:	4013      	ands	r3, r2
 80034e6:	607b      	str	r3, [r7, #4]
 80034e8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80034ea:	4b2a      	ldr	r3, [pc, #168]	; (8003594 <MX_GPIO_Init+0xf8>)
 80034ec:	695a      	ldr	r2, [r3, #20]
 80034ee:	4b29      	ldr	r3, [pc, #164]	; (8003594 <MX_GPIO_Init+0xf8>)
 80034f0:	2180      	movs	r1, #128	; 0x80
 80034f2:	02c9      	lsls	r1, r1, #11
 80034f4:	430a      	orrs	r2, r1
 80034f6:	615a      	str	r2, [r3, #20]
 80034f8:	4b26      	ldr	r3, [pc, #152]	; (8003594 <MX_GPIO_Init+0xf8>)
 80034fa:	695a      	ldr	r2, [r3, #20]
 80034fc:	2380      	movs	r3, #128	; 0x80
 80034fe:	02db      	lsls	r3, r3, #11
 8003500:	4013      	ands	r3, r2
 8003502:	603b      	str	r3, [r7, #0]
 8003504:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, LED1_Pin|LED2_Pin|LED3_Pin|GPIO_PIN_8
 8003506:	4924      	ldr	r1, [pc, #144]	; (8003598 <MX_GPIO_Init+0xfc>)
 8003508:	4b24      	ldr	r3, [pc, #144]	; (800359c <MX_GPIO_Init+0x100>)
 800350a:	2200      	movs	r2, #0
 800350c:	0018      	movs	r0, r3
 800350e:	f001 fe90 	bl	8005232 <HAL_GPIO_WritePin>
                          |GPIO_PIN_9, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(dist_send_GPIO_Port, dist_send_Pin, GPIO_PIN_RESET);
 8003512:	2390      	movs	r3, #144	; 0x90
 8003514:	05db      	lsls	r3, r3, #23
 8003516:	2200      	movs	r2, #0
 8003518:	2140      	movs	r1, #64	; 0x40
 800351a:	0018      	movs	r0, r3
 800351c:	f001 fe89 	bl	8005232 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : LED1_Pin LED2_Pin LED3_Pin PC8
                           PC9 */
  GPIO_InitStruct.Pin = LED1_Pin|LED2_Pin|LED3_Pin|GPIO_PIN_8
 8003520:	193b      	adds	r3, r7, r4
 8003522:	4a1d      	ldr	r2, [pc, #116]	; (8003598 <MX_GPIO_Init+0xfc>)
 8003524:	601a      	str	r2, [r3, #0]
                          |GPIO_PIN_9;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003526:	193b      	adds	r3, r7, r4
 8003528:	2201      	movs	r2, #1
 800352a:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800352c:	193b      	adds	r3, r7, r4
 800352e:	2200      	movs	r2, #0
 8003530:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003532:	193b      	adds	r3, r7, r4
 8003534:	2200      	movs	r2, #0
 8003536:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003538:	193b      	adds	r3, r7, r4
 800353a:	4a18      	ldr	r2, [pc, #96]	; (800359c <MX_GPIO_Init+0x100>)
 800353c:	0019      	movs	r1, r3
 800353e:	0010      	movs	r0, r2
 8003540:	f001 fcea 	bl	8004f18 <HAL_GPIO_Init>

  /*Configure GPIO pins : boardButton_Pin dist_receive_Pin water_sensor_Pin */
  GPIO_InitStruct.Pin = boardButton_Pin|dist_receive_Pin|water_sensor_Pin;
 8003544:	193b      	adds	r3, r7, r4
 8003546:	22a1      	movs	r2, #161	; 0xa1
 8003548:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800354a:	193b      	adds	r3, r7, r4
 800354c:	2200      	movs	r2, #0
 800354e:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003550:	193b      	adds	r3, r7, r4
 8003552:	2200      	movs	r2, #0
 8003554:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003556:	193a      	adds	r2, r7, r4
 8003558:	2390      	movs	r3, #144	; 0x90
 800355a:	05db      	lsls	r3, r3, #23
 800355c:	0011      	movs	r1, r2
 800355e:	0018      	movs	r0, r3
 8003560:	f001 fcda 	bl	8004f18 <HAL_GPIO_Init>

  /*Configure GPIO pin : dist_send_Pin */
  GPIO_InitStruct.Pin = dist_send_Pin;
 8003564:	0021      	movs	r1, r4
 8003566:	187b      	adds	r3, r7, r1
 8003568:	2240      	movs	r2, #64	; 0x40
 800356a:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800356c:	187b      	adds	r3, r7, r1
 800356e:	2201      	movs	r2, #1
 8003570:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003572:	187b      	adds	r3, r7, r1
 8003574:	2200      	movs	r2, #0
 8003576:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003578:	187b      	adds	r3, r7, r1
 800357a:	2200      	movs	r2, #0
 800357c:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(dist_send_GPIO_Port, &GPIO_InitStruct);
 800357e:	187a      	adds	r2, r7, r1
 8003580:	2390      	movs	r3, #144	; 0x90
 8003582:	05db      	lsls	r3, r3, #23
 8003584:	0011      	movs	r1, r2
 8003586:	0018      	movs	r0, r3
 8003588:	f001 fcc6 	bl	8004f18 <HAL_GPIO_Init>

}
 800358c:	46c0      	nop			; (mov r8, r8)
 800358e:	46bd      	mov	sp, r7
 8003590:	b009      	add	sp, #36	; 0x24
 8003592:	bd90      	pop	{r4, r7, pc}
 8003594:	40021000 	.word	0x40021000
 8003598:	0000030e 	.word	0x0000030e
 800359c:	48000800 	.word	0x48000800

080035a0 <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void const * argument)
{
 80035a0:	b5b0      	push	{r4, r5, r7, lr}
 80035a2:	b086      	sub	sp, #24
 80035a4:	af00      	add	r7, sp, #0
 80035a6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
	float buffer1, buffer2;
	for(;;)
	{
		if(OPERATOR == 0){
 80035a8:	4b7b      	ldr	r3, [pc, #492]	; (8003798 <StartDefaultTask+0x1f8>)
 80035aa:	681b      	ldr	r3, [r3, #0]
 80035ac:	2b00      	cmp	r3, #0
 80035ae:	d000      	beq.n	80035b2 <StartDefaultTask+0x12>
 80035b0:	e0ee      	b.n	8003790 <StartDefaultTask+0x1f0>
			buffer2 = 2*fabsf(distance - 1);
 80035b2:	4b7a      	ldr	r3, [pc, #488]	; (800379c <StartDefaultTask+0x1fc>)
 80035b4:	681b      	ldr	r3, [r3, #0]
 80035b6:	21fe      	movs	r1, #254	; 0xfe
 80035b8:	0589      	lsls	r1, r1, #22
 80035ba:	1c18      	adds	r0, r3, #0
 80035bc:	f7fd fb4c 	bl	8000c58 <__aeabi_fsub>
 80035c0:	1c03      	adds	r3, r0, #0
 80035c2:	005b      	lsls	r3, r3, #1
 80035c4:	085b      	lsrs	r3, r3, #1
 80035c6:	1c19      	adds	r1, r3, #0
 80035c8:	1c18      	adds	r0, r3, #0
 80035ca:	f7fc fea1 	bl	8000310 <__aeabi_fadd>
 80035ce:	1c03      	adds	r3, r0, #0
 80035d0:	613b      	str	r3, [r7, #16]

			if(rain+3*light < 0.3 || distance > 1.1){
 80035d2:	4b73      	ldr	r3, [pc, #460]	; (80037a0 <StartDefaultTask+0x200>)
 80035d4:	681b      	ldr	r3, [r3, #0]
 80035d6:	4973      	ldr	r1, [pc, #460]	; (80037a4 <StartDefaultTask+0x204>)
 80035d8:	1c18      	adds	r0, r3, #0
 80035da:	f7fd fa0b 	bl	80009f4 <__aeabi_fmul>
 80035de:	1c03      	adds	r3, r0, #0
 80035e0:	1c1a      	adds	r2, r3, #0
 80035e2:	4b71      	ldr	r3, [pc, #452]	; (80037a8 <StartDefaultTask+0x208>)
 80035e4:	681b      	ldr	r3, [r3, #0]
 80035e6:	1c19      	adds	r1, r3, #0
 80035e8:	1c10      	adds	r0, r2, #0
 80035ea:	f7fc fe91 	bl	8000310 <__aeabi_fadd>
 80035ee:	1c03      	adds	r3, r0, #0
 80035f0:	1c18      	adds	r0, r3, #0
 80035f2:	f7ff fac5 	bl	8002b80 <__aeabi_f2d>
 80035f6:	4a6d      	ldr	r2, [pc, #436]	; (80037ac <StartDefaultTask+0x20c>)
 80035f8:	4b6d      	ldr	r3, [pc, #436]	; (80037b0 <StartDefaultTask+0x210>)
 80035fa:	f7fc fe27 	bl	800024c <__aeabi_dcmplt>
 80035fe:	1e03      	subs	r3, r0, #0
 8003600:	d10a      	bne.n	8003618 <StartDefaultTask+0x78>
 8003602:	4b66      	ldr	r3, [pc, #408]	; (800379c <StartDefaultTask+0x1fc>)
 8003604:	681b      	ldr	r3, [r3, #0]
 8003606:	1c18      	adds	r0, r3, #0
 8003608:	f7ff faba 	bl	8002b80 <__aeabi_f2d>
 800360c:	4a69      	ldr	r2, [pc, #420]	; (80037b4 <StartDefaultTask+0x214>)
 800360e:	4b6a      	ldr	r3, [pc, #424]	; (80037b8 <StartDefaultTask+0x218>)
 8003610:	f7fc fe30 	bl	8000274 <__aeabi_dcmpgt>
 8003614:	1e03      	subs	r3, r0, #0
 8003616:	d003      	beq.n	8003620 <StartDefaultTask+0x80>
				LED = 0;
 8003618:	4b68      	ldr	r3, [pc, #416]	; (80037bc <StartDefaultTask+0x21c>)
 800361a:	2200      	movs	r2, #0
 800361c:	601a      	str	r2, [r3, #0]
 800361e:	e035      	b.n	800368c <StartDefaultTask+0xec>
			} else {
				LED = (int)(led_max_power/8.0*powf(4.0,rain+3*light));
 8003620:	4b67      	ldr	r3, [pc, #412]	; (80037c0 <StartDefaultTask+0x220>)
 8003622:	681b      	ldr	r3, [r3, #0]
 8003624:	0018      	movs	r0, r3
 8003626:	f7ff fa71 	bl	8002b0c <__aeabi_i2d>
 800362a:	2200      	movs	r2, #0
 800362c:	4b65      	ldr	r3, [pc, #404]	; (80037c4 <StartDefaultTask+0x224>)
 800362e:	f7fe f873 	bl	8001718 <__aeabi_ddiv>
 8003632:	0003      	movs	r3, r0
 8003634:	000c      	movs	r4, r1
 8003636:	0025      	movs	r5, r4
 8003638:	001c      	movs	r4, r3
 800363a:	4b59      	ldr	r3, [pc, #356]	; (80037a0 <StartDefaultTask+0x200>)
 800363c:	681b      	ldr	r3, [r3, #0]
 800363e:	4959      	ldr	r1, [pc, #356]	; (80037a4 <StartDefaultTask+0x204>)
 8003640:	1c18      	adds	r0, r3, #0
 8003642:	f7fd f9d7 	bl	80009f4 <__aeabi_fmul>
 8003646:	1c03      	adds	r3, r0, #0
 8003648:	1c1a      	adds	r2, r3, #0
 800364a:	4b57      	ldr	r3, [pc, #348]	; (80037a8 <StartDefaultTask+0x208>)
 800364c:	681b      	ldr	r3, [r3, #0]
 800364e:	1c19      	adds	r1, r3, #0
 8003650:	1c10      	adds	r0, r2, #0
 8003652:	f7fc fe5d 	bl	8000310 <__aeabi_fadd>
 8003656:	1c03      	adds	r3, r0, #0
 8003658:	1c1a      	adds	r2, r3, #0
 800365a:	2381      	movs	r3, #129	; 0x81
 800365c:	05db      	lsls	r3, r3, #23
 800365e:	1c11      	adds	r1, r2, #0
 8003660:	1c18      	adds	r0, r3, #0
 8003662:	f005 f80d 	bl	8008680 <powf>
 8003666:	1c03      	adds	r3, r0, #0
 8003668:	1c18      	adds	r0, r3, #0
 800366a:	f7ff fa89 	bl	8002b80 <__aeabi_f2d>
 800366e:	0002      	movs	r2, r0
 8003670:	000b      	movs	r3, r1
 8003672:	0020      	movs	r0, r4
 8003674:	0029      	movs	r1, r5
 8003676:	f7fe fc59 	bl	8001f2c <__aeabi_dmul>
 800367a:	0003      	movs	r3, r0
 800367c:	000c      	movs	r4, r1
 800367e:	0018      	movs	r0, r3
 8003680:	0021      	movs	r1, r4
 8003682:	f7ff fa0d 	bl	8002aa0 <__aeabi_d2iz>
 8003686:	0002      	movs	r2, r0
 8003688:	4b4c      	ldr	r3, [pc, #304]	; (80037bc <StartDefaultTask+0x21c>)
 800368a:	601a      	str	r2, [r3, #0]
			}
//			LED = (int)(16*(rain+3*light));

			for(int i = 0; i < 8; i++){
 800368c:	2300      	movs	r3, #0
 800368e:	617b      	str	r3, [r7, #20]
 8003690:	e058      	b.n	8003744 <StartDefaultTask+0x1a4>
				buffer1 = 2*fabsf(buffer2-(float)(i)/8.0);
 8003692:	6938      	ldr	r0, [r7, #16]
 8003694:	f7ff fa74 	bl	8002b80 <__aeabi_f2d>
 8003698:	0004      	movs	r4, r0
 800369a:	000d      	movs	r5, r1
 800369c:	6978      	ldr	r0, [r7, #20]
 800369e:	f7fd fcd5 	bl	800104c <__aeabi_i2f>
 80036a2:	1c03      	adds	r3, r0, #0
 80036a4:	1c18      	adds	r0, r3, #0
 80036a6:	f7ff fa6b 	bl	8002b80 <__aeabi_f2d>
 80036aa:	2200      	movs	r2, #0
 80036ac:	4b45      	ldr	r3, [pc, #276]	; (80037c4 <StartDefaultTask+0x224>)
 80036ae:	f7fe f833 	bl	8001718 <__aeabi_ddiv>
 80036b2:	0002      	movs	r2, r0
 80036b4:	000b      	movs	r3, r1
 80036b6:	0020      	movs	r0, r4
 80036b8:	0029      	movs	r1, r5
 80036ba:	f7fe fea9 	bl	8002410 <__aeabi_dsub>
 80036be:	0003      	movs	r3, r0
 80036c0:	000c      	movs	r4, r1
 80036c2:	0018      	movs	r0, r3
 80036c4:	0021      	movs	r1, r4
 80036c6:	f7ff faad 	bl	8002c24 <__aeabi_d2f>
 80036ca:	1c03      	adds	r3, r0, #0
 80036cc:	005b      	lsls	r3, r3, #1
 80036ce:	085b      	lsrs	r3, r3, #1
 80036d0:	1c19      	adds	r1, r3, #0
 80036d2:	1c18      	adds	r0, r3, #0
 80036d4:	f7fc fe1c 	bl	8000310 <__aeabi_fadd>
 80036d8:	1c03      	adds	r3, r0, #0
 80036da:	60fb      	str	r3, [r7, #12]
				if(buffer1 < 0.5){
 80036dc:	21fc      	movs	r1, #252	; 0xfc
 80036de:	0589      	lsls	r1, r1, #22
 80036e0:	68f8      	ldr	r0, [r7, #12]
 80036e2:	f7fc fded 	bl	80002c0 <__aeabi_fcmplt>
 80036e6:	1e03      	subs	r3, r0, #0
 80036e8:	d024      	beq.n	8003734 <StartDefaultTask+0x194>
					led_power[i] = LED/powf(10000,buffer1*buffer1*buffer1);
 80036ea:	4b34      	ldr	r3, [pc, #208]	; (80037bc <StartDefaultTask+0x21c>)
 80036ec:	681b      	ldr	r3, [r3, #0]
 80036ee:	0018      	movs	r0, r3
 80036f0:	f7fd fcac 	bl	800104c <__aeabi_i2f>
 80036f4:	1c04      	adds	r4, r0, #0
 80036f6:	68f9      	ldr	r1, [r7, #12]
 80036f8:	68f8      	ldr	r0, [r7, #12]
 80036fa:	f7fd f97b 	bl	80009f4 <__aeabi_fmul>
 80036fe:	1c03      	adds	r3, r0, #0
 8003700:	68f9      	ldr	r1, [r7, #12]
 8003702:	1c18      	adds	r0, r3, #0
 8003704:	f7fd f976 	bl	80009f4 <__aeabi_fmul>
 8003708:	1c03      	adds	r3, r0, #0
 800370a:	1c1a      	adds	r2, r3, #0
 800370c:	4b2e      	ldr	r3, [pc, #184]	; (80037c8 <StartDefaultTask+0x228>)
 800370e:	1c11      	adds	r1, r2, #0
 8003710:	1c18      	adds	r0, r3, #0
 8003712:	f004 ffb5 	bl	8008680 <powf>
 8003716:	1c03      	adds	r3, r0, #0
 8003718:	1c19      	adds	r1, r3, #0
 800371a:	1c20      	adds	r0, r4, #0
 800371c:	f7fc ff92 	bl	8000644 <__aeabi_fdiv>
 8003720:	1c03      	adds	r3, r0, #0
 8003722:	1c18      	adds	r0, r3, #0
 8003724:	f7fd fc72 	bl	800100c <__aeabi_f2iz>
 8003728:	0001      	movs	r1, r0
 800372a:	4b28      	ldr	r3, [pc, #160]	; (80037cc <StartDefaultTask+0x22c>)
 800372c:	697a      	ldr	r2, [r7, #20]
 800372e:	0092      	lsls	r2, r2, #2
 8003730:	50d1      	str	r1, [r2, r3]
 8003732:	e004      	b.n	800373e <StartDefaultTask+0x19e>
				} else {
					led_power[i] = 0;
 8003734:	4b25      	ldr	r3, [pc, #148]	; (80037cc <StartDefaultTask+0x22c>)
 8003736:	697a      	ldr	r2, [r7, #20]
 8003738:	0092      	lsls	r2, r2, #2
 800373a:	2100      	movs	r1, #0
 800373c:	50d1      	str	r1, [r2, r3]
			for(int i = 0; i < 8; i++){
 800373e:	697b      	ldr	r3, [r7, #20]
 8003740:	3301      	adds	r3, #1
 8003742:	617b      	str	r3, [r7, #20]
 8003744:	697b      	ldr	r3, [r7, #20]
 8003746:	2b07      	cmp	r3, #7
 8003748:	dda3      	ble.n	8003692 <StartDefaultTask+0xf2>
				}
			}

			TIM2->CCR1 = led_power[0];
 800374a:	4b20      	ldr	r3, [pc, #128]	; (80037cc <StartDefaultTask+0x22c>)
 800374c:	681a      	ldr	r2, [r3, #0]
 800374e:	2380      	movs	r3, #128	; 0x80
 8003750:	05db      	lsls	r3, r3, #23
 8003752:	635a      	str	r2, [r3, #52]	; 0x34
			TIM2->CCR2 = led_power[1];
 8003754:	4b1d      	ldr	r3, [pc, #116]	; (80037cc <StartDefaultTask+0x22c>)
 8003756:	685a      	ldr	r2, [r3, #4]
 8003758:	2380      	movs	r3, #128	; 0x80
 800375a:	05db      	lsls	r3, r3, #23
 800375c:	639a      	str	r2, [r3, #56]	; 0x38
			TIM2->CCR3 = led_power[2];
 800375e:	4b1b      	ldr	r3, [pc, #108]	; (80037cc <StartDefaultTask+0x22c>)
 8003760:	689a      	ldr	r2, [r3, #8]
 8003762:	2380      	movs	r3, #128	; 0x80
 8003764:	05db      	lsls	r3, r3, #23
 8003766:	63da      	str	r2, [r3, #60]	; 0x3c

			TIM3->CCR2 = led_power[3];
 8003768:	4b18      	ldr	r3, [pc, #96]	; (80037cc <StartDefaultTask+0x22c>)
 800376a:	68da      	ldr	r2, [r3, #12]
 800376c:	4b18      	ldr	r3, [pc, #96]	; (80037d0 <StartDefaultTask+0x230>)
 800376e:	639a      	str	r2, [r3, #56]	; 0x38
			TIM3->CCR3 = led_power[4];
 8003770:	4b16      	ldr	r3, [pc, #88]	; (80037cc <StartDefaultTask+0x22c>)
 8003772:	691a      	ldr	r2, [r3, #16]
 8003774:	4b16      	ldr	r3, [pc, #88]	; (80037d0 <StartDefaultTask+0x230>)
 8003776:	63da      	str	r2, [r3, #60]	; 0x3c
			TIM3->CCR4 = led_power[5];
 8003778:	4b14      	ldr	r3, [pc, #80]	; (80037cc <StartDefaultTask+0x22c>)
 800377a:	695a      	ldr	r2, [r3, #20]
 800377c:	4b14      	ldr	r3, [pc, #80]	; (80037d0 <StartDefaultTask+0x230>)
 800377e:	641a      	str	r2, [r3, #64]	; 0x40

			TIM16->CCR1 = led_power[6];
 8003780:	4b12      	ldr	r3, [pc, #72]	; (80037cc <StartDefaultTask+0x22c>)
 8003782:	699a      	ldr	r2, [r3, #24]
 8003784:	4b13      	ldr	r3, [pc, #76]	; (80037d4 <StartDefaultTask+0x234>)
 8003786:	635a      	str	r2, [r3, #52]	; 0x34
			TIM17->CCR1 = led_power[7];
 8003788:	4b10      	ldr	r3, [pc, #64]	; (80037cc <StartDefaultTask+0x22c>)
 800378a:	69da      	ldr	r2, [r3, #28]
 800378c:	4b12      	ldr	r3, [pc, #72]	; (80037d8 <StartDefaultTask+0x238>)
 800378e:	635a      	str	r2, [r3, #52]	; 0x34
		}
		osDelay(10);
 8003790:	200a      	movs	r0, #10
 8003792:	f003 ff0e 	bl	80075b2 <osDelay>
		if(OPERATOR == 0){
 8003796:	e707      	b.n	80035a8 <StartDefaultTask+0x8>
 8003798:	200002f4 	.word	0x200002f4
 800379c:	200002f0 	.word	0x200002f0
 80037a0:	200002e8 	.word	0x200002e8
 80037a4:	40400000 	.word	0x40400000
 80037a8:	200002ec 	.word	0x200002ec
 80037ac:	33333333 	.word	0x33333333
 80037b0:	3fd33333 	.word	0x3fd33333
 80037b4:	9999999a 	.word	0x9999999a
 80037b8:	3ff19999 	.word	0x3ff19999
 80037bc:	200002f8 	.word	0x200002f8
 80037c0:	20000000 	.word	0x20000000
 80037c4:	40200000 	.word	0x40200000
 80037c8:	461c4000 	.word	0x461c4000
 80037cc:	20001344 	.word	0x20001344
 80037d0:	40000400 	.word	0x40000400
 80037d4:	40014400 	.word	0x40014400
 80037d8:	40014800 	.word	0x40014800

080037dc <StartWaterSensor>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartWaterSensor */
void StartWaterSensor(void const * argument)
{
 80037dc:	b580      	push	{r7, lr}
 80037de:	b082      	sub	sp, #8
 80037e0:	af00      	add	r7, sp, #0
 80037e2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartWaterSensor */
  /* Infinite loop */
	for(;;)
	{
		if(HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_7) == GPIO_PIN_SET && rain == 0){
 80037e4:	2390      	movs	r3, #144	; 0x90
 80037e6:	05db      	lsls	r3, r3, #23
 80037e8:	2180      	movs	r1, #128	; 0x80
 80037ea:	0018      	movs	r0, r3
 80037ec:	f001 fd04 	bl	80051f8 <HAL_GPIO_ReadPin>
 80037f0:	0003      	movs	r3, r0
 80037f2:	2b01      	cmp	r3, #1
 80037f4:	d116      	bne.n	8003824 <StartWaterSensor+0x48>
 80037f6:	4b1b      	ldr	r3, [pc, #108]	; (8003864 <StartWaterSensor+0x88>)
 80037f8:	681b      	ldr	r3, [r3, #0]
 80037fa:	2100      	movs	r1, #0
 80037fc:	1c18      	adds	r0, r3, #0
 80037fe:	f7fc fd59 	bl	80002b4 <__aeabi_fcmpeq>
 8003802:	1e03      	subs	r3, r0, #0
 8003804:	d00e      	beq.n	8003824 <StartWaterSensor+0x48>
			HAL_UART_Transmit(&huart1, "Rain started\n", 14, 1000);
 8003806:	23fa      	movs	r3, #250	; 0xfa
 8003808:	009b      	lsls	r3, r3, #2
 800380a:	4917      	ldr	r1, [pc, #92]	; (8003868 <StartWaterSensor+0x8c>)
 800380c:	4817      	ldr	r0, [pc, #92]	; (800386c <StartWaterSensor+0x90>)
 800380e:	220e      	movs	r2, #14
 8003810:	f003 f916 	bl	8006a40 <HAL_UART_Transmit>
			rain = 1;
 8003814:	4b13      	ldr	r3, [pc, #76]	; (8003864 <StartWaterSensor+0x88>)
 8003816:	22fe      	movs	r2, #254	; 0xfe
 8003818:	0592      	lsls	r2, r2, #22
 800381a:	601a      	str	r2, [r3, #0]
			osDelay(100);
 800381c:	2064      	movs	r0, #100	; 0x64
 800381e:	f003 fec8 	bl	80075b2 <osDelay>
 8003822:	e01a      	b.n	800385a <StartWaterSensor+0x7e>
		} else if(HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_7) == GPIO_PIN_RESET && rain == 1){
 8003824:	2390      	movs	r3, #144	; 0x90
 8003826:	05db      	lsls	r3, r3, #23
 8003828:	2180      	movs	r1, #128	; 0x80
 800382a:	0018      	movs	r0, r3
 800382c:	f001 fce4 	bl	80051f8 <HAL_GPIO_ReadPin>
 8003830:	1e03      	subs	r3, r0, #0
 8003832:	d112      	bne.n	800385a <StartWaterSensor+0x7e>
 8003834:	4b0b      	ldr	r3, [pc, #44]	; (8003864 <StartWaterSensor+0x88>)
 8003836:	681b      	ldr	r3, [r3, #0]
 8003838:	21fe      	movs	r1, #254	; 0xfe
 800383a:	0589      	lsls	r1, r1, #22
 800383c:	1c18      	adds	r0, r3, #0
 800383e:	f7fc fd39 	bl	80002b4 <__aeabi_fcmpeq>
 8003842:	1e03      	subs	r3, r0, #0
 8003844:	d009      	beq.n	800385a <StartWaterSensor+0x7e>
			HAL_UART_Transmit(&huart1, "Rain ended\n", 12, 1000);
 8003846:	23fa      	movs	r3, #250	; 0xfa
 8003848:	009b      	lsls	r3, r3, #2
 800384a:	4909      	ldr	r1, [pc, #36]	; (8003870 <StartWaterSensor+0x94>)
 800384c:	4807      	ldr	r0, [pc, #28]	; (800386c <StartWaterSensor+0x90>)
 800384e:	220c      	movs	r2, #12
 8003850:	f003 f8f6 	bl	8006a40 <HAL_UART_Transmit>
			rain = 0;
 8003854:	4b03      	ldr	r3, [pc, #12]	; (8003864 <StartWaterSensor+0x88>)
 8003856:	2200      	movs	r2, #0
 8003858:	601a      	str	r2, [r3, #0]
		}

		osDelay(50);
 800385a:	2032      	movs	r0, #50	; 0x32
 800385c:	f003 fea9 	bl	80075b2 <osDelay>
		if(HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_7) == GPIO_PIN_SET && rain == 0){
 8003860:	e7c0      	b.n	80037e4 <StartWaterSensor+0x8>
 8003862:	46c0      	nop			; (mov r8, r8)
 8003864:	200002ec 	.word	0x200002ec
 8003868:	08009350 	.word	0x08009350
 800386c:	200013e8 	.word	0x200013e8
 8003870:	08009360 	.word	0x08009360

08003874 <StartLightSensor>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartLightSensor */
void StartLightSensor(void const * argument)
{
 8003874:	b590      	push	{r4, r7, lr}
 8003876:	b087      	sub	sp, #28
 8003878:	af00      	add	r7, sp, #0
 800387a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartLightSensor */
  /* Infinite loop */
	int result;
	float step = 30;
 800387c:	4b83      	ldr	r3, [pc, #524]	; (8003a8c <StartLightSensor+0x218>)
 800387e:	613b      	str	r3, [r7, #16]
	float buffer = 0;
 8003880:	2300      	movs	r3, #0
 8003882:	617b      	str	r3, [r7, #20]
	for(;;)
	{
		HAL_ADC_Start(&hadc);
 8003884:	4b82      	ldr	r3, [pc, #520]	; (8003a90 <StartLightSensor+0x21c>)
 8003886:	0018      	movs	r0, r3
 8003888:	f000 fee6 	bl	8004658 <HAL_ADC_Start>
		HAL_ADC_PollForConversion(&hadc, 100);
 800388c:	4b80      	ldr	r3, [pc, #512]	; (8003a90 <StartLightSensor+0x21c>)
 800388e:	2164      	movs	r1, #100	; 0x64
 8003890:	0018      	movs	r0, r3
 8003892:	f000 ff75 	bl	8004780 <HAL_ADC_PollForConversion>
		result = HAL_ADC_GetValue(&hadc);
 8003896:	4b7e      	ldr	r3, [pc, #504]	; (8003a90 <StartLightSensor+0x21c>)
 8003898:	0018      	movs	r0, r3
 800389a:	f001 f803 	bl	80048a4 <HAL_ADC_GetValue>
 800389e:	0003      	movs	r3, r0
 80038a0:	60fb      	str	r3, [r7, #12]
		HAL_ADC_Stop(&hadc);
 80038a2:	4b7b      	ldr	r3, [pc, #492]	; (8003a90 <StartLightSensor+0x21c>)
 80038a4:	0018      	movs	r0, r3
 80038a6:	f000 ff2b 	bl	8004700 <HAL_ADC_Stop>

		if(result - light*4096 > LIGHT_HYSTERESIS){
 80038aa:	68f8      	ldr	r0, [r7, #12]
 80038ac:	f7fd fbce 	bl	800104c <__aeabi_i2f>
 80038b0:	1c04      	adds	r4, r0, #0
 80038b2:	4b78      	ldr	r3, [pc, #480]	; (8003a94 <StartLightSensor+0x220>)
 80038b4:	681b      	ldr	r3, [r3, #0]
 80038b6:	218b      	movs	r1, #139	; 0x8b
 80038b8:	05c9      	lsls	r1, r1, #23
 80038ba:	1c18      	adds	r0, r3, #0
 80038bc:	f7fd f89a 	bl	80009f4 <__aeabi_fmul>
 80038c0:	1c03      	adds	r3, r0, #0
 80038c2:	1c19      	adds	r1, r3, #0
 80038c4:	1c20      	adds	r0, r4, #0
 80038c6:	f7fd f9c7 	bl	8000c58 <__aeabi_fsub>
 80038ca:	1c03      	adds	r3, r0, #0
 80038cc:	4972      	ldr	r1, [pc, #456]	; (8003a98 <StartLightSensor+0x224>)
 80038ce:	1c18      	adds	r0, r3, #0
 80038d0:	f7fc fd0a 	bl	80002e8 <__aeabi_fcmpgt>
 80038d4:	1e03      	subs	r3, r0, #0
 80038d6:	d026      	beq.n	8003926 <StartLightSensor+0xb2>
			if(light <= 1-step/4096)
 80038d8:	218b      	movs	r1, #139	; 0x8b
 80038da:	05c9      	lsls	r1, r1, #23
 80038dc:	6938      	ldr	r0, [r7, #16]
 80038de:	f7fc feb1 	bl	8000644 <__aeabi_fdiv>
 80038e2:	1c03      	adds	r3, r0, #0
 80038e4:	1c19      	adds	r1, r3, #0
 80038e6:	20fe      	movs	r0, #254	; 0xfe
 80038e8:	0580      	lsls	r0, r0, #22
 80038ea:	f7fd f9b5 	bl	8000c58 <__aeabi_fsub>
 80038ee:	1c03      	adds	r3, r0, #0
 80038f0:	1c1a      	adds	r2, r3, #0
 80038f2:	4b68      	ldr	r3, [pc, #416]	; (8003a94 <StartLightSensor+0x220>)
 80038f4:	681b      	ldr	r3, [r3, #0]
 80038f6:	1c19      	adds	r1, r3, #0
 80038f8:	1c10      	adds	r0, r2, #0
 80038fa:	f7fc fcff 	bl	80002fc <__aeabi_fcmpge>
 80038fe:	1e03      	subs	r3, r0, #0
 8003900:	d048      	beq.n	8003994 <StartLightSensor+0x120>
				light += step/4096;
 8003902:	218b      	movs	r1, #139	; 0x8b
 8003904:	05c9      	lsls	r1, r1, #23
 8003906:	6938      	ldr	r0, [r7, #16]
 8003908:	f7fc fe9c 	bl	8000644 <__aeabi_fdiv>
 800390c:	1c03      	adds	r3, r0, #0
 800390e:	1c1a      	adds	r2, r3, #0
 8003910:	4b60      	ldr	r3, [pc, #384]	; (8003a94 <StartLightSensor+0x220>)
 8003912:	681b      	ldr	r3, [r3, #0]
 8003914:	1c19      	adds	r1, r3, #0
 8003916:	1c10      	adds	r0, r2, #0
 8003918:	f7fc fcfa 	bl	8000310 <__aeabi_fadd>
 800391c:	1c03      	adds	r3, r0, #0
 800391e:	1c1a      	adds	r2, r3, #0
 8003920:	4b5c      	ldr	r3, [pc, #368]	; (8003a94 <StartLightSensor+0x220>)
 8003922:	601a      	str	r2, [r3, #0]
 8003924:	e036      	b.n	8003994 <StartLightSensor+0x120>
		} else if(light*4096 - result > LIGHT_HYSTERESIS){
 8003926:	4b5b      	ldr	r3, [pc, #364]	; (8003a94 <StartLightSensor+0x220>)
 8003928:	681b      	ldr	r3, [r3, #0]
 800392a:	218b      	movs	r1, #139	; 0x8b
 800392c:	05c9      	lsls	r1, r1, #23
 800392e:	1c18      	adds	r0, r3, #0
 8003930:	f7fd f860 	bl	80009f4 <__aeabi_fmul>
 8003934:	1c03      	adds	r3, r0, #0
 8003936:	1c1c      	adds	r4, r3, #0
 8003938:	68f8      	ldr	r0, [r7, #12]
 800393a:	f7fd fb87 	bl	800104c <__aeabi_i2f>
 800393e:	1c03      	adds	r3, r0, #0
 8003940:	1c19      	adds	r1, r3, #0
 8003942:	1c20      	adds	r0, r4, #0
 8003944:	f7fd f988 	bl	8000c58 <__aeabi_fsub>
 8003948:	1c03      	adds	r3, r0, #0
 800394a:	4953      	ldr	r1, [pc, #332]	; (8003a98 <StartLightSensor+0x224>)
 800394c:	1c18      	adds	r0, r3, #0
 800394e:	f7fc fccb 	bl	80002e8 <__aeabi_fcmpgt>
 8003952:	1e03      	subs	r3, r0, #0
 8003954:	d01e      	beq.n	8003994 <StartLightSensor+0x120>
			if(light >= step/4096)
 8003956:	218b      	movs	r1, #139	; 0x8b
 8003958:	05c9      	lsls	r1, r1, #23
 800395a:	6938      	ldr	r0, [r7, #16]
 800395c:	f7fc fe72 	bl	8000644 <__aeabi_fdiv>
 8003960:	1c03      	adds	r3, r0, #0
 8003962:	1c1a      	adds	r2, r3, #0
 8003964:	4b4b      	ldr	r3, [pc, #300]	; (8003a94 <StartLightSensor+0x220>)
 8003966:	681b      	ldr	r3, [r3, #0]
 8003968:	1c19      	adds	r1, r3, #0
 800396a:	1c10      	adds	r0, r2, #0
 800396c:	f7fc fcb2 	bl	80002d4 <__aeabi_fcmple>
 8003970:	1e03      	subs	r3, r0, #0
 8003972:	d00f      	beq.n	8003994 <StartLightSensor+0x120>
				light -= step/4096;
 8003974:	4b47      	ldr	r3, [pc, #284]	; (8003a94 <StartLightSensor+0x220>)
 8003976:	681c      	ldr	r4, [r3, #0]
 8003978:	218b      	movs	r1, #139	; 0x8b
 800397a:	05c9      	lsls	r1, r1, #23
 800397c:	6938      	ldr	r0, [r7, #16]
 800397e:	f7fc fe61 	bl	8000644 <__aeabi_fdiv>
 8003982:	1c03      	adds	r3, r0, #0
 8003984:	1c19      	adds	r1, r3, #0
 8003986:	1c20      	adds	r0, r4, #0
 8003988:	f7fd f966 	bl	8000c58 <__aeabi_fsub>
 800398c:	1c03      	adds	r3, r0, #0
 800398e:	1c1a      	adds	r2, r3, #0
 8003990:	4b40      	ldr	r3, [pc, #256]	; (8003a94 <StartLightSensor+0x220>)
 8003992:	601a      	str	r2, [r3, #0]
		}

		if(light*4096 > 0.8*4096 + LIGHT_HYSTERESIS && buffer != 2){
 8003994:	4b3f      	ldr	r3, [pc, #252]	; (8003a94 <StartLightSensor+0x220>)
 8003996:	681b      	ldr	r3, [r3, #0]
 8003998:	218b      	movs	r1, #139	; 0x8b
 800399a:	05c9      	lsls	r1, r1, #23
 800399c:	1c18      	adds	r0, r3, #0
 800399e:	f7fd f829 	bl	80009f4 <__aeabi_fmul>
 80039a2:	1c03      	adds	r3, r0, #0
 80039a4:	1c18      	adds	r0, r3, #0
 80039a6:	f7ff f8eb 	bl	8002b80 <__aeabi_f2d>
 80039aa:	4a3c      	ldr	r2, [pc, #240]	; (8003a9c <StartLightSensor+0x228>)
 80039ac:	4b3c      	ldr	r3, [pc, #240]	; (8003aa0 <StartLightSensor+0x22c>)
 80039ae:	f7fc fc61 	bl	8000274 <__aeabi_dcmpgt>
 80039b2:	1e03      	subs	r3, r0, #0
 80039b4:	d011      	beq.n	80039da <StartLightSensor+0x166>
 80039b6:	2180      	movs	r1, #128	; 0x80
 80039b8:	05c9      	lsls	r1, r1, #23
 80039ba:	6978      	ldr	r0, [r7, #20]
 80039bc:	f7fc fc7a 	bl	80002b4 <__aeabi_fcmpeq>
 80039c0:	1e03      	subs	r3, r0, #0
 80039c2:	d10a      	bne.n	80039da <StartLightSensor+0x166>
			buffer = 2;
 80039c4:	2380      	movs	r3, #128	; 0x80
 80039c6:	05db      	lsls	r3, r3, #23
 80039c8:	617b      	str	r3, [r7, #20]
			HAL_UART_Transmit(&huart1, "Too bad visibility\n", 20, 1000);
 80039ca:	23fa      	movs	r3, #250	; 0xfa
 80039cc:	009b      	lsls	r3, r3, #2
 80039ce:	4935      	ldr	r1, [pc, #212]	; (8003aa4 <StartLightSensor+0x230>)
 80039d0:	4835      	ldr	r0, [pc, #212]	; (8003aa8 <StartLightSensor+0x234>)
 80039d2:	2214      	movs	r2, #20
 80039d4:	f003 f834 	bl	8006a40 <HAL_UART_Transmit>
 80039d8:	e053      	b.n	8003a82 <StartLightSensor+0x20e>
		} else if(light*4096 > 0.2*4096 + LIGHT_HYSTERESIS && light*4096 < 0.8*4096 - LIGHT_HYSTERESIS && buffer != 1){
 80039da:	4b2e      	ldr	r3, [pc, #184]	; (8003a94 <StartLightSensor+0x220>)
 80039dc:	681b      	ldr	r3, [r3, #0]
 80039de:	218b      	movs	r1, #139	; 0x8b
 80039e0:	05c9      	lsls	r1, r1, #23
 80039e2:	1c18      	adds	r0, r3, #0
 80039e4:	f7fd f806 	bl	80009f4 <__aeabi_fmul>
 80039e8:	1c03      	adds	r3, r0, #0
 80039ea:	1c18      	adds	r0, r3, #0
 80039ec:	f7ff f8c8 	bl	8002b80 <__aeabi_f2d>
 80039f0:	4a2a      	ldr	r2, [pc, #168]	; (8003a9c <StartLightSensor+0x228>)
 80039f2:	4b2e      	ldr	r3, [pc, #184]	; (8003aac <StartLightSensor+0x238>)
 80039f4:	f7fc fc3e 	bl	8000274 <__aeabi_dcmpgt>
 80039f8:	1e03      	subs	r3, r0, #0
 80039fa:	d022      	beq.n	8003a42 <StartLightSensor+0x1ce>
 80039fc:	4b25      	ldr	r3, [pc, #148]	; (8003a94 <StartLightSensor+0x220>)
 80039fe:	681b      	ldr	r3, [r3, #0]
 8003a00:	218b      	movs	r1, #139	; 0x8b
 8003a02:	05c9      	lsls	r1, r1, #23
 8003a04:	1c18      	adds	r0, r3, #0
 8003a06:	f7fc fff5 	bl	80009f4 <__aeabi_fmul>
 8003a0a:	1c03      	adds	r3, r0, #0
 8003a0c:	1c18      	adds	r0, r3, #0
 8003a0e:	f7ff f8b7 	bl	8002b80 <__aeabi_f2d>
 8003a12:	4a22      	ldr	r2, [pc, #136]	; (8003a9c <StartLightSensor+0x228>)
 8003a14:	4b26      	ldr	r3, [pc, #152]	; (8003ab0 <StartLightSensor+0x23c>)
 8003a16:	f7fc fc19 	bl	800024c <__aeabi_dcmplt>
 8003a1a:	1e03      	subs	r3, r0, #0
 8003a1c:	d011      	beq.n	8003a42 <StartLightSensor+0x1ce>
 8003a1e:	21fe      	movs	r1, #254	; 0xfe
 8003a20:	0589      	lsls	r1, r1, #22
 8003a22:	6978      	ldr	r0, [r7, #20]
 8003a24:	f7fc fc46 	bl	80002b4 <__aeabi_fcmpeq>
 8003a28:	1e03      	subs	r3, r0, #0
 8003a2a:	d10a      	bne.n	8003a42 <StartLightSensor+0x1ce>
			buffer = 1;
 8003a2c:	23fe      	movs	r3, #254	; 0xfe
 8003a2e:	059b      	lsls	r3, r3, #22
 8003a30:	617b      	str	r3, [r7, #20]
			HAL_UART_Transmit(&huart1, "Low visibility\n", 16, 1000);
 8003a32:	23fa      	movs	r3, #250	; 0xfa
 8003a34:	009b      	lsls	r3, r3, #2
 8003a36:	491f      	ldr	r1, [pc, #124]	; (8003ab4 <StartLightSensor+0x240>)
 8003a38:	481b      	ldr	r0, [pc, #108]	; (8003aa8 <StartLightSensor+0x234>)
 8003a3a:	2210      	movs	r2, #16
 8003a3c:	f003 f800 	bl	8006a40 <HAL_UART_Transmit>
 8003a40:	e01f      	b.n	8003a82 <StartLightSensor+0x20e>
		} else if(light*4096 < 0.2*4096 - LIGHT_HYSTERESIS && buffer != 0){
 8003a42:	4b14      	ldr	r3, [pc, #80]	; (8003a94 <StartLightSensor+0x220>)
 8003a44:	681b      	ldr	r3, [r3, #0]
 8003a46:	218b      	movs	r1, #139	; 0x8b
 8003a48:	05c9      	lsls	r1, r1, #23
 8003a4a:	1c18      	adds	r0, r3, #0
 8003a4c:	f7fc ffd2 	bl	80009f4 <__aeabi_fmul>
 8003a50:	1c03      	adds	r3, r0, #0
 8003a52:	1c18      	adds	r0, r3, #0
 8003a54:	f7ff f894 	bl	8002b80 <__aeabi_f2d>
 8003a58:	4a10      	ldr	r2, [pc, #64]	; (8003a9c <StartLightSensor+0x228>)
 8003a5a:	4b17      	ldr	r3, [pc, #92]	; (8003ab8 <StartLightSensor+0x244>)
 8003a5c:	f7fc fbf6 	bl	800024c <__aeabi_dcmplt>
 8003a60:	1e03      	subs	r3, r0, #0
 8003a62:	d00e      	beq.n	8003a82 <StartLightSensor+0x20e>
 8003a64:	2100      	movs	r1, #0
 8003a66:	6978      	ldr	r0, [r7, #20]
 8003a68:	f7fc fc24 	bl	80002b4 <__aeabi_fcmpeq>
 8003a6c:	1e03      	subs	r3, r0, #0
 8003a6e:	d108      	bne.n	8003a82 <StartLightSensor+0x20e>
			buffer = 0;
 8003a70:	2300      	movs	r3, #0
 8003a72:	617b      	str	r3, [r7, #20]
			HAL_UART_Transmit(&huart1, "Sunny day\n", 11, 1000);
 8003a74:	23fa      	movs	r3, #250	; 0xfa
 8003a76:	009b      	lsls	r3, r3, #2
 8003a78:	4910      	ldr	r1, [pc, #64]	; (8003abc <StartLightSensor+0x248>)
 8003a7a:	480b      	ldr	r0, [pc, #44]	; (8003aa8 <StartLightSensor+0x234>)
 8003a7c:	220b      	movs	r2, #11
 8003a7e:	f002 ffdf 	bl	8006a40 <HAL_UART_Transmit>
		}

		osDelay(100);
 8003a82:	2064      	movs	r0, #100	; 0x64
 8003a84:	f003 fd95 	bl	80075b2 <osDelay>
		HAL_ADC_Start(&hadc);
 8003a88:	e6fc      	b.n	8003884 <StartLightSensor+0x10>
 8003a8a:	46c0      	nop			; (mov r8, r8)
 8003a8c:	41f00000 	.word	0x41f00000
 8003a90:	200014d0 	.word	0x200014d0
 8003a94:	200002e8 	.word	0x200002e8
 8003a98:	42c80000 	.word	0x42c80000
 8003a9c:	9999999a 	.word	0x9999999a
 8003aa0:	40aa6199 	.word	0x40aa6199
 8003aa4:	0800936c 	.word	0x0800936c
 8003aa8:	200013e8 	.word	0x200013e8
 8003aac:	408cb999 	.word	0x408cb999
 8003ab0:	40a8d199 	.word	0x40a8d199
 8003ab4:	08009380 	.word	0x08009380
 8003ab8:	40867999 	.word	0x40867999
 8003abc:	08009390 	.word	0x08009390

08003ac0 <StartDistSensor>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartDistSensor */
void StartDistSensor(void const * argument)
{
 8003ac0:	b5b0      	push	{r4, r5, r7, lr}
 8003ac2:	b08a      	sub	sp, #40	; 0x28
 8003ac4:	af00      	add	r7, sp, #0
 8003ac6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartDistSensor */
  /* Infinite loop */
	int counter_dist, counter1 = 0, counter2 = 0;
 8003ac8:	2300      	movs	r3, #0
 8003aca:	623b      	str	r3, [r7, #32]
 8003acc:	2300      	movs	r3, #0
 8003ace:	613b      	str	r3, [r7, #16]
	float new_distance;
	int buffer = 0;
 8003ad0:	2300      	movs	r3, #0
 8003ad2:	61fb      	str	r3, [r7, #28]
	float step = 0.5 / MAX_DISTANCE;
 8003ad4:	4b7c      	ldr	r3, [pc, #496]	; (8003cc8 <StartDistSensor+0x208>)
 8003ad6:	60fb      	str	r3, [r7, #12]
	for(;;)
	{
		counter_dist = 0;
 8003ad8:	2300      	movs	r3, #0
 8003ada:	627b      	str	r3, [r7, #36]	; 0x24
		//10mcs impulse
		HAL_GPIO_WritePin (GPIOA, GPIO_PIN_6, GPIO_PIN_SET);
 8003adc:	2390      	movs	r3, #144	; 0x90
 8003ade:	05db      	lsls	r3, r3, #23
 8003ae0:	2201      	movs	r2, #1
 8003ae2:	2140      	movs	r1, #64	; 0x40
 8003ae4:	0018      	movs	r0, r3
 8003ae6:	f001 fba4 	bl	8005232 <HAL_GPIO_WritePin>
		for(int i = 0; i < 80; i++){
 8003aea:	2300      	movs	r3, #0
 8003aec:	61bb      	str	r3, [r7, #24]
 8003aee:	e003      	b.n	8003af8 <StartDistSensor+0x38>
			asm("nop");
 8003af0:	46c0      	nop			; (mov r8, r8)
		for(int i = 0; i < 80; i++){
 8003af2:	69bb      	ldr	r3, [r7, #24]
 8003af4:	3301      	adds	r3, #1
 8003af6:	61bb      	str	r3, [r7, #24]
 8003af8:	69bb      	ldr	r3, [r7, #24]
 8003afa:	2b4f      	cmp	r3, #79	; 0x4f
 8003afc:	ddf8      	ble.n	8003af0 <StartDistSensor+0x30>
		}
		HAL_GPIO_WritePin (GPIOA, GPIO_PIN_6, GPIO_PIN_RESET);
 8003afe:	2390      	movs	r3, #144	; 0x90
 8003b00:	05db      	lsls	r3, r3, #23
 8003b02:	2200      	movs	r2, #0
 8003b04:	2140      	movs	r1, #64	; 0x40
 8003b06:	0018      	movs	r0, r3
 8003b08:	f001 fb93 	bl	8005232 <HAL_GPIO_WritePin>
		for(int i = 0; i < 8000; i++){
 8003b0c:	2300      	movs	r3, #0
 8003b0e:	617b      	str	r3, [r7, #20]
 8003b10:	e00f      	b.n	8003b32 <StartDistSensor+0x72>
			if(HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_5) == GPIO_PIN_SET){
 8003b12:	2390      	movs	r3, #144	; 0x90
 8003b14:	05db      	lsls	r3, r3, #23
 8003b16:	2120      	movs	r1, #32
 8003b18:	0018      	movs	r0, r3
 8003b1a:	f001 fb6d 	bl	80051f8 <HAL_GPIO_ReadPin>
 8003b1e:	0003      	movs	r3, r0
 8003b20:	2b01      	cmp	r3, #1
 8003b22:	d103      	bne.n	8003b2c <StartDistSensor+0x6c>
				counter_dist++;
 8003b24:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b26:	3301      	adds	r3, #1
 8003b28:	627b      	str	r3, [r7, #36]	; 0x24
				break;
 8003b2a:	e006      	b.n	8003b3a <StartDistSensor+0x7a>
		for(int i = 0; i < 8000; i++){
 8003b2c:	697b      	ldr	r3, [r7, #20]
 8003b2e:	3301      	adds	r3, #1
 8003b30:	617b      	str	r3, [r7, #20]
 8003b32:	697b      	ldr	r3, [r7, #20]
 8003b34:	4a65      	ldr	r2, [pc, #404]	; (8003ccc <StartDistSensor+0x20c>)
 8003b36:	4293      	cmp	r3, r2
 8003b38:	ddeb      	ble.n	8003b12 <StartDistSensor+0x52>
			}
		}
		while(HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_5) == GPIO_PIN_SET){
 8003b3a:	e002      	b.n	8003b42 <StartDistSensor+0x82>
			counter_dist++;
 8003b3c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b3e:	3301      	adds	r3, #1
 8003b40:	627b      	str	r3, [r7, #36]	; 0x24
		while(HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_5) == GPIO_PIN_SET){
 8003b42:	2390      	movs	r3, #144	; 0x90
 8003b44:	05db      	lsls	r3, r3, #23
 8003b46:	2120      	movs	r1, #32
 8003b48:	0018      	movs	r0, r3
 8003b4a:	f001 fb55 	bl	80051f8 <HAL_GPIO_ReadPin>
 8003b4e:	0003      	movs	r3, r0
 8003b50:	2b01      	cmp	r3, #1
 8003b52:	d0f3      	beq.n	8003b3c <StartDistSensor+0x7c>
		}

		new_distance = counter_dist*step;
 8003b54:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8003b56:	f7fd fa79 	bl	800104c <__aeabi_i2f>
 8003b5a:	1c03      	adds	r3, r0, #0
 8003b5c:	1c19      	adds	r1, r3, #0
 8003b5e:	68f8      	ldr	r0, [r7, #12]
 8003b60:	f7fc ff48 	bl	80009f4 <__aeabi_fmul>
 8003b64:	1c03      	adds	r3, r0, #0
 8003b66:	60bb      	str	r3, [r7, #8]
		if(new_distance - distance > DIST_HYSTERESIS*step){
 8003b68:	4b59      	ldr	r3, [pc, #356]	; (8003cd0 <StartDistSensor+0x210>)
 8003b6a:	681b      	ldr	r3, [r3, #0]
 8003b6c:	1c19      	adds	r1, r3, #0
 8003b6e:	68b8      	ldr	r0, [r7, #8]
 8003b70:	f7fd f872 	bl	8000c58 <__aeabi_fsub>
 8003b74:	1c03      	adds	r3, r0, #0
 8003b76:	1c1c      	adds	r4, r3, #0
 8003b78:	4956      	ldr	r1, [pc, #344]	; (8003cd4 <StartDistSensor+0x214>)
 8003b7a:	68f8      	ldr	r0, [r7, #12]
 8003b7c:	f7fc ff3a 	bl	80009f4 <__aeabi_fmul>
 8003b80:	1c03      	adds	r3, r0, #0
 8003b82:	1c19      	adds	r1, r3, #0
 8003b84:	1c20      	adds	r0, r4, #0
 8003b86:	f7fc fbaf 	bl	80002e8 <__aeabi_fcmpgt>
 8003b8a:	1e03      	subs	r3, r0, #0
 8003b8c:	d037      	beq.n	8003bfe <StartDistSensor+0x13e>
			if(distance <= 1.2){
 8003b8e:	4b50      	ldr	r3, [pc, #320]	; (8003cd0 <StartDistSensor+0x210>)
 8003b90:	681b      	ldr	r3, [r3, #0]
 8003b92:	1c18      	adds	r0, r3, #0
 8003b94:	f7fe fff4 	bl	8002b80 <__aeabi_f2d>
 8003b98:	4a4f      	ldr	r2, [pc, #316]	; (8003cd8 <StartDistSensor+0x218>)
 8003b9a:	4b50      	ldr	r3, [pc, #320]	; (8003cdc <StartDistSensor+0x21c>)
 8003b9c:	f7fc fb60 	bl	8000260 <__aeabi_dcmple>
 8003ba0:	1e03      	subs	r3, r0, #0
 8003ba2:	d009      	beq.n	8003bb8 <StartDistSensor+0xf8>
				distance += step;
 8003ba4:	4b4a      	ldr	r3, [pc, #296]	; (8003cd0 <StartDistSensor+0x210>)
 8003ba6:	681b      	ldr	r3, [r3, #0]
 8003ba8:	68f9      	ldr	r1, [r7, #12]
 8003baa:	1c18      	adds	r0, r3, #0
 8003bac:	f7fc fbb0 	bl	8000310 <__aeabi_fadd>
 8003bb0:	1c03      	adds	r3, r0, #0
 8003bb2:	1c1a      	adds	r2, r3, #0
 8003bb4:	4b46      	ldr	r3, [pc, #280]	; (8003cd0 <StartDistSensor+0x210>)
 8003bb6:	601a      	str	r2, [r3, #0]
			}
			if(new_distance > 1.0/29.0/step){
 8003bb8:	68b8      	ldr	r0, [r7, #8]
 8003bba:	f7fe ffe1 	bl	8002b80 <__aeabi_f2d>
 8003bbe:	0004      	movs	r4, r0
 8003bc0:	000d      	movs	r5, r1
 8003bc2:	68f8      	ldr	r0, [r7, #12]
 8003bc4:	f7fe ffdc 	bl	8002b80 <__aeabi_f2d>
 8003bc8:	0002      	movs	r2, r0
 8003bca:	000b      	movs	r3, r1
 8003bcc:	4844      	ldr	r0, [pc, #272]	; (8003ce0 <StartDistSensor+0x220>)
 8003bce:	4945      	ldr	r1, [pc, #276]	; (8003ce4 <StartDistSensor+0x224>)
 8003bd0:	f7fd fda2 	bl	8001718 <__aeabi_ddiv>
 8003bd4:	0002      	movs	r2, r0
 8003bd6:	000b      	movs	r3, r1
 8003bd8:	0020      	movs	r0, r4
 8003bda:	0029      	movs	r1, r5
 8003bdc:	f7fc fb4a 	bl	8000274 <__aeabi_dcmpgt>
 8003be0:	1e03      	subs	r3, r0, #0
 8003be2:	d03f      	beq.n	8003c64 <StartDistSensor+0x1a4>
				if(counter1 <= 3){
 8003be4:	6a3b      	ldr	r3, [r7, #32]
 8003be6:	2b03      	cmp	r3, #3
 8003be8:	dc03      	bgt.n	8003bf2 <StartDistSensor+0x132>
					counter1++;
 8003bea:	6a3b      	ldr	r3, [r7, #32]
 8003bec:	3301      	adds	r3, #1
 8003bee:	623b      	str	r3, [r7, #32]
 8003bf0:	e038      	b.n	8003c64 <StartDistSensor+0x1a4>
				} else{
					distance  = 1.1;
 8003bf2:	4b37      	ldr	r3, [pc, #220]	; (8003cd0 <StartDistSensor+0x210>)
 8003bf4:	4a3c      	ldr	r2, [pc, #240]	; (8003ce8 <StartDistSensor+0x228>)
 8003bf6:	601a      	str	r2, [r3, #0]
					counter1 = 0;
 8003bf8:	2300      	movs	r3, #0
 8003bfa:	623b      	str	r3, [r7, #32]
 8003bfc:	e032      	b.n	8003c64 <StartDistSensor+0x1a4>
				}
			}

		} else if(distance - new_distance > DIST_HYSTERESIS*step){
 8003bfe:	4b34      	ldr	r3, [pc, #208]	; (8003cd0 <StartDistSensor+0x210>)
 8003c00:	681b      	ldr	r3, [r3, #0]
 8003c02:	68b9      	ldr	r1, [r7, #8]
 8003c04:	1c18      	adds	r0, r3, #0
 8003c06:	f7fd f827 	bl	8000c58 <__aeabi_fsub>
 8003c0a:	1c03      	adds	r3, r0, #0
 8003c0c:	1c1c      	adds	r4, r3, #0
 8003c0e:	4931      	ldr	r1, [pc, #196]	; (8003cd4 <StartDistSensor+0x214>)
 8003c10:	68f8      	ldr	r0, [r7, #12]
 8003c12:	f7fc feef 	bl	80009f4 <__aeabi_fmul>
 8003c16:	1c03      	adds	r3, r0, #0
 8003c18:	1c19      	adds	r1, r3, #0
 8003c1a:	1c20      	adds	r0, r4, #0
 8003c1c:	f7fc fb64 	bl	80002e8 <__aeabi_fcmpgt>
 8003c20:	1e03      	subs	r3, r0, #0
 8003c22:	d01f      	beq.n	8003c64 <StartDistSensor+0x1a4>
			if(distance >= 0.5+step){
 8003c24:	4b2a      	ldr	r3, [pc, #168]	; (8003cd0 <StartDistSensor+0x210>)
 8003c26:	681b      	ldr	r3, [r3, #0]
 8003c28:	1c18      	adds	r0, r3, #0
 8003c2a:	f7fe ffa9 	bl	8002b80 <__aeabi_f2d>
 8003c2e:	0004      	movs	r4, r0
 8003c30:	000d      	movs	r5, r1
 8003c32:	68f8      	ldr	r0, [r7, #12]
 8003c34:	f7fe ffa4 	bl	8002b80 <__aeabi_f2d>
 8003c38:	2200      	movs	r2, #0
 8003c3a:	4b2c      	ldr	r3, [pc, #176]	; (8003cec <StartDistSensor+0x22c>)
 8003c3c:	f7fd fa50 	bl	80010e0 <__aeabi_dadd>
 8003c40:	0002      	movs	r2, r0
 8003c42:	000b      	movs	r3, r1
 8003c44:	0020      	movs	r0, r4
 8003c46:	0029      	movs	r1, r5
 8003c48:	f7fc fb1e 	bl	8000288 <__aeabi_dcmpge>
 8003c4c:	1e03      	subs	r3, r0, #0
 8003c4e:	d009      	beq.n	8003c64 <StartDistSensor+0x1a4>
				distance -= step;
 8003c50:	4b1f      	ldr	r3, [pc, #124]	; (8003cd0 <StartDistSensor+0x210>)
 8003c52:	681b      	ldr	r3, [r3, #0]
 8003c54:	68f9      	ldr	r1, [r7, #12]
 8003c56:	1c18      	adds	r0, r3, #0
 8003c58:	f7fc fffe 	bl	8000c58 <__aeabi_fsub>
 8003c5c:	1c03      	adds	r3, r0, #0
 8003c5e:	1c1a      	adds	r2, r3, #0
 8003c60:	4b1b      	ldr	r3, [pc, #108]	; (8003cd0 <StartDistSensor+0x210>)
 8003c62:	601a      	str	r2, [r3, #0]
//					counter2 = 0;
//				}
//			}
		}

		if(buffer == 0 && distance > 1.05){
 8003c64:	69fb      	ldr	r3, [r7, #28]
 8003c66:	2b00      	cmp	r3, #0
 8003c68:	d114      	bne.n	8003c94 <StartDistSensor+0x1d4>
 8003c6a:	4b19      	ldr	r3, [pc, #100]	; (8003cd0 <StartDistSensor+0x210>)
 8003c6c:	681b      	ldr	r3, [r3, #0]
 8003c6e:	1c18      	adds	r0, r3, #0
 8003c70:	f7fe ff86 	bl	8002b80 <__aeabi_f2d>
 8003c74:	4a1e      	ldr	r2, [pc, #120]	; (8003cf0 <StartDistSensor+0x230>)
 8003c76:	4b1f      	ldr	r3, [pc, #124]	; (8003cf4 <StartDistSensor+0x234>)
 8003c78:	f7fc fafc 	bl	8000274 <__aeabi_dcmpgt>
 8003c7c:	1e03      	subs	r3, r0, #0
 8003c7e:	d009      	beq.n	8003c94 <StartDistSensor+0x1d4>
			buffer = 1;
 8003c80:	2301      	movs	r3, #1
 8003c82:	61fb      	str	r3, [r7, #28]
			HAL_UART_Transmit(&huart1, "Nobody is on the street\n", 25, 1000);
 8003c84:	23fa      	movs	r3, #250	; 0xfa
 8003c86:	009b      	lsls	r3, r3, #2
 8003c88:	491b      	ldr	r1, [pc, #108]	; (8003cf8 <StartDistSensor+0x238>)
 8003c8a:	481c      	ldr	r0, [pc, #112]	; (8003cfc <StartDistSensor+0x23c>)
 8003c8c:	2219      	movs	r2, #25
 8003c8e:	f002 fed7 	bl	8006a40 <HAL_UART_Transmit>
 8003c92:	e014      	b.n	8003cbe <StartDistSensor+0x1fe>
		} else if(buffer == 1 && distance < 1){
 8003c94:	69fb      	ldr	r3, [r7, #28]
 8003c96:	2b01      	cmp	r3, #1
 8003c98:	d111      	bne.n	8003cbe <StartDistSensor+0x1fe>
 8003c9a:	4b0d      	ldr	r3, [pc, #52]	; (8003cd0 <StartDistSensor+0x210>)
 8003c9c:	681b      	ldr	r3, [r3, #0]
 8003c9e:	21fe      	movs	r1, #254	; 0xfe
 8003ca0:	0589      	lsls	r1, r1, #22
 8003ca2:	1c18      	adds	r0, r3, #0
 8003ca4:	f7fc fb0c 	bl	80002c0 <__aeabi_fcmplt>
 8003ca8:	1e03      	subs	r3, r0, #0
 8003caa:	d008      	beq.n	8003cbe <StartDistSensor+0x1fe>
			buffer = 0;
 8003cac:	2300      	movs	r3, #0
 8003cae:	61fb      	str	r3, [r7, #28]
			HAL_UART_Transmit(&huart1, "Somebody is coming\n", 20, 1000);
 8003cb0:	23fa      	movs	r3, #250	; 0xfa
 8003cb2:	009b      	lsls	r3, r3, #2
 8003cb4:	4912      	ldr	r1, [pc, #72]	; (8003d00 <StartDistSensor+0x240>)
 8003cb6:	4811      	ldr	r0, [pc, #68]	; (8003cfc <StartDistSensor+0x23c>)
 8003cb8:	2214      	movs	r2, #20
 8003cba:	f002 fec1 	bl	8006a40 <HAL_UART_Transmit>
		}

		osDelay(50);
 8003cbe:	2032      	movs	r0, #50	; 0x32
 8003cc0:	f003 fc77 	bl	80075b2 <osDelay>
		counter_dist = 0;
 8003cc4:	e708      	b.n	8003ad8 <StartDistSensor+0x18>
 8003cc6:	46c0      	nop			; (mov r8, r8)
 8003cc8:	3bea0ea1 	.word	0x3bea0ea1
 8003ccc:	00001f3f 	.word	0x00001f3f
 8003cd0:	200002f0 	.word	0x200002f0
 8003cd4:	41a00000 	.word	0x41a00000
 8003cd8:	33333333 	.word	0x33333333
 8003cdc:	3ff33333 	.word	0x3ff33333
 8003ce0:	611a7b96 	.word	0x611a7b96
 8003ce4:	3fa1a7b9 	.word	0x3fa1a7b9
 8003ce8:	3f8ccccd 	.word	0x3f8ccccd
 8003cec:	3fe00000 	.word	0x3fe00000
 8003cf0:	cccccccd 	.word	0xcccccccd
 8003cf4:	3ff0cccc 	.word	0x3ff0cccc
 8003cf8:	0800939c 	.word	0x0800939c
 8003cfc:	200013e8 	.word	0x200013e8
 8003d00:	080093b8 	.word	0x080093b8

08003d04 <StartButton>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartButton */
void StartButton(void const * argument)
{
 8003d04:	b580      	push	{r7, lr}
 8003d06:	b082      	sub	sp, #8
 8003d08:	af00      	add	r7, sp, #0
 8003d0a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartButton */
  /* Infinite loop */
	for(;;)
	{
		if(HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_0) == GPIO_PIN_SET){
 8003d0c:	2390      	movs	r3, #144	; 0x90
 8003d0e:	05db      	lsls	r3, r3, #23
 8003d10:	2101      	movs	r1, #1
 8003d12:	0018      	movs	r0, r3
 8003d14:	f001 fa70 	bl	80051f8 <HAL_GPIO_ReadPin>
 8003d18:	0003      	movs	r3, r0
 8003d1a:	2b01      	cmp	r3, #1
 8003d1c:	d163      	bne.n	8003de6 <StartButton+0xe2>
			osDelay(20);
 8003d1e:	2014      	movs	r0, #20
 8003d20:	f003 fc47 	bl	80075b2 <osDelay>
			if(HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_0) == GPIO_PIN_SET){
 8003d24:	2390      	movs	r3, #144	; 0x90
 8003d26:	05db      	lsls	r3, r3, #23
 8003d28:	2101      	movs	r1, #1
 8003d2a:	0018      	movs	r0, r3
 8003d2c:	f001 fa64 	bl	80051f8 <HAL_GPIO_ReadPin>
 8003d30:	0003      	movs	r3, r0
 8003d32:	2b01      	cmp	r3, #1
 8003d34:	d157      	bne.n	8003de6 <StartButton+0xe2>
				switch(OPERATOR){
 8003d36:	4b2e      	ldr	r3, [pc, #184]	; (8003df0 <StartButton+0xec>)
 8003d38:	681b      	ldr	r3, [r3, #0]
 8003d3a:	2b00      	cmp	r3, #0
 8003d3c:	d002      	beq.n	8003d44 <StartButton+0x40>
 8003d3e:	2b01      	cmp	r3, #1
 8003d40:	d031      	beq.n	8003da6 <StartButton+0xa2>
 8003d42:	e03b      	b.n	8003dbc <StartButton+0xb8>
				case 0:
					OPERATOR = 1;
 8003d44:	4b2a      	ldr	r3, [pc, #168]	; (8003df0 <StartButton+0xec>)
 8003d46:	2201      	movs	r2, #1
 8003d48:	601a      	str	r2, [r3, #0]
					HAL_UART_Transmit(&huart1, "Operator turned on the light\n", 30, 1000);
 8003d4a:	23fa      	movs	r3, #250	; 0xfa
 8003d4c:	009b      	lsls	r3, r3, #2
 8003d4e:	4929      	ldr	r1, [pc, #164]	; (8003df4 <StartButton+0xf0>)
 8003d50:	4829      	ldr	r0, [pc, #164]	; (8003df8 <StartButton+0xf4>)
 8003d52:	221e      	movs	r2, #30
 8003d54:	f002 fe74 	bl	8006a40 <HAL_UART_Transmit>
					osDelay(50);
 8003d58:	2032      	movs	r0, #50	; 0x32
 8003d5a:	f003 fc2a 	bl	80075b2 <osDelay>
					TIM2->CCR1 = led_max_power;
 8003d5e:	4b27      	ldr	r3, [pc, #156]	; (8003dfc <StartButton+0xf8>)
 8003d60:	681a      	ldr	r2, [r3, #0]
 8003d62:	2380      	movs	r3, #128	; 0x80
 8003d64:	05db      	lsls	r3, r3, #23
 8003d66:	635a      	str	r2, [r3, #52]	; 0x34
					TIM2->CCR2 = led_max_power;
 8003d68:	4b24      	ldr	r3, [pc, #144]	; (8003dfc <StartButton+0xf8>)
 8003d6a:	681a      	ldr	r2, [r3, #0]
 8003d6c:	2380      	movs	r3, #128	; 0x80
 8003d6e:	05db      	lsls	r3, r3, #23
 8003d70:	639a      	str	r2, [r3, #56]	; 0x38
					TIM2->CCR3 = led_max_power;
 8003d72:	4b22      	ldr	r3, [pc, #136]	; (8003dfc <StartButton+0xf8>)
 8003d74:	681a      	ldr	r2, [r3, #0]
 8003d76:	2380      	movs	r3, #128	; 0x80
 8003d78:	05db      	lsls	r3, r3, #23
 8003d7a:	63da      	str	r2, [r3, #60]	; 0x3c

					TIM3->CCR2 = led_max_power;
 8003d7c:	4b1f      	ldr	r3, [pc, #124]	; (8003dfc <StartButton+0xf8>)
 8003d7e:	681a      	ldr	r2, [r3, #0]
 8003d80:	4b1f      	ldr	r3, [pc, #124]	; (8003e00 <StartButton+0xfc>)
 8003d82:	639a      	str	r2, [r3, #56]	; 0x38
					TIM3->CCR3 = led_max_power;
 8003d84:	4b1d      	ldr	r3, [pc, #116]	; (8003dfc <StartButton+0xf8>)
 8003d86:	681a      	ldr	r2, [r3, #0]
 8003d88:	4b1d      	ldr	r3, [pc, #116]	; (8003e00 <StartButton+0xfc>)
 8003d8a:	63da      	str	r2, [r3, #60]	; 0x3c
					TIM3->CCR4 = led_max_power;
 8003d8c:	4b1b      	ldr	r3, [pc, #108]	; (8003dfc <StartButton+0xf8>)
 8003d8e:	681a      	ldr	r2, [r3, #0]
 8003d90:	4b1b      	ldr	r3, [pc, #108]	; (8003e00 <StartButton+0xfc>)
 8003d92:	641a      	str	r2, [r3, #64]	; 0x40

					TIM16->CCR1 = led_max_power;
 8003d94:	4b19      	ldr	r3, [pc, #100]	; (8003dfc <StartButton+0xf8>)
 8003d96:	681a      	ldr	r2, [r3, #0]
 8003d98:	4b1a      	ldr	r3, [pc, #104]	; (8003e04 <StartButton+0x100>)
 8003d9a:	635a      	str	r2, [r3, #52]	; 0x34
					TIM17->CCR1 = led_max_power;
 8003d9c:	4b17      	ldr	r3, [pc, #92]	; (8003dfc <StartButton+0xf8>)
 8003d9e:	681a      	ldr	r2, [r3, #0]
 8003da0:	4b19      	ldr	r3, [pc, #100]	; (8003e08 <StartButton+0x104>)
 8003da2:	635a      	str	r2, [r3, #52]	; 0x34
					break;
 8003da4:	e00a      	b.n	8003dbc <StartButton+0xb8>
				case 1:
					OPERATOR = 0;
 8003da6:	4b12      	ldr	r3, [pc, #72]	; (8003df0 <StartButton+0xec>)
 8003da8:	2200      	movs	r2, #0
 8003daa:	601a      	str	r2, [r3, #0]
					HAL_UART_Transmit(&huart1, "Operator turned off the light\n", 31, 1000);
 8003dac:	23fa      	movs	r3, #250	; 0xfa
 8003dae:	009b      	lsls	r3, r3, #2
 8003db0:	4916      	ldr	r1, [pc, #88]	; (8003e0c <StartButton+0x108>)
 8003db2:	4811      	ldr	r0, [pc, #68]	; (8003df8 <StartButton+0xf4>)
 8003db4:	221f      	movs	r2, #31
 8003db6:	f002 fe43 	bl	8006a40 <HAL_UART_Transmit>
					break;
 8003dba:	46c0      	nop			; (mov r8, r8)
				}
				while(1){
					if(HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_0) == GPIO_PIN_RESET){
 8003dbc:	2390      	movs	r3, #144	; 0x90
 8003dbe:	05db      	lsls	r3, r3, #23
 8003dc0:	2101      	movs	r1, #1
 8003dc2:	0018      	movs	r0, r3
 8003dc4:	f001 fa18 	bl	80051f8 <HAL_GPIO_ReadPin>
 8003dc8:	1e03      	subs	r3, r0, #0
 8003dca:	d1f7      	bne.n	8003dbc <StartButton+0xb8>
						osDelay(20);
 8003dcc:	2014      	movs	r0, #20
 8003dce:	f003 fbf0 	bl	80075b2 <osDelay>
						if(HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_0) == GPIO_PIN_RESET)
 8003dd2:	2390      	movs	r3, #144	; 0x90
 8003dd4:	05db      	lsls	r3, r3, #23
 8003dd6:	2101      	movs	r1, #1
 8003dd8:	0018      	movs	r0, r3
 8003dda:	f001 fa0d 	bl	80051f8 <HAL_GPIO_ReadPin>
 8003dde:	1e03      	subs	r3, r0, #0
 8003de0:	d000      	beq.n	8003de4 <StartButton+0xe0>
					if(HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_0) == GPIO_PIN_RESET){
 8003de2:	e7eb      	b.n	8003dbc <StartButton+0xb8>
							break;
 8003de4:	46c0      	nop			; (mov r8, r8)
					}
				}
			}
		}
		osDelay(1);
 8003de6:	2001      	movs	r0, #1
 8003de8:	f003 fbe3 	bl	80075b2 <osDelay>
		if(HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_0) == GPIO_PIN_SET){
 8003dec:	e78e      	b.n	8003d0c <StartButton+0x8>
 8003dee:	46c0      	nop			; (mov r8, r8)
 8003df0:	200002f4 	.word	0x200002f4
 8003df4:	080093cc 	.word	0x080093cc
 8003df8:	200013e8 	.word	0x200013e8
 8003dfc:	20000000 	.word	0x20000000
 8003e00:	40000400 	.word	0x40000400
 8003e04:	40014400 	.word	0x40014400
 8003e08:	40014800 	.word	0x40014800
 8003e0c:	080093ec 	.word	0x080093ec

08003e10 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003e10:	b580      	push	{r7, lr}
 8003e12:	b082      	sub	sp, #8
 8003e14:	af00      	add	r7, sp, #0
 8003e16:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM1) {
 8003e18:	687b      	ldr	r3, [r7, #4]
 8003e1a:	681b      	ldr	r3, [r3, #0]
 8003e1c:	4a04      	ldr	r2, [pc, #16]	; (8003e30 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8003e1e:	4293      	cmp	r3, r2
 8003e20:	d101      	bne.n	8003e26 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8003e22:	f000 fabd 	bl	80043a0 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8003e26:	46c0      	nop			; (mov r8, r8)
 8003e28:	46bd      	mov	sp, r7
 8003e2a:	b002      	add	sp, #8
 8003e2c:	bd80      	pop	{r7, pc}
 8003e2e:	46c0      	nop			; (mov r8, r8)
 8003e30:	40012c00 	.word	0x40012c00

08003e34 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8003e34:	b580      	push	{r7, lr}
 8003e36:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8003e38:	46c0      	nop			; (mov r8, r8)
 8003e3a:	46bd      	mov	sp, r7
 8003e3c:	bd80      	pop	{r7, pc}
	...

08003e40 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                                                                /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8003e40:	b580      	push	{r7, lr}
 8003e42:	b082      	sub	sp, #8
 8003e44:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003e46:	4b0f      	ldr	r3, [pc, #60]	; (8003e84 <HAL_MspInit+0x44>)
 8003e48:	699a      	ldr	r2, [r3, #24]
 8003e4a:	4b0e      	ldr	r3, [pc, #56]	; (8003e84 <HAL_MspInit+0x44>)
 8003e4c:	2101      	movs	r1, #1
 8003e4e:	430a      	orrs	r2, r1
 8003e50:	619a      	str	r2, [r3, #24]
 8003e52:	4b0c      	ldr	r3, [pc, #48]	; (8003e84 <HAL_MspInit+0x44>)
 8003e54:	699b      	ldr	r3, [r3, #24]
 8003e56:	2201      	movs	r2, #1
 8003e58:	4013      	ands	r3, r2
 8003e5a:	607b      	str	r3, [r7, #4]
 8003e5c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8003e5e:	4b09      	ldr	r3, [pc, #36]	; (8003e84 <HAL_MspInit+0x44>)
 8003e60:	69da      	ldr	r2, [r3, #28]
 8003e62:	4b08      	ldr	r3, [pc, #32]	; (8003e84 <HAL_MspInit+0x44>)
 8003e64:	2180      	movs	r1, #128	; 0x80
 8003e66:	0549      	lsls	r1, r1, #21
 8003e68:	430a      	orrs	r2, r1
 8003e6a:	61da      	str	r2, [r3, #28]
 8003e6c:	4b05      	ldr	r3, [pc, #20]	; (8003e84 <HAL_MspInit+0x44>)
 8003e6e:	69da      	ldr	r2, [r3, #28]
 8003e70:	2380      	movs	r3, #128	; 0x80
 8003e72:	055b      	lsls	r3, r3, #21
 8003e74:	4013      	ands	r3, r2
 8003e76:	603b      	str	r3, [r7, #0]
 8003e78:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8003e7a:	46c0      	nop			; (mov r8, r8)
 8003e7c:	46bd      	mov	sp, r7
 8003e7e:	b002      	add	sp, #8
 8003e80:	bd80      	pop	{r7, pc}
 8003e82:	46c0      	nop			; (mov r8, r8)
 8003e84:	40021000 	.word	0x40021000

08003e88 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8003e88:	b580      	push	{r7, lr}
 8003e8a:	b08a      	sub	sp, #40	; 0x28
 8003e8c:	af00      	add	r7, sp, #0
 8003e8e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003e90:	2314      	movs	r3, #20
 8003e92:	18fb      	adds	r3, r7, r3
 8003e94:	0018      	movs	r0, r3
 8003e96:	2314      	movs	r3, #20
 8003e98:	001a      	movs	r2, r3
 8003e9a:	2100      	movs	r1, #0
 8003e9c:	f004 fbe8 	bl	8008670 <memset>
  if(hadc->Instance==ADC1)
 8003ea0:	687b      	ldr	r3, [r7, #4]
 8003ea2:	681b      	ldr	r3, [r3, #0]
 8003ea4:	4a19      	ldr	r2, [pc, #100]	; (8003f0c <HAL_ADC_MspInit+0x84>)
 8003ea6:	4293      	cmp	r3, r2
 8003ea8:	d12c      	bne.n	8003f04 <HAL_ADC_MspInit+0x7c>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8003eaa:	4b19      	ldr	r3, [pc, #100]	; (8003f10 <HAL_ADC_MspInit+0x88>)
 8003eac:	699a      	ldr	r2, [r3, #24]
 8003eae:	4b18      	ldr	r3, [pc, #96]	; (8003f10 <HAL_ADC_MspInit+0x88>)
 8003eb0:	2180      	movs	r1, #128	; 0x80
 8003eb2:	0089      	lsls	r1, r1, #2
 8003eb4:	430a      	orrs	r2, r1
 8003eb6:	619a      	str	r2, [r3, #24]
 8003eb8:	4b15      	ldr	r3, [pc, #84]	; (8003f10 <HAL_ADC_MspInit+0x88>)
 8003eba:	699a      	ldr	r2, [r3, #24]
 8003ebc:	2380      	movs	r3, #128	; 0x80
 8003ebe:	009b      	lsls	r3, r3, #2
 8003ec0:	4013      	ands	r3, r2
 8003ec2:	613b      	str	r3, [r7, #16]
 8003ec4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003ec6:	4b12      	ldr	r3, [pc, #72]	; (8003f10 <HAL_ADC_MspInit+0x88>)
 8003ec8:	695a      	ldr	r2, [r3, #20]
 8003eca:	4b11      	ldr	r3, [pc, #68]	; (8003f10 <HAL_ADC_MspInit+0x88>)
 8003ecc:	2180      	movs	r1, #128	; 0x80
 8003ece:	0289      	lsls	r1, r1, #10
 8003ed0:	430a      	orrs	r2, r1
 8003ed2:	615a      	str	r2, [r3, #20]
 8003ed4:	4b0e      	ldr	r3, [pc, #56]	; (8003f10 <HAL_ADC_MspInit+0x88>)
 8003ed6:	695a      	ldr	r2, [r3, #20]
 8003ed8:	2380      	movs	r3, #128	; 0x80
 8003eda:	029b      	lsls	r3, r3, #10
 8003edc:	4013      	ands	r3, r2
 8003ede:	60fb      	str	r3, [r7, #12]
 8003ee0:	68fb      	ldr	r3, [r7, #12]
    /**ADC GPIO Configuration
    PA4     ------> ADC_IN4
    */
    GPIO_InitStruct.Pin = light_sensor_Pin;
 8003ee2:	2114      	movs	r1, #20
 8003ee4:	187b      	adds	r3, r7, r1
 8003ee6:	2210      	movs	r2, #16
 8003ee8:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8003eea:	187b      	adds	r3, r7, r1
 8003eec:	2203      	movs	r2, #3
 8003eee:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003ef0:	187b      	adds	r3, r7, r1
 8003ef2:	2200      	movs	r2, #0
 8003ef4:	609a      	str	r2, [r3, #8]
    HAL_GPIO_Init(light_sensor_GPIO_Port, &GPIO_InitStruct);
 8003ef6:	187a      	adds	r2, r7, r1
 8003ef8:	2390      	movs	r3, #144	; 0x90
 8003efa:	05db      	lsls	r3, r3, #23
 8003efc:	0011      	movs	r1, r2
 8003efe:	0018      	movs	r0, r3
 8003f00:	f001 f80a 	bl	8004f18 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8003f04:	46c0      	nop			; (mov r8, r8)
 8003f06:	46bd      	mov	sp, r7
 8003f08:	b00a      	add	sp, #40	; 0x28
 8003f0a:	bd80      	pop	{r7, pc}
 8003f0c:	40012400 	.word	0x40012400
 8003f10:	40021000 	.word	0x40021000

08003f14 <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 8003f14:	b580      	push	{r7, lr}
 8003f16:	b084      	sub	sp, #16
 8003f18:	af00      	add	r7, sp, #0
 8003f1a:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM2)
 8003f1c:	687b      	ldr	r3, [r7, #4]
 8003f1e:	681a      	ldr	r2, [r3, #0]
 8003f20:	2380      	movs	r3, #128	; 0x80
 8003f22:	05db      	lsls	r3, r3, #23
 8003f24:	429a      	cmp	r2, r3
 8003f26:	d10c      	bne.n	8003f42 <HAL_TIM_PWM_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8003f28:	4b10      	ldr	r3, [pc, #64]	; (8003f6c <HAL_TIM_PWM_MspInit+0x58>)
 8003f2a:	69da      	ldr	r2, [r3, #28]
 8003f2c:	4b0f      	ldr	r3, [pc, #60]	; (8003f6c <HAL_TIM_PWM_MspInit+0x58>)
 8003f2e:	2101      	movs	r1, #1
 8003f30:	430a      	orrs	r2, r1
 8003f32:	61da      	str	r2, [r3, #28]
 8003f34:	4b0d      	ldr	r3, [pc, #52]	; (8003f6c <HAL_TIM_PWM_MspInit+0x58>)
 8003f36:	69db      	ldr	r3, [r3, #28]
 8003f38:	2201      	movs	r2, #1
 8003f3a:	4013      	ands	r3, r2
 8003f3c:	60fb      	str	r3, [r7, #12]
 8003f3e:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 8003f40:	e010      	b.n	8003f64 <HAL_TIM_PWM_MspInit+0x50>
  else if(htim_pwm->Instance==TIM3)
 8003f42:	687b      	ldr	r3, [r7, #4]
 8003f44:	681b      	ldr	r3, [r3, #0]
 8003f46:	4a0a      	ldr	r2, [pc, #40]	; (8003f70 <HAL_TIM_PWM_MspInit+0x5c>)
 8003f48:	4293      	cmp	r3, r2
 8003f4a:	d10b      	bne.n	8003f64 <HAL_TIM_PWM_MspInit+0x50>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8003f4c:	4b07      	ldr	r3, [pc, #28]	; (8003f6c <HAL_TIM_PWM_MspInit+0x58>)
 8003f4e:	69da      	ldr	r2, [r3, #28]
 8003f50:	4b06      	ldr	r3, [pc, #24]	; (8003f6c <HAL_TIM_PWM_MspInit+0x58>)
 8003f52:	2102      	movs	r1, #2
 8003f54:	430a      	orrs	r2, r1
 8003f56:	61da      	str	r2, [r3, #28]
 8003f58:	4b04      	ldr	r3, [pc, #16]	; (8003f6c <HAL_TIM_PWM_MspInit+0x58>)
 8003f5a:	69db      	ldr	r3, [r3, #28]
 8003f5c:	2202      	movs	r2, #2
 8003f5e:	4013      	ands	r3, r2
 8003f60:	60bb      	str	r3, [r7, #8]
 8003f62:	68bb      	ldr	r3, [r7, #8]
}
 8003f64:	46c0      	nop			; (mov r8, r8)
 8003f66:	46bd      	mov	sp, r7
 8003f68:	b004      	add	sp, #16
 8003f6a:	bd80      	pop	{r7, pc}
 8003f6c:	40021000 	.word	0x40021000
 8003f70:	40000400 	.word	0x40000400

08003f74 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8003f74:	b580      	push	{r7, lr}
 8003f76:	b084      	sub	sp, #16
 8003f78:	af00      	add	r7, sp, #0
 8003f7a:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM16)
 8003f7c:	687b      	ldr	r3, [r7, #4]
 8003f7e:	681b      	ldr	r3, [r3, #0]
 8003f80:	4a14      	ldr	r2, [pc, #80]	; (8003fd4 <HAL_TIM_Base_MspInit+0x60>)
 8003f82:	4293      	cmp	r3, r2
 8003f84:	d10e      	bne.n	8003fa4 <HAL_TIM_Base_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM16_MspInit 0 */

  /* USER CODE END TIM16_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM16_CLK_ENABLE();
 8003f86:	4b14      	ldr	r3, [pc, #80]	; (8003fd8 <HAL_TIM_Base_MspInit+0x64>)
 8003f88:	699a      	ldr	r2, [r3, #24]
 8003f8a:	4b13      	ldr	r3, [pc, #76]	; (8003fd8 <HAL_TIM_Base_MspInit+0x64>)
 8003f8c:	2180      	movs	r1, #128	; 0x80
 8003f8e:	0289      	lsls	r1, r1, #10
 8003f90:	430a      	orrs	r2, r1
 8003f92:	619a      	str	r2, [r3, #24]
 8003f94:	4b10      	ldr	r3, [pc, #64]	; (8003fd8 <HAL_TIM_Base_MspInit+0x64>)
 8003f96:	699a      	ldr	r2, [r3, #24]
 8003f98:	2380      	movs	r3, #128	; 0x80
 8003f9a:	029b      	lsls	r3, r3, #10
 8003f9c:	4013      	ands	r3, r2
 8003f9e:	60fb      	str	r3, [r7, #12]
 8003fa0:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM17_MspInit 1 */

  /* USER CODE END TIM17_MspInit 1 */
  }

}
 8003fa2:	e012      	b.n	8003fca <HAL_TIM_Base_MspInit+0x56>
  else if(htim_base->Instance==TIM17)
 8003fa4:	687b      	ldr	r3, [r7, #4]
 8003fa6:	681b      	ldr	r3, [r3, #0]
 8003fa8:	4a0c      	ldr	r2, [pc, #48]	; (8003fdc <HAL_TIM_Base_MspInit+0x68>)
 8003faa:	4293      	cmp	r3, r2
 8003fac:	d10d      	bne.n	8003fca <HAL_TIM_Base_MspInit+0x56>
    __HAL_RCC_TIM17_CLK_ENABLE();
 8003fae:	4b0a      	ldr	r3, [pc, #40]	; (8003fd8 <HAL_TIM_Base_MspInit+0x64>)
 8003fb0:	699a      	ldr	r2, [r3, #24]
 8003fb2:	4b09      	ldr	r3, [pc, #36]	; (8003fd8 <HAL_TIM_Base_MspInit+0x64>)
 8003fb4:	2180      	movs	r1, #128	; 0x80
 8003fb6:	02c9      	lsls	r1, r1, #11
 8003fb8:	430a      	orrs	r2, r1
 8003fba:	619a      	str	r2, [r3, #24]
 8003fbc:	4b06      	ldr	r3, [pc, #24]	; (8003fd8 <HAL_TIM_Base_MspInit+0x64>)
 8003fbe:	699a      	ldr	r2, [r3, #24]
 8003fc0:	2380      	movs	r3, #128	; 0x80
 8003fc2:	02db      	lsls	r3, r3, #11
 8003fc4:	4013      	ands	r3, r2
 8003fc6:	60bb      	str	r3, [r7, #8]
 8003fc8:	68bb      	ldr	r3, [r7, #8]
}
 8003fca:	46c0      	nop			; (mov r8, r8)
 8003fcc:	46bd      	mov	sp, r7
 8003fce:	b004      	add	sp, #16
 8003fd0:	bd80      	pop	{r7, pc}
 8003fd2:	46c0      	nop			; (mov r8, r8)
 8003fd4:	40014400 	.word	0x40014400
 8003fd8:	40021000 	.word	0x40021000
 8003fdc:	40014800 	.word	0x40014800

08003fe0 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8003fe0:	b580      	push	{r7, lr}
 8003fe2:	b08c      	sub	sp, #48	; 0x30
 8003fe4:	af00      	add	r7, sp, #0
 8003fe6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003fe8:	231c      	movs	r3, #28
 8003fea:	18fb      	adds	r3, r7, r3
 8003fec:	0018      	movs	r0, r3
 8003fee:	2314      	movs	r3, #20
 8003ff0:	001a      	movs	r2, r3
 8003ff2:	2100      	movs	r1, #0
 8003ff4:	f004 fb3c 	bl	8008670 <memset>
  if(htim->Instance==TIM2)
 8003ff8:	687b      	ldr	r3, [r7, #4]
 8003ffa:	681a      	ldr	r2, [r3, #0]
 8003ffc:	2380      	movs	r3, #128	; 0x80
 8003ffe:	05db      	lsls	r3, r3, #23
 8004000:	429a      	cmp	r2, r3
 8004002:	d125      	bne.n	8004050 <HAL_TIM_MspPostInit+0x70>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8004004:	4b54      	ldr	r3, [pc, #336]	; (8004158 <HAL_TIM_MspPostInit+0x178>)
 8004006:	695a      	ldr	r2, [r3, #20]
 8004008:	4b53      	ldr	r3, [pc, #332]	; (8004158 <HAL_TIM_MspPostInit+0x178>)
 800400a:	2180      	movs	r1, #128	; 0x80
 800400c:	0289      	lsls	r1, r1, #10
 800400e:	430a      	orrs	r2, r1
 8004010:	615a      	str	r2, [r3, #20]
 8004012:	4b51      	ldr	r3, [pc, #324]	; (8004158 <HAL_TIM_MspPostInit+0x178>)
 8004014:	695a      	ldr	r2, [r3, #20]
 8004016:	2380      	movs	r3, #128	; 0x80
 8004018:	029b      	lsls	r3, r3, #10
 800401a:	4013      	ands	r3, r2
 800401c:	61bb      	str	r3, [r7, #24]
 800401e:	69bb      	ldr	r3, [r7, #24]
    /**TIM2 GPIO Configuration
    PA1     ------> TIM2_CH2
    PA2     ------> TIM2_CH3
    PA15     ------> TIM2_CH1
    */
    GPIO_InitStruct.Pin = LED_T2CH2_Pin|GPIO_PIN_2|LED_CH1_Pin;
 8004020:	211c      	movs	r1, #28
 8004022:	187b      	adds	r3, r7, r1
 8004024:	4a4d      	ldr	r2, [pc, #308]	; (800415c <HAL_TIM_MspPostInit+0x17c>)
 8004026:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004028:	187b      	adds	r3, r7, r1
 800402a:	2202      	movs	r2, #2
 800402c:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800402e:	187b      	adds	r3, r7, r1
 8004030:	2200      	movs	r2, #0
 8004032:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004034:	187b      	adds	r3, r7, r1
 8004036:	2200      	movs	r2, #0
 8004038:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM2;
 800403a:	187b      	adds	r3, r7, r1
 800403c:	2202      	movs	r2, #2
 800403e:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004040:	187a      	adds	r2, r7, r1
 8004042:	2390      	movs	r3, #144	; 0x90
 8004044:	05db      	lsls	r3, r3, #23
 8004046:	0011      	movs	r1, r2
 8004048:	0018      	movs	r0, r3
 800404a:	f000 ff65 	bl	8004f18 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM17_MspPostInit 1 */

  /* USER CODE END TIM17_MspPostInit 1 */
  }

}
 800404e:	e07e      	b.n	800414e <HAL_TIM_MspPostInit+0x16e>
  else if(htim->Instance==TIM3)
 8004050:	687b      	ldr	r3, [r7, #4]
 8004052:	681b      	ldr	r3, [r3, #0]
 8004054:	4a42      	ldr	r2, [pc, #264]	; (8004160 <HAL_TIM_MspPostInit+0x180>)
 8004056:	4293      	cmp	r3, r2
 8004058:	d124      	bne.n	80040a4 <HAL_TIM_MspPostInit+0xc4>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800405a:	4b3f      	ldr	r3, [pc, #252]	; (8004158 <HAL_TIM_MspPostInit+0x178>)
 800405c:	695a      	ldr	r2, [r3, #20]
 800405e:	4b3e      	ldr	r3, [pc, #248]	; (8004158 <HAL_TIM_MspPostInit+0x178>)
 8004060:	2180      	movs	r1, #128	; 0x80
 8004062:	02c9      	lsls	r1, r1, #11
 8004064:	430a      	orrs	r2, r1
 8004066:	615a      	str	r2, [r3, #20]
 8004068:	4b3b      	ldr	r3, [pc, #236]	; (8004158 <HAL_TIM_MspPostInit+0x178>)
 800406a:	695a      	ldr	r2, [r3, #20]
 800406c:	2380      	movs	r3, #128	; 0x80
 800406e:	02db      	lsls	r3, r3, #11
 8004070:	4013      	ands	r3, r2
 8004072:	617b      	str	r3, [r7, #20]
 8004074:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_5;
 8004076:	211c      	movs	r1, #28
 8004078:	187b      	adds	r3, r7, r1
 800407a:	2223      	movs	r2, #35	; 0x23
 800407c:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800407e:	187b      	adds	r3, r7, r1
 8004080:	2202      	movs	r2, #2
 8004082:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004084:	187b      	adds	r3, r7, r1
 8004086:	2200      	movs	r2, #0
 8004088:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800408a:	187b      	adds	r3, r7, r1
 800408c:	2200      	movs	r2, #0
 800408e:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM3;
 8004090:	187b      	adds	r3, r7, r1
 8004092:	2201      	movs	r2, #1
 8004094:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004096:	187b      	adds	r3, r7, r1
 8004098:	4a32      	ldr	r2, [pc, #200]	; (8004164 <HAL_TIM_MspPostInit+0x184>)
 800409a:	0019      	movs	r1, r3
 800409c:	0010      	movs	r0, r2
 800409e:	f000 ff3b 	bl	8004f18 <HAL_GPIO_Init>
}
 80040a2:	e054      	b.n	800414e <HAL_TIM_MspPostInit+0x16e>
  else if(htim->Instance==TIM16)
 80040a4:	687b      	ldr	r3, [r7, #4]
 80040a6:	681b      	ldr	r3, [r3, #0]
 80040a8:	4a2f      	ldr	r2, [pc, #188]	; (8004168 <HAL_TIM_MspPostInit+0x188>)
 80040aa:	4293      	cmp	r3, r2
 80040ac:	d125      	bne.n	80040fa <HAL_TIM_MspPostInit+0x11a>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80040ae:	4b2a      	ldr	r3, [pc, #168]	; (8004158 <HAL_TIM_MspPostInit+0x178>)
 80040b0:	695a      	ldr	r2, [r3, #20]
 80040b2:	4b29      	ldr	r3, [pc, #164]	; (8004158 <HAL_TIM_MspPostInit+0x178>)
 80040b4:	2180      	movs	r1, #128	; 0x80
 80040b6:	02c9      	lsls	r1, r1, #11
 80040b8:	430a      	orrs	r2, r1
 80040ba:	615a      	str	r2, [r3, #20]
 80040bc:	4b26      	ldr	r3, [pc, #152]	; (8004158 <HAL_TIM_MspPostInit+0x178>)
 80040be:	695a      	ldr	r2, [r3, #20]
 80040c0:	2380      	movs	r3, #128	; 0x80
 80040c2:	02db      	lsls	r3, r3, #11
 80040c4:	4013      	ands	r3, r2
 80040c6:	613b      	str	r3, [r7, #16]
 80040c8:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 80040ca:	211c      	movs	r1, #28
 80040cc:	187b      	adds	r3, r7, r1
 80040ce:	2280      	movs	r2, #128	; 0x80
 80040d0:	0052      	lsls	r2, r2, #1
 80040d2:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80040d4:	187b      	adds	r3, r7, r1
 80040d6:	2202      	movs	r2, #2
 80040d8:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80040da:	187b      	adds	r3, r7, r1
 80040dc:	2200      	movs	r2, #0
 80040de:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80040e0:	187b      	adds	r3, r7, r1
 80040e2:	2200      	movs	r2, #0
 80040e4:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM16;
 80040e6:	187b      	adds	r3, r7, r1
 80040e8:	2202      	movs	r2, #2
 80040ea:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80040ec:	187b      	adds	r3, r7, r1
 80040ee:	4a1d      	ldr	r2, [pc, #116]	; (8004164 <HAL_TIM_MspPostInit+0x184>)
 80040f0:	0019      	movs	r1, r3
 80040f2:	0010      	movs	r0, r2
 80040f4:	f000 ff10 	bl	8004f18 <HAL_GPIO_Init>
}
 80040f8:	e029      	b.n	800414e <HAL_TIM_MspPostInit+0x16e>
  else if(htim->Instance==TIM17)
 80040fa:	687b      	ldr	r3, [r7, #4]
 80040fc:	681b      	ldr	r3, [r3, #0]
 80040fe:	4a1b      	ldr	r2, [pc, #108]	; (800416c <HAL_TIM_MspPostInit+0x18c>)
 8004100:	4293      	cmp	r3, r2
 8004102:	d124      	bne.n	800414e <HAL_TIM_MspPostInit+0x16e>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8004104:	4b14      	ldr	r3, [pc, #80]	; (8004158 <HAL_TIM_MspPostInit+0x178>)
 8004106:	695a      	ldr	r2, [r3, #20]
 8004108:	4b13      	ldr	r3, [pc, #76]	; (8004158 <HAL_TIM_MspPostInit+0x178>)
 800410a:	2180      	movs	r1, #128	; 0x80
 800410c:	02c9      	lsls	r1, r1, #11
 800410e:	430a      	orrs	r2, r1
 8004110:	615a      	str	r2, [r3, #20]
 8004112:	4b11      	ldr	r3, [pc, #68]	; (8004158 <HAL_TIM_MspPostInit+0x178>)
 8004114:	695a      	ldr	r2, [r3, #20]
 8004116:	2380      	movs	r3, #128	; 0x80
 8004118:	02db      	lsls	r3, r3, #11
 800411a:	4013      	ands	r3, r2
 800411c:	60fb      	str	r3, [r7, #12]
 800411e:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8004120:	211c      	movs	r1, #28
 8004122:	187b      	adds	r3, r7, r1
 8004124:	2280      	movs	r2, #128	; 0x80
 8004126:	0092      	lsls	r2, r2, #2
 8004128:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800412a:	187b      	adds	r3, r7, r1
 800412c:	2202      	movs	r2, #2
 800412e:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004130:	187b      	adds	r3, r7, r1
 8004132:	2200      	movs	r2, #0
 8004134:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004136:	187b      	adds	r3, r7, r1
 8004138:	2200      	movs	r2, #0
 800413a:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM17;
 800413c:	187b      	adds	r3, r7, r1
 800413e:	2202      	movs	r2, #2
 8004140:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004142:	187b      	adds	r3, r7, r1
 8004144:	4a07      	ldr	r2, [pc, #28]	; (8004164 <HAL_TIM_MspPostInit+0x184>)
 8004146:	0019      	movs	r1, r3
 8004148:	0010      	movs	r0, r2
 800414a:	f000 fee5 	bl	8004f18 <HAL_GPIO_Init>
}
 800414e:	46c0      	nop			; (mov r8, r8)
 8004150:	46bd      	mov	sp, r7
 8004152:	b00c      	add	sp, #48	; 0x30
 8004154:	bd80      	pop	{r7, pc}
 8004156:	46c0      	nop			; (mov r8, r8)
 8004158:	40021000 	.word	0x40021000
 800415c:	00008006 	.word	0x00008006
 8004160:	40000400 	.word	0x40000400
 8004164:	48000400 	.word	0x48000400
 8004168:	40014400 	.word	0x40014400
 800416c:	40014800 	.word	0x40014800

08004170 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8004170:	b580      	push	{r7, lr}
 8004172:	b08a      	sub	sp, #40	; 0x28
 8004174:	af00      	add	r7, sp, #0
 8004176:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004178:	2314      	movs	r3, #20
 800417a:	18fb      	adds	r3, r7, r3
 800417c:	0018      	movs	r0, r3
 800417e:	2314      	movs	r3, #20
 8004180:	001a      	movs	r2, r3
 8004182:	2100      	movs	r1, #0
 8004184:	f004 fa74 	bl	8008670 <memset>
  if(huart->Instance==USART1)
 8004188:	687b      	ldr	r3, [r7, #4]
 800418a:	681b      	ldr	r3, [r3, #0]
 800418c:	4a21      	ldr	r2, [pc, #132]	; (8004214 <HAL_UART_MspInit+0xa4>)
 800418e:	4293      	cmp	r3, r2
 8004190:	d13b      	bne.n	800420a <HAL_UART_MspInit+0x9a>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8004192:	4b21      	ldr	r3, [pc, #132]	; (8004218 <HAL_UART_MspInit+0xa8>)
 8004194:	699a      	ldr	r2, [r3, #24]
 8004196:	4b20      	ldr	r3, [pc, #128]	; (8004218 <HAL_UART_MspInit+0xa8>)
 8004198:	2180      	movs	r1, #128	; 0x80
 800419a:	01c9      	lsls	r1, r1, #7
 800419c:	430a      	orrs	r2, r1
 800419e:	619a      	str	r2, [r3, #24]
 80041a0:	4b1d      	ldr	r3, [pc, #116]	; (8004218 <HAL_UART_MspInit+0xa8>)
 80041a2:	699a      	ldr	r2, [r3, #24]
 80041a4:	2380      	movs	r3, #128	; 0x80
 80041a6:	01db      	lsls	r3, r3, #7
 80041a8:	4013      	ands	r3, r2
 80041aa:	613b      	str	r3, [r7, #16]
 80041ac:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80041ae:	4b1a      	ldr	r3, [pc, #104]	; (8004218 <HAL_UART_MspInit+0xa8>)
 80041b0:	695a      	ldr	r2, [r3, #20]
 80041b2:	4b19      	ldr	r3, [pc, #100]	; (8004218 <HAL_UART_MspInit+0xa8>)
 80041b4:	2180      	movs	r1, #128	; 0x80
 80041b6:	0289      	lsls	r1, r1, #10
 80041b8:	430a      	orrs	r2, r1
 80041ba:	615a      	str	r2, [r3, #20]
 80041bc:	4b16      	ldr	r3, [pc, #88]	; (8004218 <HAL_UART_MspInit+0xa8>)
 80041be:	695a      	ldr	r2, [r3, #20]
 80041c0:	2380      	movs	r3, #128	; 0x80
 80041c2:	029b      	lsls	r3, r3, #10
 80041c4:	4013      	ands	r3, r2
 80041c6:	60fb      	str	r3, [r7, #12]
 80041c8:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 80041ca:	2114      	movs	r1, #20
 80041cc:	187b      	adds	r3, r7, r1
 80041ce:	22c0      	movs	r2, #192	; 0xc0
 80041d0:	00d2      	lsls	r2, r2, #3
 80041d2:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80041d4:	187b      	adds	r3, r7, r1
 80041d6:	2202      	movs	r2, #2
 80041d8:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80041da:	187b      	adds	r3, r7, r1
 80041dc:	2200      	movs	r2, #0
 80041de:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80041e0:	187b      	adds	r3, r7, r1
 80041e2:	2203      	movs	r2, #3
 80041e4:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_USART1;
 80041e6:	187b      	adds	r3, r7, r1
 80041e8:	2201      	movs	r2, #1
 80041ea:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80041ec:	187a      	adds	r2, r7, r1
 80041ee:	2390      	movs	r3, #144	; 0x90
 80041f0:	05db      	lsls	r3, r3, #23
 80041f2:	0011      	movs	r1, r2
 80041f4:	0018      	movs	r0, r3
 80041f6:	f000 fe8f 	bl	8004f18 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 80041fa:	2200      	movs	r2, #0
 80041fc:	2100      	movs	r1, #0
 80041fe:	201b      	movs	r0, #27
 8004200:	f000 fe1e 	bl	8004e40 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8004204:	201b      	movs	r0, #27
 8004206:	f000 fe30 	bl	8004e6a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 800420a:	46c0      	nop			; (mov r8, r8)
 800420c:	46bd      	mov	sp, r7
 800420e:	b00a      	add	sp, #40	; 0x28
 8004210:	bd80      	pop	{r7, pc}
 8004212:	46c0      	nop			; (mov r8, r8)
 8004214:	40013800 	.word	0x40013800
 8004218:	40021000 	.word	0x40021000

0800421c <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800421c:	b580      	push	{r7, lr}
 800421e:	b08a      	sub	sp, #40	; 0x28
 8004220:	af00      	add	r7, sp, #0
 8004222:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 8004224:	2300      	movs	r3, #0
 8004226:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t              uwPrescalerValue = 0;
 8004228:	2300      	movs	r3, #0
 800422a:	623b      	str	r3, [r7, #32]
  uint32_t              pFLatency;
  /*Configure the TIM1 IRQ priority */
  HAL_NVIC_SetPriority(TIM1_BRK_UP_TRG_COM_IRQn, TickPriority ,0);
 800422c:	687b      	ldr	r3, [r7, #4]
 800422e:	2200      	movs	r2, #0
 8004230:	0019      	movs	r1, r3
 8004232:	200d      	movs	r0, #13
 8004234:	f000 fe04 	bl	8004e40 <HAL_NVIC_SetPriority>

  /* Enable the TIM1 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM1_BRK_UP_TRG_COM_IRQn);
 8004238:	200d      	movs	r0, #13
 800423a:	f000 fe16 	bl	8004e6a <HAL_NVIC_EnableIRQ>
  /* Enable TIM1 clock */
  __HAL_RCC_TIM1_CLK_ENABLE();
 800423e:	4b21      	ldr	r3, [pc, #132]	; (80042c4 <HAL_InitTick+0xa8>)
 8004240:	699a      	ldr	r2, [r3, #24]
 8004242:	4b20      	ldr	r3, [pc, #128]	; (80042c4 <HAL_InitTick+0xa8>)
 8004244:	2180      	movs	r1, #128	; 0x80
 8004246:	0109      	lsls	r1, r1, #4
 8004248:	430a      	orrs	r2, r1
 800424a:	619a      	str	r2, [r3, #24]
 800424c:	4b1d      	ldr	r3, [pc, #116]	; (80042c4 <HAL_InitTick+0xa8>)
 800424e:	699a      	ldr	r2, [r3, #24]
 8004250:	2380      	movs	r3, #128	; 0x80
 8004252:	011b      	lsls	r3, r3, #4
 8004254:	4013      	ands	r3, r2
 8004256:	60bb      	str	r3, [r7, #8]
 8004258:	68bb      	ldr	r3, [r7, #8]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 800425a:	230c      	movs	r3, #12
 800425c:	18fa      	adds	r2, r7, r3
 800425e:	2310      	movs	r3, #16
 8004260:	18fb      	adds	r3, r7, r3
 8004262:	0011      	movs	r1, r2
 8004264:	0018      	movs	r0, r3
 8004266:	f001 fc6f 	bl	8005b48 <HAL_RCC_GetClockConfig>

  /* Compute TIM1 clock */
  uwTimclock = HAL_RCC_GetPCLK1Freq();
 800426a:	f001 fc57 	bl	8005b1c <HAL_RCC_GetPCLK1Freq>
 800426e:	0003      	movs	r3, r0
 8004270:	627b      	str	r3, [r7, #36]	; 0x24

  /* Compute the prescaler value to have TIM1 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000) - 1);
 8004272:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004274:	4914      	ldr	r1, [pc, #80]	; (80042c8 <HAL_InitTick+0xac>)
 8004276:	0018      	movs	r0, r3
 8004278:	f7fb ff46 	bl	8000108 <__udivsi3>
 800427c:	0003      	movs	r3, r0
 800427e:	3b01      	subs	r3, #1
 8004280:	623b      	str	r3, [r7, #32]

  /* Initialize TIM1 */
  htim1.Instance = TIM1;
 8004282:	4b12      	ldr	r3, [pc, #72]	; (80042cc <HAL_InitTick+0xb0>)
 8004284:	4a12      	ldr	r2, [pc, #72]	; (80042d0 <HAL_InitTick+0xb4>)
 8004286:	601a      	str	r2, [r3, #0]
  + Period = [(TIM1CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim1.Init.Period = (1000000 / 1000) - 1;
 8004288:	4b10      	ldr	r3, [pc, #64]	; (80042cc <HAL_InitTick+0xb0>)
 800428a:	4a12      	ldr	r2, [pc, #72]	; (80042d4 <HAL_InitTick+0xb8>)
 800428c:	60da      	str	r2, [r3, #12]
  htim1.Init.Prescaler = uwPrescalerValue;
 800428e:	4b0f      	ldr	r3, [pc, #60]	; (80042cc <HAL_InitTick+0xb0>)
 8004290:	6a3a      	ldr	r2, [r7, #32]
 8004292:	605a      	str	r2, [r3, #4]
  htim1.Init.ClockDivision = 0;
 8004294:	4b0d      	ldr	r3, [pc, #52]	; (80042cc <HAL_InitTick+0xb0>)
 8004296:	2200      	movs	r2, #0
 8004298:	611a      	str	r2, [r3, #16]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 800429a:	4b0c      	ldr	r3, [pc, #48]	; (80042cc <HAL_InitTick+0xb0>)
 800429c:	2200      	movs	r2, #0
 800429e:	609a      	str	r2, [r3, #8]
  if(HAL_TIM_Base_Init(&htim1) == HAL_OK)
 80042a0:	4b0a      	ldr	r3, [pc, #40]	; (80042cc <HAL_InitTick+0xb0>)
 80042a2:	0018      	movs	r0, r3
 80042a4:	f001 fd58 	bl	8005d58 <HAL_TIM_Base_Init>
 80042a8:	1e03      	subs	r3, r0, #0
 80042aa:	d105      	bne.n	80042b8 <HAL_InitTick+0x9c>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim1);
 80042ac:	4b07      	ldr	r3, [pc, #28]	; (80042cc <HAL_InitTick+0xb0>)
 80042ae:	0018      	movs	r0, r3
 80042b0:	f001 fd7e 	bl	8005db0 <HAL_TIM_Base_Start_IT>
 80042b4:	0003      	movs	r3, r0
 80042b6:	e000      	b.n	80042ba <HAL_InitTick+0x9e>
  }

  /* Return function status */
  return HAL_ERROR;
 80042b8:	2301      	movs	r3, #1
}
 80042ba:	0018      	movs	r0, r3
 80042bc:	46bd      	mov	sp, r7
 80042be:	b00a      	add	sp, #40	; 0x28
 80042c0:	bd80      	pop	{r7, pc}
 80042c2:	46c0      	nop			; (mov r8, r8)
 80042c4:	40021000 	.word	0x40021000
 80042c8:	000f4240 	.word	0x000f4240
 80042cc:	20001550 	.word	0x20001550
 80042d0:	40012c00 	.word	0x40012c00
 80042d4:	000003e7 	.word	0x000003e7

080042d8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80042d8:	b580      	push	{r7, lr}
 80042da:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 80042dc:	46c0      	nop			; (mov r8, r8)
 80042de:	46bd      	mov	sp, r7
 80042e0:	bd80      	pop	{r7, pc}

080042e2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80042e2:	b580      	push	{r7, lr}
 80042e4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80042e6:	e7fe      	b.n	80042e6 <HardFault_Handler+0x4>

080042e8 <TIM1_BRK_UP_TRG_COM_IRQHandler>:

/**
  * @brief This function handles TIM1 break, update, trigger and commutation interrupts.
  */
void TIM1_BRK_UP_TRG_COM_IRQHandler(void)
{
 80042e8:	b580      	push	{r7, lr}
 80042ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_BRK_UP_TRG_COM_IRQn 0 */

  /* USER CODE END TIM1_BRK_UP_TRG_COM_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 80042ec:	4b03      	ldr	r3, [pc, #12]	; (80042fc <TIM1_BRK_UP_TRG_COM_IRQHandler+0x14>)
 80042ee:	0018      	movs	r0, r3
 80042f0:	f001 fdf8 	bl	8005ee4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_BRK_UP_TRG_COM_IRQn 1 */

  /* USER CODE END TIM1_BRK_UP_TRG_COM_IRQn 1 */
}
 80042f4:	46c0      	nop			; (mov r8, r8)
 80042f6:	46bd      	mov	sp, r7
 80042f8:	bd80      	pop	{r7, pc}
 80042fa:	46c0      	nop			; (mov r8, r8)
 80042fc:	20001550 	.word	0x20001550

08004300 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt / USART1 wake-up interrupt through EXTI line 25.
  */
void USART1_IRQHandler(void)
{
 8004300:	b580      	push	{r7, lr}
 8004302:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8004304:	4b03      	ldr	r3, [pc, #12]	; (8004314 <USART1_IRQHandler+0x14>)
 8004306:	0018      	movs	r0, r3
 8004308:	f002 fc42 	bl	8006b90 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 800430c:	46c0      	nop			; (mov r8, r8)
 800430e:	46bd      	mov	sp, r7
 8004310:	bd80      	pop	{r7, pc}
 8004312:	46c0      	nop			; (mov r8, r8)
 8004314:	200013e8 	.word	0x200013e8

08004318 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8004318:	b580      	push	{r7, lr}
 800431a:	af00      	add	r7, sp, #0
                         before branch to main program. This call is made inside
                         the "startup_stm32f0xx.s" file.
                         User can setups the default system clock (System clock source, PLL Multiplier
                         and Divider factors, AHB/APBx prescalers and Flash settings).
   */
}
 800431c:	46c0      	nop			; (mov r8, r8)
 800431e:	46bd      	mov	sp, r7
 8004320:	bd80      	pop	{r7, pc}
	...

08004324 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8004324:	480d      	ldr	r0, [pc, #52]	; (800435c <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8004326:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8004328:	480d      	ldr	r0, [pc, #52]	; (8004360 <LoopForever+0x6>)
  ldr r1, =_edata
 800432a:	490e      	ldr	r1, [pc, #56]	; (8004364 <LoopForever+0xa>)
  ldr r2, =_sidata
 800432c:	4a0e      	ldr	r2, [pc, #56]	; (8004368 <LoopForever+0xe>)
  movs r3, #0
 800432e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8004330:	e002      	b.n	8004338 <LoopCopyDataInit>

08004332 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8004332:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8004334:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8004336:	3304      	adds	r3, #4

08004338 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8004338:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800433a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800433c:	d3f9      	bcc.n	8004332 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800433e:	4a0b      	ldr	r2, [pc, #44]	; (800436c <LoopForever+0x12>)
  ldr r4, =_ebss
 8004340:	4c0b      	ldr	r4, [pc, #44]	; (8004370 <LoopForever+0x16>)
  movs r3, #0
 8004342:	2300      	movs	r3, #0
  b LoopFillZerobss
 8004344:	e001      	b.n	800434a <LoopFillZerobss>

08004346 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8004346:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8004348:	3204      	adds	r2, #4

0800434a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800434a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800434c:	d3fb      	bcc.n	8004346 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit
 800434e:	f7ff ffe3 	bl	8004318 <SystemInit>
/* Call static constructors */
  bl __libc_init_array
 8004352:	f004 f969 	bl	8008628 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8004356:	f7fe fd1f 	bl	8002d98 <main>

0800435a <LoopForever>:

LoopForever:
    b LoopForever
 800435a:	e7fe      	b.n	800435a <LoopForever>
  ldr   r0, =_estack
 800435c:	20002000 	.word	0x20002000
  ldr r0, =_sdata
 8004360:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8004364:	20000078 	.word	0x20000078
  ldr r2, =_sidata
 8004368:	080095bc 	.word	0x080095bc
  ldr r2, =_sbss
 800436c:	20000078 	.word	0x20000078
  ldr r4, =_ebss
 8004370:	20001594 	.word	0x20001594

08004374 <ADC1_COMP_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8004374:	e7fe      	b.n	8004374 <ADC1_COMP_IRQHandler>
	...

08004378 <HAL_Init>:
  *       In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8004378:	b580      	push	{r7, lr}
 800437a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */ 
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800437c:	4b07      	ldr	r3, [pc, #28]	; (800439c <HAL_Init+0x24>)
 800437e:	681a      	ldr	r2, [r3, #0]
 8004380:	4b06      	ldr	r3, [pc, #24]	; (800439c <HAL_Init+0x24>)
 8004382:	2110      	movs	r1, #16
 8004384:	430a      	orrs	r2, r1
 8004386:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */

  HAL_InitTick(TICK_INT_PRIORITY);
 8004388:	2000      	movs	r0, #0
 800438a:	f7ff ff47 	bl	800421c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800438e:	f7ff fd57 	bl	8003e40 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8004392:	2300      	movs	r3, #0
}
 8004394:	0018      	movs	r0, r3
 8004396:	46bd      	mov	sp, r7
 8004398:	bd80      	pop	{r7, pc}
 800439a:	46c0      	nop			; (mov r8, r8)
 800439c:	40022000 	.word	0x40022000

080043a0 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80043a0:	b580      	push	{r7, lr}
 80043a2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80043a4:	4b05      	ldr	r3, [pc, #20]	; (80043bc <HAL_IncTick+0x1c>)
 80043a6:	781b      	ldrb	r3, [r3, #0]
 80043a8:	001a      	movs	r2, r3
 80043aa:	4b05      	ldr	r3, [pc, #20]	; (80043c0 <HAL_IncTick+0x20>)
 80043ac:	681b      	ldr	r3, [r3, #0]
 80043ae:	18d2      	adds	r2, r2, r3
 80043b0:	4b03      	ldr	r3, [pc, #12]	; (80043c0 <HAL_IncTick+0x20>)
 80043b2:	601a      	str	r2, [r3, #0]
}
 80043b4:	46c0      	nop			; (mov r8, r8)
 80043b6:	46bd      	mov	sp, r7
 80043b8:	bd80      	pop	{r7, pc}
 80043ba:	46c0      	nop			; (mov r8, r8)
 80043bc:	20000008 	.word	0x20000008
 80043c0:	20001590 	.word	0x20001590

080043c4 <HAL_GetTick>:
  * @note   This function is declared as __weak  to be overwritten  in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80043c4:	b580      	push	{r7, lr}
 80043c6:	af00      	add	r7, sp, #0
  return uwTick;
 80043c8:	4b02      	ldr	r3, [pc, #8]	; (80043d4 <HAL_GetTick+0x10>)
 80043ca:	681b      	ldr	r3, [r3, #0]
}
 80043cc:	0018      	movs	r0, r3
 80043ce:	46bd      	mov	sp, r7
 80043d0:	bd80      	pop	{r7, pc}
 80043d2:	46c0      	nop			; (mov r8, r8)
 80043d4:	20001590 	.word	0x20001590

080043d8 <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param  hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 80043d8:	b580      	push	{r7, lr}
 80043da:	b084      	sub	sp, #16
 80043dc:	af00      	add	r7, sp, #0
 80043de:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80043e0:	230f      	movs	r3, #15
 80043e2:	18fb      	adds	r3, r7, r3
 80043e4:	2200      	movs	r2, #0
 80043e6:	701a      	strb	r2, [r3, #0]
  uint32_t tmpCFGR1 = 0U;
 80043e8:	2300      	movs	r3, #0
 80043ea:	60bb      	str	r3, [r7, #8]

  /* Check ADC handle */
  if(hadc == NULL)
 80043ec:	687b      	ldr	r3, [r7, #4]
 80043ee:	2b00      	cmp	r3, #0
 80043f0:	d101      	bne.n	80043f6 <HAL_ADC_Init+0x1e>
  {
    return HAL_ERROR;
 80043f2:	2301      	movs	r3, #1
 80043f4:	e125      	b.n	8004642 <HAL_ADC_Init+0x26a>
  /* Refer to header of this file for more details on clock enabling procedure*/
  
  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  /* - ADC voltage regulator enable                                           */
  if (hadc->State == HAL_ADC_STATE_RESET)
 80043f6:	687b      	ldr	r3, [r7, #4]
 80043f8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80043fa:	2b00      	cmp	r3, #0
 80043fc:	d10a      	bne.n	8004414 <HAL_ADC_Init+0x3c>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 80043fe:	687b      	ldr	r3, [r7, #4]
 8004400:	2200      	movs	r2, #0
 8004402:	63da      	str	r2, [r3, #60]	; 0x3c
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8004404:	687b      	ldr	r3, [r7, #4]
 8004406:	2234      	movs	r2, #52	; 0x34
 8004408:	2100      	movs	r1, #0
 800440a:	5499      	strb	r1, [r3, r2]
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 800440c:	687b      	ldr	r3, [r7, #4]
 800440e:	0018      	movs	r0, r3
 8004410:	f7ff fd3a 	bl	8003e88 <HAL_ADC_MspInit>
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  /* and if there is no conversion on going on regular group (ADC can be      */ 
  /* enabled anyway, in case of call of this function to update a parameter   */
  /* on the fly).                                                             */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8004414:	687b      	ldr	r3, [r7, #4]
 8004416:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004418:	2210      	movs	r2, #16
 800441a:	4013      	ands	r3, r2
 800441c:	d000      	beq.n	8004420 <HAL_ADC_Init+0x48>
 800441e:	e103      	b.n	8004628 <HAL_ADC_Init+0x250>
 8004420:	230f      	movs	r3, #15
 8004422:	18fb      	adds	r3, r7, r3
 8004424:	781b      	ldrb	r3, [r3, #0]
 8004426:	2b00      	cmp	r3, #0
 8004428:	d000      	beq.n	800442c <HAL_ADC_Init+0x54>
 800442a:	e0fd      	b.n	8004628 <HAL_ADC_Init+0x250>
      (tmp_hal_status == HAL_OK)                                &&
      (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)          )
 800442c:	687b      	ldr	r3, [r7, #4]
 800442e:	681b      	ldr	r3, [r3, #0]
 8004430:	689b      	ldr	r3, [r3, #8]
 8004432:	2204      	movs	r2, #4
 8004434:	4013      	ands	r3, r2
      (tmp_hal_status == HAL_OK)                                &&
 8004436:	d000      	beq.n	800443a <HAL_ADC_Init+0x62>
 8004438:	e0f6      	b.n	8004628 <HAL_ADC_Init+0x250>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800443a:	687b      	ldr	r3, [r7, #4]
 800443c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800443e:	4a83      	ldr	r2, [pc, #524]	; (800464c <HAL_ADC_Init+0x274>)
 8004440:	4013      	ands	r3, r2
 8004442:	2202      	movs	r2, #2
 8004444:	431a      	orrs	r2, r3
 8004446:	687b      	ldr	r3, [r7, #4]
 8004448:	639a      	str	r2, [r3, #56]	; 0x38
    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - ADC clock mode                                                      */
    /*  - ADC clock prescaler                                                 */
    /*  - ADC resolution                                                      */
    if (ADC_IS_ENABLE(hadc) == RESET)
 800444a:	687b      	ldr	r3, [r7, #4]
 800444c:	681b      	ldr	r3, [r3, #0]
 800444e:	689b      	ldr	r3, [r3, #8]
 8004450:	2203      	movs	r2, #3
 8004452:	4013      	ands	r3, r2
 8004454:	2b01      	cmp	r3, #1
 8004456:	d112      	bne.n	800447e <HAL_ADC_Init+0xa6>
 8004458:	687b      	ldr	r3, [r7, #4]
 800445a:	681b      	ldr	r3, [r3, #0]
 800445c:	681b      	ldr	r3, [r3, #0]
 800445e:	2201      	movs	r2, #1
 8004460:	4013      	ands	r3, r2
 8004462:	2b01      	cmp	r3, #1
 8004464:	d009      	beq.n	800447a <HAL_ADC_Init+0xa2>
 8004466:	687b      	ldr	r3, [r7, #4]
 8004468:	681b      	ldr	r3, [r3, #0]
 800446a:	68da      	ldr	r2, [r3, #12]
 800446c:	2380      	movs	r3, #128	; 0x80
 800446e:	021b      	lsls	r3, r3, #8
 8004470:	401a      	ands	r2, r3
 8004472:	2380      	movs	r3, #128	; 0x80
 8004474:	021b      	lsls	r3, r3, #8
 8004476:	429a      	cmp	r2, r3
 8004478:	d101      	bne.n	800447e <HAL_ADC_Init+0xa6>
 800447a:	2301      	movs	r3, #1
 800447c:	e000      	b.n	8004480 <HAL_ADC_Init+0xa8>
 800447e:	2300      	movs	r3, #0
 8004480:	2b00      	cmp	r3, #0
 8004482:	d116      	bne.n	80044b2 <HAL_ADC_Init+0xda>
      /* parameters):                                                         */
      /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
      /*     (set into HAL_ADC_ConfigChannel() )                              */
     
      /* Configuration of ADC resolution                                      */
      MODIFY_REG(hadc->Instance->CFGR1,
 8004484:	687b      	ldr	r3, [r7, #4]
 8004486:	681b      	ldr	r3, [r3, #0]
 8004488:	68db      	ldr	r3, [r3, #12]
 800448a:	2218      	movs	r2, #24
 800448c:	4393      	bics	r3, r2
 800448e:	0019      	movs	r1, r3
 8004490:	687b      	ldr	r3, [r7, #4]
 8004492:	689a      	ldr	r2, [r3, #8]
 8004494:	687b      	ldr	r3, [r7, #4]
 8004496:	681b      	ldr	r3, [r3, #0]
 8004498:	430a      	orrs	r2, r1
 800449a:	60da      	str	r2, [r3, #12]
                 ADC_CFGR1_RES        ,
                 hadc->Init.Resolution );
      
      /* Configuration of ADC clock mode: clock source AHB or HSI with        */
      /* selectable prescaler                                                 */
      MODIFY_REG(hadc->Instance->CFGR2    ,
 800449c:	687b      	ldr	r3, [r7, #4]
 800449e:	681b      	ldr	r3, [r3, #0]
 80044a0:	691b      	ldr	r3, [r3, #16]
 80044a2:	009b      	lsls	r3, r3, #2
 80044a4:	0899      	lsrs	r1, r3, #2
 80044a6:	687b      	ldr	r3, [r7, #4]
 80044a8:	685a      	ldr	r2, [r3, #4]
 80044aa:	687b      	ldr	r3, [r7, #4]
 80044ac:	681b      	ldr	r3, [r3, #0]
 80044ae:	430a      	orrs	r2, r1
 80044b0:	611a      	str	r2, [r3, #16]
    /*  - external trigger polarity                                           */
    /*  - data alignment                                                      */
    /*  - resolution                                                          */
    /*  - scan direction                                                      */
    /*  - DMA continuous request                                              */
    hadc->Instance->CFGR1 &= ~( ADC_CFGR1_DISCEN  |
 80044b2:	687b      	ldr	r3, [r7, #4]
 80044b4:	681b      	ldr	r3, [r3, #0]
 80044b6:	68da      	ldr	r2, [r3, #12]
 80044b8:	687b      	ldr	r3, [r7, #4]
 80044ba:	681b      	ldr	r3, [r3, #0]
 80044bc:	4964      	ldr	r1, [pc, #400]	; (8004650 <HAL_ADC_Init+0x278>)
 80044be:	400a      	ands	r2, r1
 80044c0:	60da      	str	r2, [r3, #12]
                                ADC_CFGR1_EXTEN   |
                                ADC_CFGR1_ALIGN   |
                                ADC_CFGR1_SCANDIR |
                                ADC_CFGR1_DMACFG   );

    tmpCFGR1 |= (ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 80044c2:	687b      	ldr	r3, [r7, #4]
 80044c4:	7e1b      	ldrb	r3, [r3, #24]
 80044c6:	039a      	lsls	r2, r3, #14
                 ADC_CFGR1_AUTOOFF((uint32_t)hadc->Init.LowPowerAutoPowerOff)     |
 80044c8:	687b      	ldr	r3, [r7, #4]
 80044ca:	7e5b      	ldrb	r3, [r3, #25]
 80044cc:	03db      	lsls	r3, r3, #15
    tmpCFGR1 |= (ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 80044ce:	431a      	orrs	r2, r3
                 ADC_CFGR1_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)    |
 80044d0:	687b      	ldr	r3, [r7, #4]
 80044d2:	7e9b      	ldrb	r3, [r3, #26]
 80044d4:	035b      	lsls	r3, r3, #13
                 ADC_CFGR1_AUTOOFF((uint32_t)hadc->Init.LowPowerAutoPowerOff)     |
 80044d6:	431a      	orrs	r2, r3
                 ADC_CFGR1_OVERRUN(hadc->Init.Overrun)                            |
 80044d8:	687b      	ldr	r3, [r7, #4]
 80044da:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80044dc:	2b01      	cmp	r3, #1
 80044de:	d002      	beq.n	80044e6 <HAL_ADC_Init+0x10e>
 80044e0:	2380      	movs	r3, #128	; 0x80
 80044e2:	015b      	lsls	r3, r3, #5
 80044e4:	e000      	b.n	80044e8 <HAL_ADC_Init+0x110>
 80044e6:	2300      	movs	r3, #0
                 ADC_CFGR1_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)    |
 80044e8:	431a      	orrs	r2, r3
                 hadc->Init.DataAlign                                             |
 80044ea:	687b      	ldr	r3, [r7, #4]
 80044ec:	68db      	ldr	r3, [r3, #12]
                 ADC_CFGR1_OVERRUN(hadc->Init.Overrun)                            |
 80044ee:	431a      	orrs	r2, r3
                 ADC_SCANDIR(hadc->Init.ScanConvMode)                             |
 80044f0:	687b      	ldr	r3, [r7, #4]
 80044f2:	691b      	ldr	r3, [r3, #16]
 80044f4:	2b02      	cmp	r3, #2
 80044f6:	d101      	bne.n	80044fc <HAL_ADC_Init+0x124>
 80044f8:	2304      	movs	r3, #4
 80044fa:	e000      	b.n	80044fe <HAL_ADC_Init+0x126>
 80044fc:	2300      	movs	r3, #0
                 hadc->Init.DataAlign                                             |
 80044fe:	431a      	orrs	r2, r3
                 ADC_CFGR1_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests)  );
 8004500:	687b      	ldr	r3, [r7, #4]
 8004502:	2124      	movs	r1, #36	; 0x24
 8004504:	5c5b      	ldrb	r3, [r3, r1]
 8004506:	005b      	lsls	r3, r3, #1
                 ADC_SCANDIR(hadc->Init.ScanConvMode)                             |
 8004508:	4313      	orrs	r3, r2
    tmpCFGR1 |= (ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 800450a:	68ba      	ldr	r2, [r7, #8]
 800450c:	4313      	orrs	r3, r2
 800450e:	60bb      	str	r3, [r7, #8]
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8004510:	687b      	ldr	r3, [r7, #4]
 8004512:	7edb      	ldrb	r3, [r3, #27]
 8004514:	2b01      	cmp	r3, #1
 8004516:	d115      	bne.n	8004544 <HAL_ADC_Init+0x16c>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 8004518:	687b      	ldr	r3, [r7, #4]
 800451a:	7e9b      	ldrb	r3, [r3, #26]
 800451c:	2b00      	cmp	r3, #0
 800451e:	d105      	bne.n	800452c <HAL_ADC_Init+0x154>
      {
        /* Enable the selected ADC group regular discontinuous mode */
        tmpCFGR1 |= ADC_CFGR1_DISCEN;
 8004520:	68bb      	ldr	r3, [r7, #8]
 8004522:	2280      	movs	r2, #128	; 0x80
 8004524:	0252      	lsls	r2, r2, #9
 8004526:	4313      	orrs	r3, r2
 8004528:	60bb      	str	r3, [r7, #8]
 800452a:	e00b      	b.n	8004544 <HAL_ADC_Init+0x16c>
        /* ADC regular group discontinuous was intended to be enabled,        */
        /* but ADC regular group modes continuous and sequencer discontinuous */
        /* cannot be enabled simultaneously.                                  */
        
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800452c:	687b      	ldr	r3, [r7, #4]
 800452e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004530:	2220      	movs	r2, #32
 8004532:	431a      	orrs	r2, r3
 8004534:	687b      	ldr	r3, [r7, #4]
 8004536:	639a      	str	r2, [r3, #56]	; 0x38
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8004538:	687b      	ldr	r3, [r7, #4]
 800453a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800453c:	2201      	movs	r2, #1
 800453e:	431a      	orrs	r2, r3
 8004540:	687b      	ldr	r3, [r7, #4]
 8004542:	63da      	str	r2, [r3, #60]	; 0x3c
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8004544:	687b      	ldr	r3, [r7, #4]
 8004546:	69da      	ldr	r2, [r3, #28]
 8004548:	23c2      	movs	r3, #194	; 0xc2
 800454a:	33ff      	adds	r3, #255	; 0xff
 800454c:	429a      	cmp	r2, r3
 800454e:	d007      	beq.n	8004560 <HAL_ADC_Init+0x188>
    {
      tmpCFGR1 |= ( hadc->Init.ExternalTrigConv    |
 8004550:	687b      	ldr	r3, [r7, #4]
 8004552:	69da      	ldr	r2, [r3, #28]
                    hadc->Init.ExternalTrigConvEdge );
 8004554:	687b      	ldr	r3, [r7, #4]
 8004556:	6a1b      	ldr	r3, [r3, #32]
      tmpCFGR1 |= ( hadc->Init.ExternalTrigConv    |
 8004558:	4313      	orrs	r3, r2
 800455a:	68ba      	ldr	r2, [r7, #8]
 800455c:	4313      	orrs	r3, r2
 800455e:	60bb      	str	r3, [r7, #8]
    }
    
    /* Update ADC configuration register with previous settings */
    hadc->Instance->CFGR1 |= tmpCFGR1;
 8004560:	687b      	ldr	r3, [r7, #4]
 8004562:	681b      	ldr	r3, [r3, #0]
 8004564:	68d9      	ldr	r1, [r3, #12]
 8004566:	687b      	ldr	r3, [r7, #4]
 8004568:	681b      	ldr	r3, [r3, #0]
 800456a:	68ba      	ldr	r2, [r7, #8]
 800456c:	430a      	orrs	r2, r1
 800456e:	60da      	str	r2, [r3, #12]
    /* Management of parameters "SamplingTimeCommon" and "SamplingTime"       */
    /* (obsolete): sampling time set in this function if parameter            */
    /*  "SamplingTimeCommon" has been set to a valid sampling time.           */
    /* Otherwise, sampling time is set into ADC channel initialization        */
    /* structure with parameter "SamplingTime" (obsolete).                    */
    if (IS_ADC_SAMPLE_TIME(hadc->Init.SamplingTimeCommon))
 8004570:	687b      	ldr	r3, [r7, #4]
 8004572:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004574:	2380      	movs	r3, #128	; 0x80
 8004576:	055b      	lsls	r3, r3, #21
 8004578:	429a      	cmp	r2, r3
 800457a:	d01b      	beq.n	80045b4 <HAL_ADC_Init+0x1dc>
 800457c:	687b      	ldr	r3, [r7, #4]
 800457e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004580:	2b01      	cmp	r3, #1
 8004582:	d017      	beq.n	80045b4 <HAL_ADC_Init+0x1dc>
 8004584:	687b      	ldr	r3, [r7, #4]
 8004586:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004588:	2b02      	cmp	r3, #2
 800458a:	d013      	beq.n	80045b4 <HAL_ADC_Init+0x1dc>
 800458c:	687b      	ldr	r3, [r7, #4]
 800458e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004590:	2b03      	cmp	r3, #3
 8004592:	d00f      	beq.n	80045b4 <HAL_ADC_Init+0x1dc>
 8004594:	687b      	ldr	r3, [r7, #4]
 8004596:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004598:	2b04      	cmp	r3, #4
 800459a:	d00b      	beq.n	80045b4 <HAL_ADC_Init+0x1dc>
 800459c:	687b      	ldr	r3, [r7, #4]
 800459e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80045a0:	2b05      	cmp	r3, #5
 80045a2:	d007      	beq.n	80045b4 <HAL_ADC_Init+0x1dc>
 80045a4:	687b      	ldr	r3, [r7, #4]
 80045a6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80045a8:	2b06      	cmp	r3, #6
 80045aa:	d003      	beq.n	80045b4 <HAL_ADC_Init+0x1dc>
 80045ac:	687b      	ldr	r3, [r7, #4]
 80045ae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80045b0:	2b07      	cmp	r3, #7
 80045b2:	d112      	bne.n	80045da <HAL_ADC_Init+0x202>
    {
      /* Channel sampling time configuration */
      /* Clear the old sample time */
      hadc->Instance->SMPR &= ~(ADC_SMPR_SMP);
 80045b4:	687b      	ldr	r3, [r7, #4]
 80045b6:	681b      	ldr	r3, [r3, #0]
 80045b8:	695a      	ldr	r2, [r3, #20]
 80045ba:	687b      	ldr	r3, [r7, #4]
 80045bc:	681b      	ldr	r3, [r3, #0]
 80045be:	2107      	movs	r1, #7
 80045c0:	438a      	bics	r2, r1
 80045c2:	615a      	str	r2, [r3, #20]
      
      /* Set the new sample time */
      hadc->Instance->SMPR |= ADC_SMPR_SET(hadc->Init.SamplingTimeCommon);
 80045c4:	687b      	ldr	r3, [r7, #4]
 80045c6:	681b      	ldr	r3, [r3, #0]
 80045c8:	6959      	ldr	r1, [r3, #20]
 80045ca:	687b      	ldr	r3, [r7, #4]
 80045cc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80045ce:	2207      	movs	r2, #7
 80045d0:	401a      	ands	r2, r3
 80045d2:	687b      	ldr	r3, [r7, #4]
 80045d4:	681b      	ldr	r3, [r3, #0]
 80045d6:	430a      	orrs	r2, r1
 80045d8:	615a      	str	r2, [r3, #20]
    /* Check back that ADC registers have effectively been configured to      */
    /* ensure of no potential problem of ADC core IP clocking.                */
    /* Check through register CFGR1 (excluding analog watchdog configuration: */
    /* set into separate dedicated function, and bits of ADC resolution set   */
    /* out of temporary variable 'tmpCFGR1').                                 */
    if ((hadc->Instance->CFGR1 & ~(ADC_CFGR1_AWDCH | ADC_CFGR1_AWDEN | ADC_CFGR1_AWDSGL | ADC_CFGR1_RES))
 80045da:	687b      	ldr	r3, [r7, #4]
 80045dc:	681b      	ldr	r3, [r3, #0]
 80045de:	68db      	ldr	r3, [r3, #12]
 80045e0:	4a1c      	ldr	r2, [pc, #112]	; (8004654 <HAL_ADC_Init+0x27c>)
 80045e2:	4013      	ands	r3, r2
 80045e4:	68ba      	ldr	r2, [r7, #8]
 80045e6:	429a      	cmp	r2, r3
 80045e8:	d10b      	bne.n	8004602 <HAL_ADC_Init+0x22a>
         == tmpCFGR1)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 80045ea:	687b      	ldr	r3, [r7, #4]
 80045ec:	2200      	movs	r2, #0
 80045ee:	63da      	str	r2, [r3, #60]	; 0x3c
      
      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 80045f0:	687b      	ldr	r3, [r7, #4]
 80045f2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80045f4:	2203      	movs	r2, #3
 80045f6:	4393      	bics	r3, r2
 80045f8:	2201      	movs	r2, #1
 80045fa:	431a      	orrs	r2, r3
 80045fc:	687b      	ldr	r3, [r7, #4]
 80045fe:	639a      	str	r2, [r3, #56]	; 0x38
    if ((hadc->Instance->CFGR1 & ~(ADC_CFGR1_AWDCH | ADC_CFGR1_AWDEN | ADC_CFGR1_AWDSGL | ADC_CFGR1_RES))
 8004600:	e01c      	b.n	800463c <HAL_ADC_Init+0x264>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 8004602:	687b      	ldr	r3, [r7, #4]
 8004604:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004606:	2212      	movs	r2, #18
 8004608:	4393      	bics	r3, r2
 800460a:	2210      	movs	r2, #16
 800460c:	431a      	orrs	r2, r3
 800460e:	687b      	ldr	r3, [r7, #4]
 8004610:	639a      	str	r2, [r3, #56]	; 0x38
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8004612:	687b      	ldr	r3, [r7, #4]
 8004614:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004616:	2201      	movs	r2, #1
 8004618:	431a      	orrs	r2, r3
 800461a:	687b      	ldr	r3, [r7, #4]
 800461c:	63da      	str	r2, [r3, #60]	; 0x3c
      
      tmp_hal_status = HAL_ERROR;
 800461e:	230f      	movs	r3, #15
 8004620:	18fb      	adds	r3, r7, r3
 8004622:	2201      	movs	r2, #1
 8004624:	701a      	strb	r2, [r3, #0]
    if ((hadc->Instance->CFGR1 & ~(ADC_CFGR1_AWDCH | ADC_CFGR1_AWDEN | ADC_CFGR1_AWDSGL | ADC_CFGR1_RES))
 8004626:	e009      	b.n	800463c <HAL_ADC_Init+0x264>
  
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004628:	687b      	ldr	r3, [r7, #4]
 800462a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800462c:	2210      	movs	r2, #16
 800462e:	431a      	orrs	r2, r3
 8004630:	687b      	ldr	r3, [r7, #4]
 8004632:	639a      	str	r2, [r3, #56]	; 0x38
        
    tmp_hal_status = HAL_ERROR;
 8004634:	230f      	movs	r3, #15
 8004636:	18fb      	adds	r3, r7, r3
 8004638:	2201      	movs	r2, #1
 800463a:	701a      	strb	r2, [r3, #0]
  }
  
  /* Return function status */
  return tmp_hal_status;
 800463c:	230f      	movs	r3, #15
 800463e:	18fb      	adds	r3, r7, r3
 8004640:	781b      	ldrb	r3, [r3, #0]
}
 8004642:	0018      	movs	r0, r3
 8004644:	46bd      	mov	sp, r7
 8004646:	b004      	add	sp, #16
 8004648:	bd80      	pop	{r7, pc}
 800464a:	46c0      	nop			; (mov r8, r8)
 800464c:	fffffefd 	.word	0xfffffefd
 8004650:	fffe0219 	.word	0xfffe0219
 8004654:	833fffe7 	.word	0x833fffe7

08004658 <HAL_ADC_Start>:
  *         Interruptions enabled in this function: None.
  * @param  hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 8004658:	b590      	push	{r4, r7, lr}
 800465a:	b085      	sub	sp, #20
 800465c:	af00      	add	r7, sp, #0
 800465e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8004660:	230f      	movs	r3, #15
 8004662:	18fb      	adds	r3, r7, r3
 8004664:	2200      	movs	r2, #0
 8004666:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 8004668:	687b      	ldr	r3, [r7, #4]
 800466a:	681b      	ldr	r3, [r3, #0]
 800466c:	689b      	ldr	r3, [r3, #8]
 800466e:	2204      	movs	r2, #4
 8004670:	4013      	ands	r3, r2
 8004672:	d138      	bne.n	80046e6 <HAL_ADC_Start+0x8e>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8004674:	687b      	ldr	r3, [r7, #4]
 8004676:	2234      	movs	r2, #52	; 0x34
 8004678:	5c9b      	ldrb	r3, [r3, r2]
 800467a:	2b01      	cmp	r3, #1
 800467c:	d101      	bne.n	8004682 <HAL_ADC_Start+0x2a>
 800467e:	2302      	movs	r3, #2
 8004680:	e038      	b.n	80046f4 <HAL_ADC_Start+0x9c>
 8004682:	687b      	ldr	r3, [r7, #4]
 8004684:	2234      	movs	r2, #52	; 0x34
 8004686:	2101      	movs	r1, #1
 8004688:	5499      	strb	r1, [r3, r2]
      
    /* Enable the ADC peripheral */
    /* If low power mode AutoPowerOff is enabled, power-on/off phases are     */
    /* performed automatically by hardware.                                   */
    if (hadc->Init.LowPowerAutoPowerOff != ENABLE)
 800468a:	687b      	ldr	r3, [r7, #4]
 800468c:	7e5b      	ldrb	r3, [r3, #25]
 800468e:	2b01      	cmp	r3, #1
 8004690:	d007      	beq.n	80046a2 <HAL_ADC_Start+0x4a>
    {
      tmp_hal_status = ADC_Enable(hadc);
 8004692:	230f      	movs	r3, #15
 8004694:	18fc      	adds	r4, r7, r3
 8004696:	687b      	ldr	r3, [r7, #4]
 8004698:	0018      	movs	r0, r3
 800469a:	f000 fa1d 	bl	8004ad8 <ADC_Enable>
 800469e:	0003      	movs	r3, r0
 80046a0:	7023      	strb	r3, [r4, #0]
    }
    
    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 80046a2:	230f      	movs	r3, #15
 80046a4:	18fb      	adds	r3, r7, r3
 80046a6:	781b      	ldrb	r3, [r3, #0]
 80046a8:	2b00      	cmp	r3, #0
 80046aa:	d120      	bne.n	80046ee <HAL_ADC_Start+0x96>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 80046ac:	687b      	ldr	r3, [r7, #4]
 80046ae:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80046b0:	4a12      	ldr	r2, [pc, #72]	; (80046fc <HAL_ADC_Start+0xa4>)
 80046b2:	4013      	ands	r3, r2
 80046b4:	2280      	movs	r2, #128	; 0x80
 80046b6:	0052      	lsls	r2, r2, #1
 80046b8:	431a      	orrs	r2, r3
 80046ba:	687b      	ldr	r3, [r7, #4]
 80046bc:	639a      	str	r2, [r3, #56]	; 0x38
                        HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR | HAL_ADC_STATE_REG_EOSMP,
                        HAL_ADC_STATE_REG_BUSY);
      
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 80046be:	687b      	ldr	r3, [r7, #4]
 80046c0:	2200      	movs	r2, #0
 80046c2:	63da      	str	r2, [r3, #60]	; 0x3c
      
      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 80046c4:	687b      	ldr	r3, [r7, #4]
 80046c6:	2234      	movs	r2, #52	; 0x34
 80046c8:	2100      	movs	r1, #0
 80046ca:	5499      	strb	r1, [r3, r2]
      
      /* Clear regular group conversion flag and overrun flag */
      /* (To ensure of no unknown state from potential previous ADC           */
      /* operations)                                                          */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 80046cc:	687b      	ldr	r3, [r7, #4]
 80046ce:	681b      	ldr	r3, [r3, #0]
 80046d0:	221c      	movs	r2, #28
 80046d2:	601a      	str	r2, [r3, #0]
      
      /* Enable conversion of regular group.                                  */
      /* If software start has been selected, conversion starts immediately.  */
      /* If external trigger has been selected, conversion will start at next */
      /* trigger event.                                                       */
      hadc->Instance->CR |= ADC_CR_ADSTART;
 80046d4:	687b      	ldr	r3, [r7, #4]
 80046d6:	681b      	ldr	r3, [r3, #0]
 80046d8:	689a      	ldr	r2, [r3, #8]
 80046da:	687b      	ldr	r3, [r7, #4]
 80046dc:	681b      	ldr	r3, [r3, #0]
 80046de:	2104      	movs	r1, #4
 80046e0:	430a      	orrs	r2, r1
 80046e2:	609a      	str	r2, [r3, #8]
 80046e4:	e003      	b.n	80046ee <HAL_ADC_Start+0x96>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 80046e6:	230f      	movs	r3, #15
 80046e8:	18fb      	adds	r3, r7, r3
 80046ea:	2202      	movs	r2, #2
 80046ec:	701a      	strb	r2, [r3, #0]
  }
  
  /* Return function status */
  return tmp_hal_status;
 80046ee:	230f      	movs	r3, #15
 80046f0:	18fb      	adds	r3, r7, r3
 80046f2:	781b      	ldrb	r3, [r3, #0]
}
 80046f4:	0018      	movs	r0, r3
 80046f6:	46bd      	mov	sp, r7
 80046f8:	b005      	add	sp, #20
 80046fa:	bd90      	pop	{r4, r7, pc}
 80046fc:	fffff0fe 	.word	0xfffff0fe

08004700 <HAL_ADC_Stop>:
  * @brief  Stop ADC conversion of regular group, disable ADC peripheral.
  * @param  hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Stop(ADC_HandleTypeDef* hadc)
{ 
 8004700:	b5b0      	push	{r4, r5, r7, lr}
 8004702:	b084      	sub	sp, #16
 8004704:	af00      	add	r7, sp, #0
 8004706:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8004708:	230f      	movs	r3, #15
 800470a:	18fb      	adds	r3, r7, r3
 800470c:	2200      	movs	r2, #0
 800470e:	701a      	strb	r2, [r3, #0]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8004710:	687b      	ldr	r3, [r7, #4]
 8004712:	2234      	movs	r2, #52	; 0x34
 8004714:	5c9b      	ldrb	r3, [r3, r2]
 8004716:	2b01      	cmp	r3, #1
 8004718:	d101      	bne.n	800471e <HAL_ADC_Stop+0x1e>
 800471a:	2302      	movs	r3, #2
 800471c:	e02a      	b.n	8004774 <HAL_ADC_Stop+0x74>
 800471e:	687b      	ldr	r3, [r7, #4]
 8004720:	2234      	movs	r2, #52	; 0x34
 8004722:	2101      	movs	r1, #1
 8004724:	5499      	strb	r1, [r3, r2]
  
  /* 1. Stop potential conversion on going, on regular group */
  tmp_hal_status = ADC_ConversionStop(hadc);
 8004726:	250f      	movs	r5, #15
 8004728:	197c      	adds	r4, r7, r5
 800472a:	687b      	ldr	r3, [r7, #4]
 800472c:	0018      	movs	r0, r3
 800472e:	f000 fab9 	bl	8004ca4 <ADC_ConversionStop>
 8004732:	0003      	movs	r3, r0
 8004734:	7023      	strb	r3, [r4, #0]
  
  /* Disable ADC peripheral if conversions are effectively stopped */
  if (tmp_hal_status == HAL_OK)
 8004736:	197b      	adds	r3, r7, r5
 8004738:	781b      	ldrb	r3, [r3, #0]
 800473a:	2b00      	cmp	r3, #0
 800473c:	d113      	bne.n	8004766 <HAL_ADC_Stop+0x66>
  {
    /* 2. Disable the ADC peripheral */
    tmp_hal_status = ADC_Disable(hadc);
 800473e:	250f      	movs	r5, #15
 8004740:	197c      	adds	r4, r7, r5
 8004742:	687b      	ldr	r3, [r7, #4]
 8004744:	0018      	movs	r0, r3
 8004746:	f000 fa43 	bl	8004bd0 <ADC_Disable>
 800474a:	0003      	movs	r3, r0
 800474c:	7023      	strb	r3, [r4, #0]
    
    /* Check if ADC is effectively disabled */
    if (tmp_hal_status == HAL_OK)
 800474e:	197b      	adds	r3, r7, r5
 8004750:	781b      	ldrb	r3, [r3, #0]
 8004752:	2b00      	cmp	r3, #0
 8004754:	d107      	bne.n	8004766 <HAL_ADC_Stop+0x66>
    {
      /* Set ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8004756:	687b      	ldr	r3, [r7, #4]
 8004758:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800475a:	4a08      	ldr	r2, [pc, #32]	; (800477c <HAL_ADC_Stop+0x7c>)
 800475c:	4013      	ands	r3, r2
 800475e:	2201      	movs	r2, #1
 8004760:	431a      	orrs	r2, r3
 8004762:	687b      	ldr	r3, [r7, #4]
 8004764:	639a      	str	r2, [r3, #56]	; 0x38
                        HAL_ADC_STATE_READY);
    }
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8004766:	687b      	ldr	r3, [r7, #4]
 8004768:	2234      	movs	r2, #52	; 0x34
 800476a:	2100      	movs	r1, #0
 800476c:	5499      	strb	r1, [r3, r2]
  
  /* Return function status */
  return tmp_hal_status;
 800476e:	230f      	movs	r3, #15
 8004770:	18fb      	adds	r3, r7, r3
 8004772:	781b      	ldrb	r3, [r3, #0]
}
 8004774:	0018      	movs	r0, r3
 8004776:	46bd      	mov	sp, r7
 8004778:	b004      	add	sp, #16
 800477a:	bdb0      	pop	{r4, r5, r7, pc}
 800477c:	fffffefe 	.word	0xfffffefe

08004780 <HAL_ADC_PollForConversion>:
  * @param  hadc ADC handle
  * @param  Timeout Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef* hadc, uint32_t Timeout)
{
 8004780:	b580      	push	{r7, lr}
 8004782:	b084      	sub	sp, #16
 8004784:	af00      	add	r7, sp, #0
 8004786:	6078      	str	r0, [r7, #4]
 8004788:	6039      	str	r1, [r7, #0]
 
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* If end of conversion selected to end of sequence */
  if (hadc->Init.EOCSelection == ADC_EOC_SEQ_CONV)
 800478a:	687b      	ldr	r3, [r7, #4]
 800478c:	695b      	ldr	r3, [r3, #20]
 800478e:	2b08      	cmp	r3, #8
 8004790:	d102      	bne.n	8004798 <HAL_ADC_PollForConversion+0x18>
  {
    tmp_Flag_EOC = ADC_FLAG_EOS;
 8004792:	2308      	movs	r3, #8
 8004794:	60fb      	str	r3, [r7, #12]
 8004796:	e014      	b.n	80047c2 <HAL_ADC_PollForConversion+0x42>
    /* each conversion:                                                       */
    /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
    /* several ranks and polling for end of each conversion.                  */
    /* For code simplicity sake, this particular case is generalized to       */
    /* ADC configured in DMA mode and and polling for end of each conversion. */
    if (HAL_IS_BIT_SET(hadc->Instance->CFGR1, ADC_CFGR1_DMAEN))
 8004798:	687b      	ldr	r3, [r7, #4]
 800479a:	681b      	ldr	r3, [r3, #0]
 800479c:	68db      	ldr	r3, [r3, #12]
 800479e:	2201      	movs	r2, #1
 80047a0:	4013      	ands	r3, r2
 80047a2:	2b01      	cmp	r3, #1
 80047a4:	d10b      	bne.n	80047be <HAL_ADC_PollForConversion+0x3e>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80047a6:	687b      	ldr	r3, [r7, #4]
 80047a8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80047aa:	2220      	movs	r2, #32
 80047ac:	431a      	orrs	r2, r3
 80047ae:	687b      	ldr	r3, [r7, #4]
 80047b0:	639a      	str	r2, [r3, #56]	; 0x38
      
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 80047b2:	687b      	ldr	r3, [r7, #4]
 80047b4:	2234      	movs	r2, #52	; 0x34
 80047b6:	2100      	movs	r1, #0
 80047b8:	5499      	strb	r1, [r3, r2]
      
      return HAL_ERROR;
 80047ba:	2301      	movs	r3, #1
 80047bc:	e06b      	b.n	8004896 <HAL_ADC_PollForConversion+0x116>
    }
    else
    {
      tmp_Flag_EOC = (ADC_FLAG_EOC | ADC_FLAG_EOS);
 80047be:	230c      	movs	r3, #12
 80047c0:	60fb      	str	r3, [r7, #12]
    }
  }
  
  /* Get tick count */
  tickstart = HAL_GetTick();
 80047c2:	f7ff fdff 	bl	80043c4 <HAL_GetTick>
 80047c6:	0003      	movs	r3, r0
 80047c8:	60bb      	str	r3, [r7, #8]
  
  /* Wait until End of Conversion flag is raised */
  while(HAL_IS_BIT_CLR(hadc->Instance->ISR, tmp_Flag_EOC))
 80047ca:	e019      	b.n	8004800 <HAL_ADC_PollForConversion+0x80>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if(Timeout != HAL_MAX_DELAY)
 80047cc:	683b      	ldr	r3, [r7, #0]
 80047ce:	3301      	adds	r3, #1
 80047d0:	d016      	beq.n	8004800 <HAL_ADC_PollForConversion+0x80>
    {
      if((Timeout == 0) || ((HAL_GetTick()-tickstart) > Timeout))
 80047d2:	683b      	ldr	r3, [r7, #0]
 80047d4:	2b00      	cmp	r3, #0
 80047d6:	d007      	beq.n	80047e8 <HAL_ADC_PollForConversion+0x68>
 80047d8:	f7ff fdf4 	bl	80043c4 <HAL_GetTick>
 80047dc:	0002      	movs	r2, r0
 80047de:	68bb      	ldr	r3, [r7, #8]
 80047e0:	1ad3      	subs	r3, r2, r3
 80047e2:	683a      	ldr	r2, [r7, #0]
 80047e4:	429a      	cmp	r2, r3
 80047e6:	d20b      	bcs.n	8004800 <HAL_ADC_PollForConversion+0x80>
      {
        /* Update ADC state machine to timeout */
        SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 80047e8:	687b      	ldr	r3, [r7, #4]
 80047ea:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80047ec:	2204      	movs	r2, #4
 80047ee:	431a      	orrs	r2, r3
 80047f0:	687b      	ldr	r3, [r7, #4]
 80047f2:	639a      	str	r2, [r3, #56]	; 0x38
        
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 80047f4:	687b      	ldr	r3, [r7, #4]
 80047f6:	2234      	movs	r2, #52	; 0x34
 80047f8:	2100      	movs	r1, #0
 80047fa:	5499      	strb	r1, [r3, r2]
        
        return HAL_TIMEOUT;
 80047fc:	2303      	movs	r3, #3
 80047fe:	e04a      	b.n	8004896 <HAL_ADC_PollForConversion+0x116>
  while(HAL_IS_BIT_CLR(hadc->Instance->ISR, tmp_Flag_EOC))
 8004800:	687b      	ldr	r3, [r7, #4]
 8004802:	681b      	ldr	r3, [r3, #0]
 8004804:	681b      	ldr	r3, [r3, #0]
 8004806:	68fa      	ldr	r2, [r7, #12]
 8004808:	4013      	ands	r3, r2
 800480a:	d0df      	beq.n	80047cc <HAL_ADC_PollForConversion+0x4c>
      }
    }
  }
    
  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 800480c:	687b      	ldr	r3, [r7, #4]
 800480e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004810:	2280      	movs	r2, #128	; 0x80
 8004812:	0092      	lsls	r2, r2, #2
 8004814:	431a      	orrs	r2, r3
 8004816:	687b      	ldr	r3, [r7, #4]
 8004818:	639a      	str	r2, [r3, #56]	; 0x38
  
  /* Determine whether any further conversion upcoming on group regular       */
  /* by external trigger, continuous mode or scan sequence on going.          */
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 800481a:	687b      	ldr	r3, [r7, #4]
 800481c:	681b      	ldr	r3, [r3, #0]
 800481e:	68da      	ldr	r2, [r3, #12]
 8004820:	23c0      	movs	r3, #192	; 0xc0
 8004822:	011b      	lsls	r3, r3, #4
 8004824:	4013      	ands	r3, r2
 8004826:	d12d      	bne.n	8004884 <HAL_ADC_PollForConversion+0x104>
     (hadc->Init.ContinuousConvMode == DISABLE)   )
 8004828:	687b      	ldr	r3, [r7, #4]
 800482a:	7e9b      	ldrb	r3, [r3, #26]
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 800482c:	2b00      	cmp	r3, #0
 800482e:	d129      	bne.n	8004884 <HAL_ADC_PollForConversion+0x104>
  {
    /* If End of Sequence is reached, disable interrupts */
    if( __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS) )
 8004830:	687b      	ldr	r3, [r7, #4]
 8004832:	681b      	ldr	r3, [r3, #0]
 8004834:	681b      	ldr	r3, [r3, #0]
 8004836:	2208      	movs	r2, #8
 8004838:	4013      	ands	r3, r2
 800483a:	2b08      	cmp	r3, #8
 800483c:	d122      	bne.n	8004884 <HAL_ADC_PollForConversion+0x104>
    {
      /* Allowed to modify bits ADC_IT_EOC/ADC_IT_EOS only if bit             */
      /* ADSTART==0 (no conversion on going)                                  */
      if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 800483e:	687b      	ldr	r3, [r7, #4]
 8004840:	681b      	ldr	r3, [r3, #0]
 8004842:	689b      	ldr	r3, [r3, #8]
 8004844:	2204      	movs	r2, #4
 8004846:	4013      	ands	r3, r2
 8004848:	d110      	bne.n	800486c <HAL_ADC_PollForConversion+0xec>
      {
        /* Disable ADC end of single conversion interrupt on group regular */
        /* Note: Overrun interrupt was enabled with EOC interrupt in          */
        /* HAL_Start_IT(), but is not disabled here because can be used       */
        /* by overrun IRQ process below.                                      */
        __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 800484a:	687b      	ldr	r3, [r7, #4]
 800484c:	681b      	ldr	r3, [r3, #0]
 800484e:	685a      	ldr	r2, [r3, #4]
 8004850:	687b      	ldr	r3, [r7, #4]
 8004852:	681b      	ldr	r3, [r3, #0]
 8004854:	210c      	movs	r1, #12
 8004856:	438a      	bics	r2, r1
 8004858:	605a      	str	r2, [r3, #4]
        
        /* Set ADC state */
        ADC_STATE_CLR_SET(hadc->State,
 800485a:	687b      	ldr	r3, [r7, #4]
 800485c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800485e:	4a10      	ldr	r2, [pc, #64]	; (80048a0 <HAL_ADC_PollForConversion+0x120>)
 8004860:	4013      	ands	r3, r2
 8004862:	2201      	movs	r2, #1
 8004864:	431a      	orrs	r2, r3
 8004866:	687b      	ldr	r3, [r7, #4]
 8004868:	639a      	str	r2, [r3, #56]	; 0x38
 800486a:	e00b      	b.n	8004884 <HAL_ADC_PollForConversion+0x104>
                          HAL_ADC_STATE_READY);
      }
      else
      {
        /* Change ADC state to error state */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800486c:	687b      	ldr	r3, [r7, #4]
 800486e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004870:	2220      	movs	r2, #32
 8004872:	431a      	orrs	r2, r3
 8004874:	687b      	ldr	r3, [r7, #4]
 8004876:	639a      	str	r2, [r3, #56]	; 0x38
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8004878:	687b      	ldr	r3, [r7, #4]
 800487a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800487c:	2201      	movs	r2, #1
 800487e:	431a      	orrs	r2, r3
 8004880:	687b      	ldr	r3, [r7, #4]
 8004882:	63da      	str	r2, [r3, #60]	; 0x3c
  }
  
  /* Clear end of conversion flag of regular group if low power feature       */
  /* "LowPowerAutoWait " is disabled, to not interfere with this feature      */
  /* until data register is read using function HAL_ADC_GetValue().           */
  if (hadc->Init.LowPowerAutoWait == DISABLE)
 8004884:	687b      	ldr	r3, [r7, #4]
 8004886:	7e1b      	ldrb	r3, [r3, #24]
 8004888:	2b00      	cmp	r3, #0
 800488a:	d103      	bne.n	8004894 <HAL_ADC_PollForConversion+0x114>
  {
    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 800488c:	687b      	ldr	r3, [r7, #4]
 800488e:	681b      	ldr	r3, [r3, #0]
 8004890:	220c      	movs	r2, #12
 8004892:	601a      	str	r2, [r3, #0]
  }
  
  /* Return ADC state */
  return HAL_OK;
 8004894:	2300      	movs	r3, #0
}
 8004896:	0018      	movs	r0, r3
 8004898:	46bd      	mov	sp, r7
 800489a:	b004      	add	sp, #16
 800489c:	bd80      	pop	{r7, pc}
 800489e:	46c0      	nop			; (mov r8, r8)
 80048a0:	fffffefe 	.word	0xfffffefe

080048a4 <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param  hadc ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{
 80048a4:	b580      	push	{r7, lr}
 80048a6:	b082      	sub	sp, #8
 80048a8:	af00      	add	r7, sp, #0
 80048aa:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */
  
  /* Return ADC converted value */ 
  return hadc->Instance->DR;
 80048ac:	687b      	ldr	r3, [r7, #4]
 80048ae:	681b      	ldr	r3, [r3, #0]
 80048b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
}
 80048b2:	0018      	movs	r0, r3
 80048b4:	46bd      	mov	sp, r7
 80048b6:	b002      	add	sp, #8
 80048b8:	bd80      	pop	{r7, pc}
	...

080048bc <HAL_ADC_ConfigChannel>:
  * @param  hadc ADC handle
  * @param  sConfig Structure of ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 80048bc:	b580      	push	{r7, lr}
 80048be:	b084      	sub	sp, #16
 80048c0:	af00      	add	r7, sp, #0
 80048c2:	6078      	str	r0, [r7, #4]
 80048c4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80048c6:	230f      	movs	r3, #15
 80048c8:	18fb      	adds	r3, r7, r3
 80048ca:	2200      	movs	r2, #0
 80048cc:	701a      	strb	r2, [r3, #0]
  __IO uint32_t wait_loop_index = 0U;
 80048ce:	2300      	movs	r3, #0
 80048d0:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_RANK(sConfig->Rank));
  
  if (! IS_ADC_SAMPLE_TIME(hadc->Init.SamplingTimeCommon))
 80048d2:	687b      	ldr	r3, [r7, #4]
 80048d4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80048d6:	2380      	movs	r3, #128	; 0x80
 80048d8:	055b      	lsls	r3, r3, #21
 80048da:	429a      	cmp	r2, r3
 80048dc:	d011      	beq.n	8004902 <HAL_ADC_ConfigChannel+0x46>
 80048de:	687b      	ldr	r3, [r7, #4]
 80048e0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80048e2:	2b01      	cmp	r3, #1
 80048e4:	d00d      	beq.n	8004902 <HAL_ADC_ConfigChannel+0x46>
 80048e6:	687b      	ldr	r3, [r7, #4]
 80048e8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80048ea:	2b02      	cmp	r3, #2
 80048ec:	d009      	beq.n	8004902 <HAL_ADC_ConfigChannel+0x46>
 80048ee:	687b      	ldr	r3, [r7, #4]
 80048f0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80048f2:	2b03      	cmp	r3, #3
 80048f4:	d005      	beq.n	8004902 <HAL_ADC_ConfigChannel+0x46>
 80048f6:	687b      	ldr	r3, [r7, #4]
 80048f8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80048fa:	2b04      	cmp	r3, #4
 80048fc:	d001      	beq.n	8004902 <HAL_ADC_ConfigChannel+0x46>
 80048fe:	687b      	ldr	r3, [r7, #4]
 8004900:	6adb      	ldr	r3, [r3, #44]	; 0x2c
  {
    assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  }
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8004902:	687b      	ldr	r3, [r7, #4]
 8004904:	2234      	movs	r2, #52	; 0x34
 8004906:	5c9b      	ldrb	r3, [r3, r2]
 8004908:	2b01      	cmp	r3, #1
 800490a:	d101      	bne.n	8004910 <HAL_ADC_ConfigChannel+0x54>
 800490c:	2302      	movs	r3, #2
 800490e:	e0d0      	b.n	8004ab2 <HAL_ADC_ConfigChannel+0x1f6>
 8004910:	687b      	ldr	r3, [r7, #4]
 8004912:	2234      	movs	r2, #52	; 0x34
 8004914:	2101      	movs	r1, #1
 8004916:	5499      	strb	r1, [r3, r2]
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel sampling time                                                 */
  /*  - Management of internal measurement channels: VrefInt/TempSensor/Vbat  */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 8004918:	687b      	ldr	r3, [r7, #4]
 800491a:	681b      	ldr	r3, [r3, #0]
 800491c:	689b      	ldr	r3, [r3, #8]
 800491e:	2204      	movs	r2, #4
 8004920:	4013      	ands	r3, r2
 8004922:	d000      	beq.n	8004926 <HAL_ADC_ConfigChannel+0x6a>
 8004924:	e0b4      	b.n	8004a90 <HAL_ADC_ConfigChannel+0x1d4>
  {
    /* Configure channel: depending on rank setting, add it or remove it from */
    /* ADC conversion sequencer.                                              */
    if (sConfig->Rank != ADC_RANK_NONE)
 8004926:	683b      	ldr	r3, [r7, #0]
 8004928:	685b      	ldr	r3, [r3, #4]
 800492a:	4a64      	ldr	r2, [pc, #400]	; (8004abc <HAL_ADC_ConfigChannel+0x200>)
 800492c:	4293      	cmp	r3, r2
 800492e:	d100      	bne.n	8004932 <HAL_ADC_ConfigChannel+0x76>
 8004930:	e082      	b.n	8004a38 <HAL_ADC_ConfigChannel+0x17c>
    {
      /* Regular sequence configuration */
      /* Set the channel selection register from the selected channel */
      hadc->Instance->CHSELR |= ADC_CHSELR_CHANNEL(sConfig->Channel);
 8004932:	687b      	ldr	r3, [r7, #4]
 8004934:	681b      	ldr	r3, [r3, #0]
 8004936:	6a99      	ldr	r1, [r3, #40]	; 0x28
 8004938:	683b      	ldr	r3, [r7, #0]
 800493a:	681b      	ldr	r3, [r3, #0]
 800493c:	2201      	movs	r2, #1
 800493e:	409a      	lsls	r2, r3
 8004940:	687b      	ldr	r3, [r7, #4]
 8004942:	681b      	ldr	r3, [r3, #0]
 8004944:	430a      	orrs	r2, r1
 8004946:	629a      	str	r2, [r3, #40]	; 0x28
      /* Channel sampling time configuration */
      /* Management of parameters "SamplingTimeCommon" and "SamplingTime"     */
      /* (obsolete): sampling time set in this function with                  */
      /* parameter "SamplingTime" (obsolete) only if not already set into     */
      /* ADC initialization structure with parameter "SamplingTimeCommon".    */
      if (! IS_ADC_SAMPLE_TIME(hadc->Init.SamplingTimeCommon))
 8004948:	687b      	ldr	r3, [r7, #4]
 800494a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800494c:	2380      	movs	r3, #128	; 0x80
 800494e:	055b      	lsls	r3, r3, #21
 8004950:	429a      	cmp	r2, r3
 8004952:	d037      	beq.n	80049c4 <HAL_ADC_ConfigChannel+0x108>
 8004954:	687b      	ldr	r3, [r7, #4]
 8004956:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004958:	2b01      	cmp	r3, #1
 800495a:	d033      	beq.n	80049c4 <HAL_ADC_ConfigChannel+0x108>
 800495c:	687b      	ldr	r3, [r7, #4]
 800495e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004960:	2b02      	cmp	r3, #2
 8004962:	d02f      	beq.n	80049c4 <HAL_ADC_ConfigChannel+0x108>
 8004964:	687b      	ldr	r3, [r7, #4]
 8004966:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004968:	2b03      	cmp	r3, #3
 800496a:	d02b      	beq.n	80049c4 <HAL_ADC_ConfigChannel+0x108>
 800496c:	687b      	ldr	r3, [r7, #4]
 800496e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004970:	2b04      	cmp	r3, #4
 8004972:	d027      	beq.n	80049c4 <HAL_ADC_ConfigChannel+0x108>
 8004974:	687b      	ldr	r3, [r7, #4]
 8004976:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004978:	2b05      	cmp	r3, #5
 800497a:	d023      	beq.n	80049c4 <HAL_ADC_ConfigChannel+0x108>
 800497c:	687b      	ldr	r3, [r7, #4]
 800497e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004980:	2b06      	cmp	r3, #6
 8004982:	d01f      	beq.n	80049c4 <HAL_ADC_ConfigChannel+0x108>
 8004984:	687b      	ldr	r3, [r7, #4]
 8004986:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004988:	2b07      	cmp	r3, #7
 800498a:	d01b      	beq.n	80049c4 <HAL_ADC_ConfigChannel+0x108>
      {
        /* Modify sampling time if needed (not needed in case of reoccurrence */
        /* for several channels programmed consecutively into the sequencer)  */
        if (sConfig->SamplingTime != ADC_GET_SAMPLINGTIME(hadc))
 800498c:	683b      	ldr	r3, [r7, #0]
 800498e:	689a      	ldr	r2, [r3, #8]
 8004990:	687b      	ldr	r3, [r7, #4]
 8004992:	681b      	ldr	r3, [r3, #0]
 8004994:	695b      	ldr	r3, [r3, #20]
 8004996:	2107      	movs	r1, #7
 8004998:	400b      	ands	r3, r1
 800499a:	429a      	cmp	r2, r3
 800499c:	d012      	beq.n	80049c4 <HAL_ADC_ConfigChannel+0x108>
        {
          /* Channel sampling time configuration */
          /* Clear the old sample time */
          hadc->Instance->SMPR &= ~(ADC_SMPR_SMP);
 800499e:	687b      	ldr	r3, [r7, #4]
 80049a0:	681b      	ldr	r3, [r3, #0]
 80049a2:	695a      	ldr	r2, [r3, #20]
 80049a4:	687b      	ldr	r3, [r7, #4]
 80049a6:	681b      	ldr	r3, [r3, #0]
 80049a8:	2107      	movs	r1, #7
 80049aa:	438a      	bics	r2, r1
 80049ac:	615a      	str	r2, [r3, #20]
          
          /* Set the new sample time */
          hadc->Instance->SMPR |= ADC_SMPR_SET(sConfig->SamplingTime);
 80049ae:	687b      	ldr	r3, [r7, #4]
 80049b0:	681b      	ldr	r3, [r3, #0]
 80049b2:	6959      	ldr	r1, [r3, #20]
 80049b4:	683b      	ldr	r3, [r7, #0]
 80049b6:	689b      	ldr	r3, [r3, #8]
 80049b8:	2207      	movs	r2, #7
 80049ba:	401a      	ands	r2, r3
 80049bc:	687b      	ldr	r3, [r7, #4]
 80049be:	681b      	ldr	r3, [r3, #0]
 80049c0:	430a      	orrs	r2, r1
 80049c2:	615a      	str	r2, [r3, #20]
      /* internal measurement paths enable: If internal channel selected,     */
      /* enable dedicated internal buffers and path.                          */
      /* Note: these internal measurement paths can be disabled using         */
      /*       HAL_ADC_DeInit() or removing the channel from sequencer with   */
      /*       channel configuration parameter "Rank".                        */
      if(ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 80049c4:	683b      	ldr	r3, [r7, #0]
 80049c6:	681b      	ldr	r3, [r3, #0]
 80049c8:	2b10      	cmp	r3, #16
 80049ca:	d007      	beq.n	80049dc <HAL_ADC_ConfigChannel+0x120>
 80049cc:	683b      	ldr	r3, [r7, #0]
 80049ce:	681b      	ldr	r3, [r3, #0]
 80049d0:	2b11      	cmp	r3, #17
 80049d2:	d003      	beq.n	80049dc <HAL_ADC_ConfigChannel+0x120>
 80049d4:	683b      	ldr	r3, [r7, #0]
 80049d6:	681b      	ldr	r3, [r3, #0]
 80049d8:	2b12      	cmp	r3, #18
 80049da:	d163      	bne.n	8004aa4 <HAL_ADC_ConfigChannel+0x1e8>
      {
        /* If Channel_16 is selected, enable Temp. sensor measurement path. */
        /* If Channel_17 is selected, enable VREFINT measurement path. */
        /* If Channel_18 is selected, enable VBAT measurement path. */
        ADC->CCR |= ADC_CHANNEL_INTERNAL_PATH(sConfig->Channel);
 80049dc:	4b38      	ldr	r3, [pc, #224]	; (8004ac0 <HAL_ADC_ConfigChannel+0x204>)
 80049de:	6819      	ldr	r1, [r3, #0]
 80049e0:	683b      	ldr	r3, [r7, #0]
 80049e2:	681b      	ldr	r3, [r3, #0]
 80049e4:	2b10      	cmp	r3, #16
 80049e6:	d009      	beq.n	80049fc <HAL_ADC_ConfigChannel+0x140>
 80049e8:	683b      	ldr	r3, [r7, #0]
 80049ea:	681b      	ldr	r3, [r3, #0]
 80049ec:	2b11      	cmp	r3, #17
 80049ee:	d102      	bne.n	80049f6 <HAL_ADC_ConfigChannel+0x13a>
 80049f0:	2380      	movs	r3, #128	; 0x80
 80049f2:	03db      	lsls	r3, r3, #15
 80049f4:	e004      	b.n	8004a00 <HAL_ADC_ConfigChannel+0x144>
 80049f6:	2380      	movs	r3, #128	; 0x80
 80049f8:	045b      	lsls	r3, r3, #17
 80049fa:	e001      	b.n	8004a00 <HAL_ADC_ConfigChannel+0x144>
 80049fc:	2380      	movs	r3, #128	; 0x80
 80049fe:	041b      	lsls	r3, r3, #16
 8004a00:	4a2f      	ldr	r2, [pc, #188]	; (8004ac0 <HAL_ADC_ConfigChannel+0x204>)
 8004a02:	430b      	orrs	r3, r1
 8004a04:	6013      	str	r3, [r2, #0]
        
        /* If Temp. sensor is selected, wait for stabilization delay */
        if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8004a06:	683b      	ldr	r3, [r7, #0]
 8004a08:	681b      	ldr	r3, [r3, #0]
 8004a0a:	2b10      	cmp	r3, #16
 8004a0c:	d14a      	bne.n	8004aa4 <HAL_ADC_ConfigChannel+0x1e8>
        {
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8004a0e:	4b2d      	ldr	r3, [pc, #180]	; (8004ac4 <HAL_ADC_ConfigChannel+0x208>)
 8004a10:	681b      	ldr	r3, [r3, #0]
 8004a12:	492d      	ldr	r1, [pc, #180]	; (8004ac8 <HAL_ADC_ConfigChannel+0x20c>)
 8004a14:	0018      	movs	r0, r3
 8004a16:	f7fb fb77 	bl	8000108 <__udivsi3>
 8004a1a:	0003      	movs	r3, r0
 8004a1c:	001a      	movs	r2, r3
 8004a1e:	0013      	movs	r3, r2
 8004a20:	009b      	lsls	r3, r3, #2
 8004a22:	189b      	adds	r3, r3, r2
 8004a24:	005b      	lsls	r3, r3, #1
 8004a26:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8004a28:	e002      	b.n	8004a30 <HAL_ADC_ConfigChannel+0x174>
          {
            wait_loop_index--;
 8004a2a:	68bb      	ldr	r3, [r7, #8]
 8004a2c:	3b01      	subs	r3, #1
 8004a2e:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8004a30:	68bb      	ldr	r3, [r7, #8]
 8004a32:	2b00      	cmp	r3, #0
 8004a34:	d1f9      	bne.n	8004a2a <HAL_ADC_ConfigChannel+0x16e>
 8004a36:	e035      	b.n	8004aa4 <HAL_ADC_ConfigChannel+0x1e8>
    }
    else
    {
      /* Regular sequence configuration */
      /* Reset the channel selection register from the selected channel */
      hadc->Instance->CHSELR &= ~ADC_CHSELR_CHANNEL(sConfig->Channel);
 8004a38:	687b      	ldr	r3, [r7, #4]
 8004a3a:	681b      	ldr	r3, [r3, #0]
 8004a3c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8004a3e:	683b      	ldr	r3, [r7, #0]
 8004a40:	681b      	ldr	r3, [r3, #0]
 8004a42:	2101      	movs	r1, #1
 8004a44:	4099      	lsls	r1, r3
 8004a46:	000b      	movs	r3, r1
 8004a48:	43d9      	mvns	r1, r3
 8004a4a:	687b      	ldr	r3, [r7, #4]
 8004a4c:	681b      	ldr	r3, [r3, #0]
 8004a4e:	400a      	ands	r2, r1
 8004a50:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* Management of internal measurement channels: VrefInt/TempSensor/Vbat */
      /* internal measurement paths disable: If internal channel selected,    */
      /* disable dedicated internal buffers and path.                         */
      if(ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 8004a52:	683b      	ldr	r3, [r7, #0]
 8004a54:	681b      	ldr	r3, [r3, #0]
 8004a56:	2b10      	cmp	r3, #16
 8004a58:	d007      	beq.n	8004a6a <HAL_ADC_ConfigChannel+0x1ae>
 8004a5a:	683b      	ldr	r3, [r7, #0]
 8004a5c:	681b      	ldr	r3, [r3, #0]
 8004a5e:	2b11      	cmp	r3, #17
 8004a60:	d003      	beq.n	8004a6a <HAL_ADC_ConfigChannel+0x1ae>
 8004a62:	683b      	ldr	r3, [r7, #0]
 8004a64:	681b      	ldr	r3, [r3, #0]
 8004a66:	2b12      	cmp	r3, #18
 8004a68:	d11c      	bne.n	8004aa4 <HAL_ADC_ConfigChannel+0x1e8>
      {
        /* If Channel_16 is selected, disable Temp. sensor measurement path. */
        /* If Channel_17 is selected, disable VREFINT measurement path. */
        /* If Channel_18 is selected, disable VBAT measurement path. */
        ADC->CCR &= ~ADC_CHANNEL_INTERNAL_PATH(sConfig->Channel);
 8004a6a:	4b15      	ldr	r3, [pc, #84]	; (8004ac0 <HAL_ADC_ConfigChannel+0x204>)
 8004a6c:	6819      	ldr	r1, [r3, #0]
 8004a6e:	683b      	ldr	r3, [r7, #0]
 8004a70:	681b      	ldr	r3, [r3, #0]
 8004a72:	2b10      	cmp	r3, #16
 8004a74:	d007      	beq.n	8004a86 <HAL_ADC_ConfigChannel+0x1ca>
 8004a76:	683b      	ldr	r3, [r7, #0]
 8004a78:	681b      	ldr	r3, [r3, #0]
 8004a7a:	2b11      	cmp	r3, #17
 8004a7c:	d101      	bne.n	8004a82 <HAL_ADC_ConfigChannel+0x1c6>
 8004a7e:	4b13      	ldr	r3, [pc, #76]	; (8004acc <HAL_ADC_ConfigChannel+0x210>)
 8004a80:	e002      	b.n	8004a88 <HAL_ADC_ConfigChannel+0x1cc>
 8004a82:	4b13      	ldr	r3, [pc, #76]	; (8004ad0 <HAL_ADC_ConfigChannel+0x214>)
 8004a84:	e000      	b.n	8004a88 <HAL_ADC_ConfigChannel+0x1cc>
 8004a86:	4b13      	ldr	r3, [pc, #76]	; (8004ad4 <HAL_ADC_ConfigChannel+0x218>)
 8004a88:	4a0d      	ldr	r2, [pc, #52]	; (8004ac0 <HAL_ADC_ConfigChannel+0x204>)
 8004a8a:	400b      	ands	r3, r1
 8004a8c:	6013      	str	r3, [r2, #0]
 8004a8e:	e009      	b.n	8004aa4 <HAL_ADC_ConfigChannel+0x1e8>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8004a90:	687b      	ldr	r3, [r7, #4]
 8004a92:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004a94:	2220      	movs	r2, #32
 8004a96:	431a      	orrs	r2, r3
 8004a98:	687b      	ldr	r3, [r7, #4]
 8004a9a:	639a      	str	r2, [r3, #56]	; 0x38
    
    tmp_hal_status = HAL_ERROR;
 8004a9c:	230f      	movs	r3, #15
 8004a9e:	18fb      	adds	r3, r7, r3
 8004aa0:	2201      	movs	r2, #1
 8004aa2:	701a      	strb	r2, [r3, #0]
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8004aa4:	687b      	ldr	r3, [r7, #4]
 8004aa6:	2234      	movs	r2, #52	; 0x34
 8004aa8:	2100      	movs	r1, #0
 8004aaa:	5499      	strb	r1, [r3, r2]
  
  /* Return function status */
  return tmp_hal_status;
 8004aac:	230f      	movs	r3, #15
 8004aae:	18fb      	adds	r3, r7, r3
 8004ab0:	781b      	ldrb	r3, [r3, #0]
}
 8004ab2:	0018      	movs	r0, r3
 8004ab4:	46bd      	mov	sp, r7
 8004ab6:	b004      	add	sp, #16
 8004ab8:	bd80      	pop	{r7, pc}
 8004aba:	46c0      	nop			; (mov r8, r8)
 8004abc:	00001001 	.word	0x00001001
 8004ac0:	40012708 	.word	0x40012708
 8004ac4:	20000004 	.word	0x20000004
 8004ac8:	000f4240 	.word	0x000f4240
 8004acc:	ffbfffff 	.word	0xffbfffff
 8004ad0:	feffffff 	.word	0xfeffffff
 8004ad4:	ff7fffff 	.word	0xff7fffff

08004ad8 <ADC_Enable>:
  *         "if (hadc->Init.LowPowerAutoPowerOff != ENABLE)".
  * @param  hadc ADC handle
  * @retval HAL status.
  */
static HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
 8004ad8:	b580      	push	{r7, lr}
 8004ada:	b084      	sub	sp, #16
 8004adc:	af00      	add	r7, sp, #0
 8004ade:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8004ae0:	2300      	movs	r3, #0
 8004ae2:	60fb      	str	r3, [r7, #12]
  __IO uint32_t wait_loop_index = 0U;
 8004ae4:	2300      	movs	r3, #0
 8004ae6:	60bb      	str	r3, [r7, #8]
  
  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 8004ae8:	687b      	ldr	r3, [r7, #4]
 8004aea:	681b      	ldr	r3, [r3, #0]
 8004aec:	689b      	ldr	r3, [r3, #8]
 8004aee:	2203      	movs	r2, #3
 8004af0:	4013      	ands	r3, r2
 8004af2:	2b01      	cmp	r3, #1
 8004af4:	d112      	bne.n	8004b1c <ADC_Enable+0x44>
 8004af6:	687b      	ldr	r3, [r7, #4]
 8004af8:	681b      	ldr	r3, [r3, #0]
 8004afa:	681b      	ldr	r3, [r3, #0]
 8004afc:	2201      	movs	r2, #1
 8004afe:	4013      	ands	r3, r2
 8004b00:	2b01      	cmp	r3, #1
 8004b02:	d009      	beq.n	8004b18 <ADC_Enable+0x40>
 8004b04:	687b      	ldr	r3, [r7, #4]
 8004b06:	681b      	ldr	r3, [r3, #0]
 8004b08:	68da      	ldr	r2, [r3, #12]
 8004b0a:	2380      	movs	r3, #128	; 0x80
 8004b0c:	021b      	lsls	r3, r3, #8
 8004b0e:	401a      	ands	r2, r3
 8004b10:	2380      	movs	r3, #128	; 0x80
 8004b12:	021b      	lsls	r3, r3, #8
 8004b14:	429a      	cmp	r2, r3
 8004b16:	d101      	bne.n	8004b1c <ADC_Enable+0x44>
 8004b18:	2301      	movs	r3, #1
 8004b1a:	e000      	b.n	8004b1e <ADC_Enable+0x46>
 8004b1c:	2300      	movs	r3, #0
 8004b1e:	2b00      	cmp	r3, #0
 8004b20:	d14b      	bne.n	8004bba <ADC_Enable+0xe2>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if (ADC_ENABLING_CONDITIONS(hadc) == RESET)
 8004b22:	687b      	ldr	r3, [r7, #4]
 8004b24:	681b      	ldr	r3, [r3, #0]
 8004b26:	689b      	ldr	r3, [r3, #8]
 8004b28:	4a26      	ldr	r2, [pc, #152]	; (8004bc4 <ADC_Enable+0xec>)
 8004b2a:	4013      	ands	r3, r2
 8004b2c:	d00d      	beq.n	8004b4a <ADC_Enable+0x72>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004b2e:	687b      	ldr	r3, [r7, #4]
 8004b30:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004b32:	2210      	movs	r2, #16
 8004b34:	431a      	orrs	r2, r3
 8004b36:	687b      	ldr	r3, [r7, #4]
 8004b38:	639a      	str	r2, [r3, #56]	; 0x38
    
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8004b3a:	687b      	ldr	r3, [r7, #4]
 8004b3c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004b3e:	2201      	movs	r2, #1
 8004b40:	431a      	orrs	r2, r3
 8004b42:	687b      	ldr	r3, [r7, #4]
 8004b44:	63da      	str	r2, [r3, #60]	; 0x3c
      
      return HAL_ERROR;
 8004b46:	2301      	movs	r3, #1
 8004b48:	e038      	b.n	8004bbc <ADC_Enable+0xe4>
    }
    
    /* Enable the ADC peripheral */
    __HAL_ADC_ENABLE(hadc);
 8004b4a:	687b      	ldr	r3, [r7, #4]
 8004b4c:	681b      	ldr	r3, [r3, #0]
 8004b4e:	689a      	ldr	r2, [r3, #8]
 8004b50:	687b      	ldr	r3, [r7, #4]
 8004b52:	681b      	ldr	r3, [r3, #0]
 8004b54:	2101      	movs	r1, #1
 8004b56:	430a      	orrs	r2, r1
 8004b58:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8004b5a:	4b1b      	ldr	r3, [pc, #108]	; (8004bc8 <ADC_Enable+0xf0>)
 8004b5c:	681b      	ldr	r3, [r3, #0]
 8004b5e:	491b      	ldr	r1, [pc, #108]	; (8004bcc <ADC_Enable+0xf4>)
 8004b60:	0018      	movs	r0, r3
 8004b62:	f7fb fad1 	bl	8000108 <__udivsi3>
 8004b66:	0003      	movs	r3, r0
 8004b68:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 8004b6a:	e002      	b.n	8004b72 <ADC_Enable+0x9a>
    {
      wait_loop_index--;
 8004b6c:	68bb      	ldr	r3, [r7, #8]
 8004b6e:	3b01      	subs	r3, #1
 8004b70:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 8004b72:	68bb      	ldr	r3, [r7, #8]
 8004b74:	2b00      	cmp	r3, #0
 8004b76:	d1f9      	bne.n	8004b6c <ADC_Enable+0x94>
    }

    /* Get tick count */
    tickstart = HAL_GetTick();
 8004b78:	f7ff fc24 	bl	80043c4 <HAL_GetTick>
 8004b7c:	0003      	movs	r3, r0
 8004b7e:	60fb      	str	r3, [r7, #12]
    
    /* Wait for ADC effectively enabled */
    while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 8004b80:	e014      	b.n	8004bac <ADC_Enable+0xd4>
    {
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8004b82:	f7ff fc1f 	bl	80043c4 <HAL_GetTick>
 8004b86:	0002      	movs	r2, r0
 8004b88:	68fb      	ldr	r3, [r7, #12]
 8004b8a:	1ad3      	subs	r3, r2, r3
 8004b8c:	2b02      	cmp	r3, #2
 8004b8e:	d90d      	bls.n	8004bac <ADC_Enable+0xd4>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004b90:	687b      	ldr	r3, [r7, #4]
 8004b92:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004b94:	2210      	movs	r2, #16
 8004b96:	431a      	orrs	r2, r3
 8004b98:	687b      	ldr	r3, [r7, #4]
 8004b9a:	639a      	str	r2, [r3, #56]	; 0x38
      
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8004b9c:	687b      	ldr	r3, [r7, #4]
 8004b9e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004ba0:	2201      	movs	r2, #1
 8004ba2:	431a      	orrs	r2, r3
 8004ba4:	687b      	ldr	r3, [r7, #4]
 8004ba6:	63da      	str	r2, [r3, #60]	; 0x3c
      
        return HAL_ERROR;
 8004ba8:	2301      	movs	r3, #1
 8004baa:	e007      	b.n	8004bbc <ADC_Enable+0xe4>
    while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 8004bac:	687b      	ldr	r3, [r7, #4]
 8004bae:	681b      	ldr	r3, [r3, #0]
 8004bb0:	681b      	ldr	r3, [r3, #0]
 8004bb2:	2201      	movs	r2, #1
 8004bb4:	4013      	ands	r3, r2
 8004bb6:	2b01      	cmp	r3, #1
 8004bb8:	d1e3      	bne.n	8004b82 <ADC_Enable+0xaa>
    }   
    
  }
   
  /* Return HAL status */
  return HAL_OK;
 8004bba:	2300      	movs	r3, #0
}
 8004bbc:	0018      	movs	r0, r3
 8004bbe:	46bd      	mov	sp, r7
 8004bc0:	b004      	add	sp, #16
 8004bc2:	bd80      	pop	{r7, pc}
 8004bc4:	80000017 	.word	0x80000017
 8004bc8:	20000004 	.word	0x20000004
 8004bcc:	000f4240 	.word	0x000f4240

08004bd0 <ADC_Disable>:
  *         stopped.
  * @param  hadc ADC handle
  * @retval HAL status.
  */
static HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef* hadc)
{
 8004bd0:	b580      	push	{r7, lr}
 8004bd2:	b084      	sub	sp, #16
 8004bd4:	af00      	add	r7, sp, #0
 8004bd6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8004bd8:	2300      	movs	r3, #0
 8004bda:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /*       disabled.                                                          */
  if (ADC_IS_ENABLE(hadc) != RESET)
 8004bdc:	687b      	ldr	r3, [r7, #4]
 8004bde:	681b      	ldr	r3, [r3, #0]
 8004be0:	689b      	ldr	r3, [r3, #8]
 8004be2:	2203      	movs	r2, #3
 8004be4:	4013      	ands	r3, r2
 8004be6:	2b01      	cmp	r3, #1
 8004be8:	d112      	bne.n	8004c10 <ADC_Disable+0x40>
 8004bea:	687b      	ldr	r3, [r7, #4]
 8004bec:	681b      	ldr	r3, [r3, #0]
 8004bee:	681b      	ldr	r3, [r3, #0]
 8004bf0:	2201      	movs	r2, #1
 8004bf2:	4013      	ands	r3, r2
 8004bf4:	2b01      	cmp	r3, #1
 8004bf6:	d009      	beq.n	8004c0c <ADC_Disable+0x3c>
 8004bf8:	687b      	ldr	r3, [r7, #4]
 8004bfa:	681b      	ldr	r3, [r3, #0]
 8004bfc:	68da      	ldr	r2, [r3, #12]
 8004bfe:	2380      	movs	r3, #128	; 0x80
 8004c00:	021b      	lsls	r3, r3, #8
 8004c02:	401a      	ands	r2, r3
 8004c04:	2380      	movs	r3, #128	; 0x80
 8004c06:	021b      	lsls	r3, r3, #8
 8004c08:	429a      	cmp	r2, r3
 8004c0a:	d101      	bne.n	8004c10 <ADC_Disable+0x40>
 8004c0c:	2301      	movs	r3, #1
 8004c0e:	e000      	b.n	8004c12 <ADC_Disable+0x42>
 8004c10:	2300      	movs	r3, #0
 8004c12:	2b00      	cmp	r3, #0
 8004c14:	d041      	beq.n	8004c9a <ADC_Disable+0xca>
  {
    /* Check if conditions to disable the ADC are fulfilled */
    if (ADC_DISABLING_CONDITIONS(hadc) != RESET)
 8004c16:	687b      	ldr	r3, [r7, #4]
 8004c18:	681b      	ldr	r3, [r3, #0]
 8004c1a:	689b      	ldr	r3, [r3, #8]
 8004c1c:	2205      	movs	r2, #5
 8004c1e:	4013      	ands	r3, r2
 8004c20:	2b01      	cmp	r3, #1
 8004c22:	d110      	bne.n	8004c46 <ADC_Disable+0x76>
    {
      /* Disable the ADC peripheral */
      __HAL_ADC_DISABLE(hadc);
 8004c24:	687b      	ldr	r3, [r7, #4]
 8004c26:	681b      	ldr	r3, [r3, #0]
 8004c28:	689a      	ldr	r2, [r3, #8]
 8004c2a:	687b      	ldr	r3, [r7, #4]
 8004c2c:	681b      	ldr	r3, [r3, #0]
 8004c2e:	2102      	movs	r1, #2
 8004c30:	430a      	orrs	r2, r1
 8004c32:	609a      	str	r2, [r3, #8]
 8004c34:	687b      	ldr	r3, [r7, #4]
 8004c36:	681b      	ldr	r3, [r3, #0]
 8004c38:	2203      	movs	r2, #3
 8004c3a:	601a      	str	r2, [r3, #0]
      return HAL_ERROR;
    }
     
    /* Wait for ADC effectively disabled */
    /* Get tick count */
    tickstart = HAL_GetTick();
 8004c3c:	f7ff fbc2 	bl	80043c4 <HAL_GetTick>
 8004c40:	0003      	movs	r3, r0
 8004c42:	60fb      	str	r3, [r7, #12]
    
    while(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 8004c44:	e022      	b.n	8004c8c <ADC_Disable+0xbc>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004c46:	687b      	ldr	r3, [r7, #4]
 8004c48:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004c4a:	2210      	movs	r2, #16
 8004c4c:	431a      	orrs	r2, r3
 8004c4e:	687b      	ldr	r3, [r7, #4]
 8004c50:	639a      	str	r2, [r3, #56]	; 0x38
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8004c52:	687b      	ldr	r3, [r7, #4]
 8004c54:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004c56:	2201      	movs	r2, #1
 8004c58:	431a      	orrs	r2, r3
 8004c5a:	687b      	ldr	r3, [r7, #4]
 8004c5c:	63da      	str	r2, [r3, #60]	; 0x3c
      return HAL_ERROR;
 8004c5e:	2301      	movs	r3, #1
 8004c60:	e01c      	b.n	8004c9c <ADC_Disable+0xcc>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8004c62:	f7ff fbaf 	bl	80043c4 <HAL_GetTick>
 8004c66:	0002      	movs	r2, r0
 8004c68:	68fb      	ldr	r3, [r7, #12]
 8004c6a:	1ad3      	subs	r3, r2, r3
 8004c6c:	2b02      	cmp	r3, #2
 8004c6e:	d90d      	bls.n	8004c8c <ADC_Disable+0xbc>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004c70:	687b      	ldr	r3, [r7, #4]
 8004c72:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004c74:	2210      	movs	r2, #16
 8004c76:	431a      	orrs	r2, r3
 8004c78:	687b      	ldr	r3, [r7, #4]
 8004c7a:	639a      	str	r2, [r3, #56]	; 0x38
      
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8004c7c:	687b      	ldr	r3, [r7, #4]
 8004c7e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004c80:	2201      	movs	r2, #1
 8004c82:	431a      	orrs	r2, r3
 8004c84:	687b      	ldr	r3, [r7, #4]
 8004c86:	63da      	str	r2, [r3, #60]	; 0x3c
        
        return HAL_ERROR;
 8004c88:	2301      	movs	r3, #1
 8004c8a:	e007      	b.n	8004c9c <ADC_Disable+0xcc>
    while(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 8004c8c:	687b      	ldr	r3, [r7, #4]
 8004c8e:	681b      	ldr	r3, [r3, #0]
 8004c90:	689b      	ldr	r3, [r3, #8]
 8004c92:	2201      	movs	r2, #1
 8004c94:	4013      	ands	r3, r2
 8004c96:	2b01      	cmp	r3, #1
 8004c98:	d0e3      	beq.n	8004c62 <ADC_Disable+0x92>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 8004c9a:	2300      	movs	r3, #0
}
 8004c9c:	0018      	movs	r0, r3
 8004c9e:	46bd      	mov	sp, r7
 8004ca0:	b004      	add	sp, #16
 8004ca2:	bd80      	pop	{r7, pc}

08004ca4 <ADC_ConversionStop>:
  *         stopped to disable the ADC.
  * @param  hadc ADC handle
  * @retval HAL status.
  */
static HAL_StatusTypeDef ADC_ConversionStop(ADC_HandleTypeDef* hadc)
{
 8004ca4:	b580      	push	{r7, lr}
 8004ca6:	b084      	sub	sp, #16
 8004ca8:	af00      	add	r7, sp, #0
 8004caa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8004cac:	2300      	movs	r3, #0
 8004cae:	60fb      	str	r3, [r7, #12]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
    
  /* Verification if ADC is not already stopped on regular group to bypass    */
  /* this function if not needed.                                             */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc))
 8004cb0:	687b      	ldr	r3, [r7, #4]
 8004cb2:	681b      	ldr	r3, [r3, #0]
 8004cb4:	689b      	ldr	r3, [r3, #8]
 8004cb6:	2204      	movs	r2, #4
 8004cb8:	4013      	ands	r3, r2
 8004cba:	d034      	beq.n	8004d26 <ADC_ConversionStop+0x82>
  {
    
    /* Stop potential conversion on going on regular group */
    /* Software is allowed to set ADSTP only when ADSTART=1 and ADDIS=0 */
    if (HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADSTART) && 
 8004cbc:	687b      	ldr	r3, [r7, #4]
 8004cbe:	681b      	ldr	r3, [r3, #0]
 8004cc0:	689b      	ldr	r3, [r3, #8]
 8004cc2:	2204      	movs	r2, #4
 8004cc4:	4013      	ands	r3, r2
 8004cc6:	2b04      	cmp	r3, #4
 8004cc8:	d10d      	bne.n	8004ce6 <ADC_ConversionStop+0x42>
        HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADDIS)                  )
 8004cca:	687b      	ldr	r3, [r7, #4]
 8004ccc:	681b      	ldr	r3, [r3, #0]
 8004cce:	689b      	ldr	r3, [r3, #8]
 8004cd0:	2202      	movs	r2, #2
 8004cd2:	4013      	ands	r3, r2
    if (HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADSTART) && 
 8004cd4:	d107      	bne.n	8004ce6 <ADC_ConversionStop+0x42>
    {
      /* Stop conversions on regular group */
      hadc->Instance->CR |= ADC_CR_ADSTP;
 8004cd6:	687b      	ldr	r3, [r7, #4]
 8004cd8:	681b      	ldr	r3, [r3, #0]
 8004cda:	689a      	ldr	r2, [r3, #8]
 8004cdc:	687b      	ldr	r3, [r7, #4]
 8004cde:	681b      	ldr	r3, [r3, #0]
 8004ce0:	2110      	movs	r1, #16
 8004ce2:	430a      	orrs	r2, r1
 8004ce4:	609a      	str	r2, [r3, #8]
    }
    
    /* Wait for conversion effectively stopped */
    /* Get tick count */
    tickstart = HAL_GetTick();
 8004ce6:	f7ff fb6d 	bl	80043c4 <HAL_GetTick>
 8004cea:	0003      	movs	r3, r0
 8004cec:	60fb      	str	r3, [r7, #12]
      
    while((hadc->Instance->CR & ADC_CR_ADSTART) != RESET)
 8004cee:	e014      	b.n	8004d1a <ADC_ConversionStop+0x76>
    {
      if((HAL_GetTick() - tickstart) > ADC_STOP_CONVERSION_TIMEOUT)
 8004cf0:	f7ff fb68 	bl	80043c4 <HAL_GetTick>
 8004cf4:	0002      	movs	r2, r0
 8004cf6:	68fb      	ldr	r3, [r7, #12]
 8004cf8:	1ad3      	subs	r3, r2, r3
 8004cfa:	2b02      	cmp	r3, #2
 8004cfc:	d90d      	bls.n	8004d1a <ADC_ConversionStop+0x76>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004cfe:	687b      	ldr	r3, [r7, #4]
 8004d00:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004d02:	2210      	movs	r2, #16
 8004d04:	431a      	orrs	r2, r3
 8004d06:	687b      	ldr	r3, [r7, #4]
 8004d08:	639a      	str	r2, [r3, #56]	; 0x38
      
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8004d0a:	687b      	ldr	r3, [r7, #4]
 8004d0c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004d0e:	2201      	movs	r2, #1
 8004d10:	431a      	orrs	r2, r3
 8004d12:	687b      	ldr	r3, [r7, #4]
 8004d14:	63da      	str	r2, [r3, #60]	; 0x3c
        
        return HAL_ERROR;
 8004d16:	2301      	movs	r3, #1
 8004d18:	e006      	b.n	8004d28 <ADC_ConversionStop+0x84>
    while((hadc->Instance->CR & ADC_CR_ADSTART) != RESET)
 8004d1a:	687b      	ldr	r3, [r7, #4]
 8004d1c:	681b      	ldr	r3, [r3, #0]
 8004d1e:	689b      	ldr	r3, [r3, #8]
 8004d20:	2204      	movs	r2, #4
 8004d22:	4013      	ands	r3, r2
 8004d24:	d1e4      	bne.n	8004cf0 <ADC_ConversionStop+0x4c>
    }
    
  }
   
  /* Return HAL status */
  return HAL_OK;
 8004d26:	2300      	movs	r3, #0
}
 8004d28:	0018      	movs	r0, r3
 8004d2a:	46bd      	mov	sp, r7
 8004d2c:	b004      	add	sp, #16
 8004d2e:	bd80      	pop	{r7, pc}

08004d30 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004d30:	b580      	push	{r7, lr}
 8004d32:	b082      	sub	sp, #8
 8004d34:	af00      	add	r7, sp, #0
 8004d36:	0002      	movs	r2, r0
 8004d38:	1dfb      	adds	r3, r7, #7
 8004d3a:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8004d3c:	1dfb      	adds	r3, r7, #7
 8004d3e:	781b      	ldrb	r3, [r3, #0]
 8004d40:	2b7f      	cmp	r3, #127	; 0x7f
 8004d42:	d809      	bhi.n	8004d58 <__NVIC_EnableIRQ+0x28>
  {
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8004d44:	1dfb      	adds	r3, r7, #7
 8004d46:	781b      	ldrb	r3, [r3, #0]
 8004d48:	001a      	movs	r2, r3
 8004d4a:	231f      	movs	r3, #31
 8004d4c:	401a      	ands	r2, r3
 8004d4e:	4b04      	ldr	r3, [pc, #16]	; (8004d60 <__NVIC_EnableIRQ+0x30>)
 8004d50:	2101      	movs	r1, #1
 8004d52:	4091      	lsls	r1, r2
 8004d54:	000a      	movs	r2, r1
 8004d56:	601a      	str	r2, [r3, #0]
  }
}
 8004d58:	46c0      	nop			; (mov r8, r8)
 8004d5a:	46bd      	mov	sp, r7
 8004d5c:	b002      	add	sp, #8
 8004d5e:	bd80      	pop	{r7, pc}
 8004d60:	e000e100 	.word	0xe000e100

08004d64 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8004d64:	b590      	push	{r4, r7, lr}
 8004d66:	b083      	sub	sp, #12
 8004d68:	af00      	add	r7, sp, #0
 8004d6a:	0002      	movs	r2, r0
 8004d6c:	6039      	str	r1, [r7, #0]
 8004d6e:	1dfb      	adds	r3, r7, #7
 8004d70:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8004d72:	1dfb      	adds	r3, r7, #7
 8004d74:	781b      	ldrb	r3, [r3, #0]
 8004d76:	2b7f      	cmp	r3, #127	; 0x7f
 8004d78:	d828      	bhi.n	8004dcc <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8004d7a:	4a2f      	ldr	r2, [pc, #188]	; (8004e38 <__NVIC_SetPriority+0xd4>)
 8004d7c:	1dfb      	adds	r3, r7, #7
 8004d7e:	781b      	ldrb	r3, [r3, #0]
 8004d80:	b25b      	sxtb	r3, r3
 8004d82:	089b      	lsrs	r3, r3, #2
 8004d84:	33c0      	adds	r3, #192	; 0xc0
 8004d86:	009b      	lsls	r3, r3, #2
 8004d88:	589b      	ldr	r3, [r3, r2]
 8004d8a:	1dfa      	adds	r2, r7, #7
 8004d8c:	7812      	ldrb	r2, [r2, #0]
 8004d8e:	0011      	movs	r1, r2
 8004d90:	2203      	movs	r2, #3
 8004d92:	400a      	ands	r2, r1
 8004d94:	00d2      	lsls	r2, r2, #3
 8004d96:	21ff      	movs	r1, #255	; 0xff
 8004d98:	4091      	lsls	r1, r2
 8004d9a:	000a      	movs	r2, r1
 8004d9c:	43d2      	mvns	r2, r2
 8004d9e:	401a      	ands	r2, r3
 8004da0:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8004da2:	683b      	ldr	r3, [r7, #0]
 8004da4:	019b      	lsls	r3, r3, #6
 8004da6:	22ff      	movs	r2, #255	; 0xff
 8004da8:	401a      	ands	r2, r3
 8004daa:	1dfb      	adds	r3, r7, #7
 8004dac:	781b      	ldrb	r3, [r3, #0]
 8004dae:	0018      	movs	r0, r3
 8004db0:	2303      	movs	r3, #3
 8004db2:	4003      	ands	r3, r0
 8004db4:	00db      	lsls	r3, r3, #3
 8004db6:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8004db8:	481f      	ldr	r0, [pc, #124]	; (8004e38 <__NVIC_SetPriority+0xd4>)
 8004dba:	1dfb      	adds	r3, r7, #7
 8004dbc:	781b      	ldrb	r3, [r3, #0]
 8004dbe:	b25b      	sxtb	r3, r3
 8004dc0:	089b      	lsrs	r3, r3, #2
 8004dc2:	430a      	orrs	r2, r1
 8004dc4:	33c0      	adds	r3, #192	; 0xc0
 8004dc6:	009b      	lsls	r3, r3, #2
 8004dc8:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 8004dca:	e031      	b.n	8004e30 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8004dcc:	4a1b      	ldr	r2, [pc, #108]	; (8004e3c <__NVIC_SetPriority+0xd8>)
 8004dce:	1dfb      	adds	r3, r7, #7
 8004dd0:	781b      	ldrb	r3, [r3, #0]
 8004dd2:	0019      	movs	r1, r3
 8004dd4:	230f      	movs	r3, #15
 8004dd6:	400b      	ands	r3, r1
 8004dd8:	3b08      	subs	r3, #8
 8004dda:	089b      	lsrs	r3, r3, #2
 8004ddc:	3306      	adds	r3, #6
 8004dde:	009b      	lsls	r3, r3, #2
 8004de0:	18d3      	adds	r3, r2, r3
 8004de2:	3304      	adds	r3, #4
 8004de4:	681b      	ldr	r3, [r3, #0]
 8004de6:	1dfa      	adds	r2, r7, #7
 8004de8:	7812      	ldrb	r2, [r2, #0]
 8004dea:	0011      	movs	r1, r2
 8004dec:	2203      	movs	r2, #3
 8004dee:	400a      	ands	r2, r1
 8004df0:	00d2      	lsls	r2, r2, #3
 8004df2:	21ff      	movs	r1, #255	; 0xff
 8004df4:	4091      	lsls	r1, r2
 8004df6:	000a      	movs	r2, r1
 8004df8:	43d2      	mvns	r2, r2
 8004dfa:	401a      	ands	r2, r3
 8004dfc:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8004dfe:	683b      	ldr	r3, [r7, #0]
 8004e00:	019b      	lsls	r3, r3, #6
 8004e02:	22ff      	movs	r2, #255	; 0xff
 8004e04:	401a      	ands	r2, r3
 8004e06:	1dfb      	adds	r3, r7, #7
 8004e08:	781b      	ldrb	r3, [r3, #0]
 8004e0a:	0018      	movs	r0, r3
 8004e0c:	2303      	movs	r3, #3
 8004e0e:	4003      	ands	r3, r0
 8004e10:	00db      	lsls	r3, r3, #3
 8004e12:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8004e14:	4809      	ldr	r0, [pc, #36]	; (8004e3c <__NVIC_SetPriority+0xd8>)
 8004e16:	1dfb      	adds	r3, r7, #7
 8004e18:	781b      	ldrb	r3, [r3, #0]
 8004e1a:	001c      	movs	r4, r3
 8004e1c:	230f      	movs	r3, #15
 8004e1e:	4023      	ands	r3, r4
 8004e20:	3b08      	subs	r3, #8
 8004e22:	089b      	lsrs	r3, r3, #2
 8004e24:	430a      	orrs	r2, r1
 8004e26:	3306      	adds	r3, #6
 8004e28:	009b      	lsls	r3, r3, #2
 8004e2a:	18c3      	adds	r3, r0, r3
 8004e2c:	3304      	adds	r3, #4
 8004e2e:	601a      	str	r2, [r3, #0]
}
 8004e30:	46c0      	nop			; (mov r8, r8)
 8004e32:	46bd      	mov	sp, r7
 8004e34:	b003      	add	sp, #12
 8004e36:	bd90      	pop	{r4, r7, pc}
 8004e38:	e000e100 	.word	0xe000e100
 8004e3c:	e000ed00 	.word	0xe000ed00

08004e40 <HAL_NVIC_SetPriority>:
  *         with stm32f0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0 based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8004e40:	b580      	push	{r7, lr}
 8004e42:	b084      	sub	sp, #16
 8004e44:	af00      	add	r7, sp, #0
 8004e46:	60b9      	str	r1, [r7, #8]
 8004e48:	607a      	str	r2, [r7, #4]
 8004e4a:	210f      	movs	r1, #15
 8004e4c:	187b      	adds	r3, r7, r1
 8004e4e:	1c02      	adds	r2, r0, #0
 8004e50:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
 8004e52:	68ba      	ldr	r2, [r7, #8]
 8004e54:	187b      	adds	r3, r7, r1
 8004e56:	781b      	ldrb	r3, [r3, #0]
 8004e58:	b25b      	sxtb	r3, r3
 8004e5a:	0011      	movs	r1, r2
 8004e5c:	0018      	movs	r0, r3
 8004e5e:	f7ff ff81 	bl	8004d64 <__NVIC_SetPriority>
}
 8004e62:	46c0      	nop			; (mov r8, r8)
 8004e64:	46bd      	mov	sp, r7
 8004e66:	b004      	add	sp, #16
 8004e68:	bd80      	pop	{r7, pc}

08004e6a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f0xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004e6a:	b580      	push	{r7, lr}
 8004e6c:	b082      	sub	sp, #8
 8004e6e:	af00      	add	r7, sp, #0
 8004e70:	0002      	movs	r2, r0
 8004e72:	1dfb      	adds	r3, r7, #7
 8004e74:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8004e76:	1dfb      	adds	r3, r7, #7
 8004e78:	781b      	ldrb	r3, [r3, #0]
 8004e7a:	b25b      	sxtb	r3, r3
 8004e7c:	0018      	movs	r0, r3
 8004e7e:	f7ff ff57 	bl	8004d30 <__NVIC_EnableIRQ>
}
 8004e82:	46c0      	nop			; (mov r8, r8)
 8004e84:	46bd      	mov	sp, r7
 8004e86:	b002      	add	sp, #8
 8004e88:	bd80      	pop	{r7, pc}

08004e8a <HAL_DMA_Abort_IT>:
  * @param  hdma  pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 8004e8a:	b580      	push	{r7, lr}
 8004e8c:	b084      	sub	sp, #16
 8004e8e:	af00      	add	r7, sp, #0
 8004e90:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004e92:	230f      	movs	r3, #15
 8004e94:	18fb      	adds	r3, r7, r3
 8004e96:	2200      	movs	r2, #0
 8004e98:	701a      	strb	r2, [r3, #0]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8004e9a:	687b      	ldr	r3, [r7, #4]
 8004e9c:	2221      	movs	r2, #33	; 0x21
 8004e9e:	5c9b      	ldrb	r3, [r3, r2]
 8004ea0:	b2db      	uxtb	r3, r3
 8004ea2:	2b02      	cmp	r3, #2
 8004ea4:	d007      	beq.n	8004eb6 <HAL_DMA_Abort_IT+0x2c>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8004ea6:	687b      	ldr	r3, [r7, #4]
 8004ea8:	2204      	movs	r2, #4
 8004eaa:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 8004eac:	230f      	movs	r3, #15
 8004eae:	18fb      	adds	r3, r7, r3
 8004eb0:	2201      	movs	r2, #1
 8004eb2:	701a      	strb	r2, [r3, #0]
 8004eb4:	e028      	b.n	8004f08 <HAL_DMA_Abort_IT+0x7e>
  }
  else
  { 
  
    /* Disable DMA IT */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8004eb6:	687b      	ldr	r3, [r7, #4]
 8004eb8:	681b      	ldr	r3, [r3, #0]
 8004eba:	681a      	ldr	r2, [r3, #0]
 8004ebc:	687b      	ldr	r3, [r7, #4]
 8004ebe:	681b      	ldr	r3, [r3, #0]
 8004ec0:	210e      	movs	r1, #14
 8004ec2:	438a      	bics	r2, r1
 8004ec4:	601a      	str	r2, [r3, #0]
    
    /* Disable the channel */
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 8004ec6:	687b      	ldr	r3, [r7, #4]
 8004ec8:	681b      	ldr	r3, [r3, #0]
 8004eca:	681a      	ldr	r2, [r3, #0]
 8004ecc:	687b      	ldr	r3, [r7, #4]
 8004ece:	681b      	ldr	r3, [r3, #0]
 8004ed0:	2101      	movs	r1, #1
 8004ed2:	438a      	bics	r2, r1
 8004ed4:	601a      	str	r2, [r3, #0]
    
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 8004ed6:	687b      	ldr	r3, [r7, #4]
 8004ed8:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004eda:	687b      	ldr	r3, [r7, #4]
 8004edc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004ede:	2101      	movs	r1, #1
 8004ee0:	4091      	lsls	r1, r2
 8004ee2:	000a      	movs	r2, r1
 8004ee4:	605a      	str	r2, [r3, #4]
    
    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8004ee6:	687b      	ldr	r3, [r7, #4]
 8004ee8:	2221      	movs	r2, #33	; 0x21
 8004eea:	2101      	movs	r1, #1
 8004eec:	5499      	strb	r1, [r3, r2]
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004eee:	687b      	ldr	r3, [r7, #4]
 8004ef0:	2220      	movs	r2, #32
 8004ef2:	2100      	movs	r1, #0
 8004ef4:	5499      	strb	r1, [r3, r2]
    
    /* Call User Abort callback */ 
    if(hdma->XferAbortCallback != NULL)
 8004ef6:	687b      	ldr	r3, [r7, #4]
 8004ef8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004efa:	2b00      	cmp	r3, #0
 8004efc:	d004      	beq.n	8004f08 <HAL_DMA_Abort_IT+0x7e>
    {
      hdma->XferAbortCallback(hdma);
 8004efe:	687b      	ldr	r3, [r7, #4]
 8004f00:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004f02:	687a      	ldr	r2, [r7, #4]
 8004f04:	0010      	movs	r0, r2
 8004f06:	4798      	blx	r3
    } 
  }
  return status;
 8004f08:	230f      	movs	r3, #15
 8004f0a:	18fb      	adds	r3, r7, r3
 8004f0c:	781b      	ldrb	r3, [r3, #0]
}
 8004f0e:	0018      	movs	r0, r3
 8004f10:	46bd      	mov	sp, r7
 8004f12:	b004      	add	sp, #16
 8004f14:	bd80      	pop	{r7, pc}
	...

08004f18 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{ 
 8004f18:	b580      	push	{r7, lr}
 8004f1a:	b086      	sub	sp, #24
 8004f1c:	af00      	add	r7, sp, #0
 8004f1e:	6078      	str	r0, [r7, #4]
 8004f20:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8004f22:	2300      	movs	r3, #0
 8004f24:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8004f26:	e14f      	b.n	80051c8 <HAL_GPIO_Init+0x2b0>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8004f28:	683b      	ldr	r3, [r7, #0]
 8004f2a:	681b      	ldr	r3, [r3, #0]
 8004f2c:	2101      	movs	r1, #1
 8004f2e:	697a      	ldr	r2, [r7, #20]
 8004f30:	4091      	lsls	r1, r2
 8004f32:	000a      	movs	r2, r1
 8004f34:	4013      	ands	r3, r2
 8004f36:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8004f38:	68fb      	ldr	r3, [r7, #12]
 8004f3a:	2b00      	cmp	r3, #0
 8004f3c:	d100      	bne.n	8004f40 <HAL_GPIO_Init+0x28>
 8004f3e:	e140      	b.n	80051c2 <HAL_GPIO_Init+0x2aa>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8004f40:	683b      	ldr	r3, [r7, #0]
 8004f42:	685b      	ldr	r3, [r3, #4]
 8004f44:	2b01      	cmp	r3, #1
 8004f46:	d00b      	beq.n	8004f60 <HAL_GPIO_Init+0x48>
 8004f48:	683b      	ldr	r3, [r7, #0]
 8004f4a:	685b      	ldr	r3, [r3, #4]
 8004f4c:	2b02      	cmp	r3, #2
 8004f4e:	d007      	beq.n	8004f60 <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8004f50:	683b      	ldr	r3, [r7, #0]
 8004f52:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8004f54:	2b11      	cmp	r3, #17
 8004f56:	d003      	beq.n	8004f60 <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8004f58:	683b      	ldr	r3, [r7, #0]
 8004f5a:	685b      	ldr	r3, [r3, #4]
 8004f5c:	2b12      	cmp	r3, #18
 8004f5e:	d130      	bne.n	8004fc2 <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8004f60:	687b      	ldr	r3, [r7, #4]
 8004f62:	689b      	ldr	r3, [r3, #8]
 8004f64:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 8004f66:	697b      	ldr	r3, [r7, #20]
 8004f68:	005b      	lsls	r3, r3, #1
 8004f6a:	2203      	movs	r2, #3
 8004f6c:	409a      	lsls	r2, r3
 8004f6e:	0013      	movs	r3, r2
 8004f70:	43da      	mvns	r2, r3
 8004f72:	693b      	ldr	r3, [r7, #16]
 8004f74:	4013      	ands	r3, r2
 8004f76:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8004f78:	683b      	ldr	r3, [r7, #0]
 8004f7a:	68da      	ldr	r2, [r3, #12]
 8004f7c:	697b      	ldr	r3, [r7, #20]
 8004f7e:	005b      	lsls	r3, r3, #1
 8004f80:	409a      	lsls	r2, r3
 8004f82:	0013      	movs	r3, r2
 8004f84:	693a      	ldr	r2, [r7, #16]
 8004f86:	4313      	orrs	r3, r2
 8004f88:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8004f8a:	687b      	ldr	r3, [r7, #4]
 8004f8c:	693a      	ldr	r2, [r7, #16]
 8004f8e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8004f90:	687b      	ldr	r3, [r7, #4]
 8004f92:	685b      	ldr	r3, [r3, #4]
 8004f94:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8004f96:	2201      	movs	r2, #1
 8004f98:	697b      	ldr	r3, [r7, #20]
 8004f9a:	409a      	lsls	r2, r3
 8004f9c:	0013      	movs	r3, r2
 8004f9e:	43da      	mvns	r2, r3
 8004fa0:	693b      	ldr	r3, [r7, #16]
 8004fa2:	4013      	ands	r3, r2
 8004fa4:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4u) << position);
 8004fa6:	683b      	ldr	r3, [r7, #0]
 8004fa8:	685b      	ldr	r3, [r3, #4]
 8004faa:	091b      	lsrs	r3, r3, #4
 8004fac:	2201      	movs	r2, #1
 8004fae:	401a      	ands	r2, r3
 8004fb0:	697b      	ldr	r3, [r7, #20]
 8004fb2:	409a      	lsls	r2, r3
 8004fb4:	0013      	movs	r3, r2
 8004fb6:	693a      	ldr	r2, [r7, #16]
 8004fb8:	4313      	orrs	r3, r2
 8004fba:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8004fbc:	687b      	ldr	r3, [r7, #4]
 8004fbe:	693a      	ldr	r2, [r7, #16]
 8004fc0:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8004fc2:	687b      	ldr	r3, [r7, #4]
 8004fc4:	68db      	ldr	r3, [r3, #12]
 8004fc6:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 8004fc8:	697b      	ldr	r3, [r7, #20]
 8004fca:	005b      	lsls	r3, r3, #1
 8004fcc:	2203      	movs	r2, #3
 8004fce:	409a      	lsls	r2, r3
 8004fd0:	0013      	movs	r3, r2
 8004fd2:	43da      	mvns	r2, r3
 8004fd4:	693b      	ldr	r3, [r7, #16]
 8004fd6:	4013      	ands	r3, r2
 8004fd8:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 8004fda:	683b      	ldr	r3, [r7, #0]
 8004fdc:	689a      	ldr	r2, [r3, #8]
 8004fde:	697b      	ldr	r3, [r7, #20]
 8004fe0:	005b      	lsls	r3, r3, #1
 8004fe2:	409a      	lsls	r2, r3
 8004fe4:	0013      	movs	r3, r2
 8004fe6:	693a      	ldr	r2, [r7, #16]
 8004fe8:	4313      	orrs	r3, r2
 8004fea:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 8004fec:	687b      	ldr	r3, [r7, #4]
 8004fee:	693a      	ldr	r2, [r7, #16]
 8004ff0:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8004ff2:	683b      	ldr	r3, [r7, #0]
 8004ff4:	685b      	ldr	r3, [r3, #4]
 8004ff6:	2b02      	cmp	r3, #2
 8004ff8:	d003      	beq.n	8005002 <HAL_GPIO_Init+0xea>
 8004ffa:	683b      	ldr	r3, [r7, #0]
 8004ffc:	685b      	ldr	r3, [r3, #4]
 8004ffe:	2b12      	cmp	r3, #18
 8005000:	d123      	bne.n	800504a <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8005002:	697b      	ldr	r3, [r7, #20]
 8005004:	08da      	lsrs	r2, r3, #3
 8005006:	687b      	ldr	r3, [r7, #4]
 8005008:	3208      	adds	r2, #8
 800500a:	0092      	lsls	r2, r2, #2
 800500c:	58d3      	ldr	r3, [r2, r3]
 800500e:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8005010:	697b      	ldr	r3, [r7, #20]
 8005012:	2207      	movs	r2, #7
 8005014:	4013      	ands	r3, r2
 8005016:	009b      	lsls	r3, r3, #2
 8005018:	220f      	movs	r2, #15
 800501a:	409a      	lsls	r2, r3
 800501c:	0013      	movs	r3, r2
 800501e:	43da      	mvns	r2, r3
 8005020:	693b      	ldr	r3, [r7, #16]
 8005022:	4013      	ands	r3, r2
 8005024:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8005026:	683b      	ldr	r3, [r7, #0]
 8005028:	691a      	ldr	r2, [r3, #16]
 800502a:	697b      	ldr	r3, [r7, #20]
 800502c:	2107      	movs	r1, #7
 800502e:	400b      	ands	r3, r1
 8005030:	009b      	lsls	r3, r3, #2
 8005032:	409a      	lsls	r2, r3
 8005034:	0013      	movs	r3, r2
 8005036:	693a      	ldr	r2, [r7, #16]
 8005038:	4313      	orrs	r3, r2
 800503a:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 800503c:	697b      	ldr	r3, [r7, #20]
 800503e:	08da      	lsrs	r2, r3, #3
 8005040:	687b      	ldr	r3, [r7, #4]
 8005042:	3208      	adds	r2, #8
 8005044:	0092      	lsls	r2, r2, #2
 8005046:	6939      	ldr	r1, [r7, #16]
 8005048:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800504a:	687b      	ldr	r3, [r7, #4]
 800504c:	681b      	ldr	r3, [r3, #0]
 800504e:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8005050:	697b      	ldr	r3, [r7, #20]
 8005052:	005b      	lsls	r3, r3, #1
 8005054:	2203      	movs	r2, #3
 8005056:	409a      	lsls	r2, r3
 8005058:	0013      	movs	r3, r2
 800505a:	43da      	mvns	r2, r3
 800505c:	693b      	ldr	r3, [r7, #16]
 800505e:	4013      	ands	r3, r2
 8005060:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8005062:	683b      	ldr	r3, [r7, #0]
 8005064:	685b      	ldr	r3, [r3, #4]
 8005066:	2203      	movs	r2, #3
 8005068:	401a      	ands	r2, r3
 800506a:	697b      	ldr	r3, [r7, #20]
 800506c:	005b      	lsls	r3, r3, #1
 800506e:	409a      	lsls	r2, r3
 8005070:	0013      	movs	r3, r2
 8005072:	693a      	ldr	r2, [r7, #16]
 8005074:	4313      	orrs	r3, r2
 8005076:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8005078:	687b      	ldr	r3, [r7, #4]
 800507a:	693a      	ldr	r2, [r7, #16]
 800507c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800507e:	683b      	ldr	r3, [r7, #0]
 8005080:	685a      	ldr	r2, [r3, #4]
 8005082:	2380      	movs	r3, #128	; 0x80
 8005084:	055b      	lsls	r3, r3, #21
 8005086:	4013      	ands	r3, r2
 8005088:	d100      	bne.n	800508c <HAL_GPIO_Init+0x174>
 800508a:	e09a      	b.n	80051c2 <HAL_GPIO_Init+0x2aa>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800508c:	4b54      	ldr	r3, [pc, #336]	; (80051e0 <HAL_GPIO_Init+0x2c8>)
 800508e:	699a      	ldr	r2, [r3, #24]
 8005090:	4b53      	ldr	r3, [pc, #332]	; (80051e0 <HAL_GPIO_Init+0x2c8>)
 8005092:	2101      	movs	r1, #1
 8005094:	430a      	orrs	r2, r1
 8005096:	619a      	str	r2, [r3, #24]
 8005098:	4b51      	ldr	r3, [pc, #324]	; (80051e0 <HAL_GPIO_Init+0x2c8>)
 800509a:	699b      	ldr	r3, [r3, #24]
 800509c:	2201      	movs	r2, #1
 800509e:	4013      	ands	r3, r2
 80050a0:	60bb      	str	r3, [r7, #8]
 80050a2:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 80050a4:	4a4f      	ldr	r2, [pc, #316]	; (80051e4 <HAL_GPIO_Init+0x2cc>)
 80050a6:	697b      	ldr	r3, [r7, #20]
 80050a8:	089b      	lsrs	r3, r3, #2
 80050aa:	3302      	adds	r3, #2
 80050ac:	009b      	lsls	r3, r3, #2
 80050ae:	589b      	ldr	r3, [r3, r2]
 80050b0:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 80050b2:	697b      	ldr	r3, [r7, #20]
 80050b4:	2203      	movs	r2, #3
 80050b6:	4013      	ands	r3, r2
 80050b8:	009b      	lsls	r3, r3, #2
 80050ba:	220f      	movs	r2, #15
 80050bc:	409a      	lsls	r2, r3
 80050be:	0013      	movs	r3, r2
 80050c0:	43da      	mvns	r2, r3
 80050c2:	693b      	ldr	r3, [r7, #16]
 80050c4:	4013      	ands	r3, r2
 80050c6:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 80050c8:	687a      	ldr	r2, [r7, #4]
 80050ca:	2390      	movs	r3, #144	; 0x90
 80050cc:	05db      	lsls	r3, r3, #23
 80050ce:	429a      	cmp	r2, r3
 80050d0:	d013      	beq.n	80050fa <HAL_GPIO_Init+0x1e2>
 80050d2:	687b      	ldr	r3, [r7, #4]
 80050d4:	4a44      	ldr	r2, [pc, #272]	; (80051e8 <HAL_GPIO_Init+0x2d0>)
 80050d6:	4293      	cmp	r3, r2
 80050d8:	d00d      	beq.n	80050f6 <HAL_GPIO_Init+0x1de>
 80050da:	687b      	ldr	r3, [r7, #4]
 80050dc:	4a43      	ldr	r2, [pc, #268]	; (80051ec <HAL_GPIO_Init+0x2d4>)
 80050de:	4293      	cmp	r3, r2
 80050e0:	d007      	beq.n	80050f2 <HAL_GPIO_Init+0x1da>
 80050e2:	687b      	ldr	r3, [r7, #4]
 80050e4:	4a42      	ldr	r2, [pc, #264]	; (80051f0 <HAL_GPIO_Init+0x2d8>)
 80050e6:	4293      	cmp	r3, r2
 80050e8:	d101      	bne.n	80050ee <HAL_GPIO_Init+0x1d6>
 80050ea:	2303      	movs	r3, #3
 80050ec:	e006      	b.n	80050fc <HAL_GPIO_Init+0x1e4>
 80050ee:	2305      	movs	r3, #5
 80050f0:	e004      	b.n	80050fc <HAL_GPIO_Init+0x1e4>
 80050f2:	2302      	movs	r3, #2
 80050f4:	e002      	b.n	80050fc <HAL_GPIO_Init+0x1e4>
 80050f6:	2301      	movs	r3, #1
 80050f8:	e000      	b.n	80050fc <HAL_GPIO_Init+0x1e4>
 80050fa:	2300      	movs	r3, #0
 80050fc:	697a      	ldr	r2, [r7, #20]
 80050fe:	2103      	movs	r1, #3
 8005100:	400a      	ands	r2, r1
 8005102:	0092      	lsls	r2, r2, #2
 8005104:	4093      	lsls	r3, r2
 8005106:	693a      	ldr	r2, [r7, #16]
 8005108:	4313      	orrs	r3, r2
 800510a:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 800510c:	4935      	ldr	r1, [pc, #212]	; (80051e4 <HAL_GPIO_Init+0x2cc>)
 800510e:	697b      	ldr	r3, [r7, #20]
 8005110:	089b      	lsrs	r3, r3, #2
 8005112:	3302      	adds	r3, #2
 8005114:	009b      	lsls	r3, r3, #2
 8005116:	693a      	ldr	r2, [r7, #16]
 8005118:	505a      	str	r2, [r3, r1]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800511a:	4b36      	ldr	r3, [pc, #216]	; (80051f4 <HAL_GPIO_Init+0x2dc>)
 800511c:	681b      	ldr	r3, [r3, #0]
 800511e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8005120:	68fb      	ldr	r3, [r7, #12]
 8005122:	43da      	mvns	r2, r3
 8005124:	693b      	ldr	r3, [r7, #16]
 8005126:	4013      	ands	r3, r2
 8005128:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800512a:	683b      	ldr	r3, [r7, #0]
 800512c:	685a      	ldr	r2, [r3, #4]
 800512e:	2380      	movs	r3, #128	; 0x80
 8005130:	025b      	lsls	r3, r3, #9
 8005132:	4013      	ands	r3, r2
 8005134:	d003      	beq.n	800513e <HAL_GPIO_Init+0x226>
        {
          temp |= iocurrent;
 8005136:	693a      	ldr	r2, [r7, #16]
 8005138:	68fb      	ldr	r3, [r7, #12]
 800513a:	4313      	orrs	r3, r2
 800513c:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 800513e:	4b2d      	ldr	r3, [pc, #180]	; (80051f4 <HAL_GPIO_Init+0x2dc>)
 8005140:	693a      	ldr	r2, [r7, #16]
 8005142:	601a      	str	r2, [r3, #0]

        temp = EXTI->EMR;
 8005144:	4b2b      	ldr	r3, [pc, #172]	; (80051f4 <HAL_GPIO_Init+0x2dc>)
 8005146:	685b      	ldr	r3, [r3, #4]
 8005148:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800514a:	68fb      	ldr	r3, [r7, #12]
 800514c:	43da      	mvns	r2, r3
 800514e:	693b      	ldr	r3, [r7, #16]
 8005150:	4013      	ands	r3, r2
 8005152:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8005154:	683b      	ldr	r3, [r7, #0]
 8005156:	685a      	ldr	r2, [r3, #4]
 8005158:	2380      	movs	r3, #128	; 0x80
 800515a:	029b      	lsls	r3, r3, #10
 800515c:	4013      	ands	r3, r2
 800515e:	d003      	beq.n	8005168 <HAL_GPIO_Init+0x250>
        {
          temp |= iocurrent;
 8005160:	693a      	ldr	r2, [r7, #16]
 8005162:	68fb      	ldr	r3, [r7, #12]
 8005164:	4313      	orrs	r3, r2
 8005166:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8005168:	4b22      	ldr	r3, [pc, #136]	; (80051f4 <HAL_GPIO_Init+0x2dc>)
 800516a:	693a      	ldr	r2, [r7, #16]
 800516c:	605a      	str	r2, [r3, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800516e:	4b21      	ldr	r3, [pc, #132]	; (80051f4 <HAL_GPIO_Init+0x2dc>)
 8005170:	689b      	ldr	r3, [r3, #8]
 8005172:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8005174:	68fb      	ldr	r3, [r7, #12]
 8005176:	43da      	mvns	r2, r3
 8005178:	693b      	ldr	r3, [r7, #16]
 800517a:	4013      	ands	r3, r2
 800517c:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800517e:	683b      	ldr	r3, [r7, #0]
 8005180:	685a      	ldr	r2, [r3, #4]
 8005182:	2380      	movs	r3, #128	; 0x80
 8005184:	035b      	lsls	r3, r3, #13
 8005186:	4013      	ands	r3, r2
 8005188:	d003      	beq.n	8005192 <HAL_GPIO_Init+0x27a>
        {
          temp |= iocurrent;
 800518a:	693a      	ldr	r2, [r7, #16]
 800518c:	68fb      	ldr	r3, [r7, #12]
 800518e:	4313      	orrs	r3, r2
 8005190:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8005192:	4b18      	ldr	r3, [pc, #96]	; (80051f4 <HAL_GPIO_Init+0x2dc>)
 8005194:	693a      	ldr	r2, [r7, #16]
 8005196:	609a      	str	r2, [r3, #8]

        temp = EXTI->FTSR;
 8005198:	4b16      	ldr	r3, [pc, #88]	; (80051f4 <HAL_GPIO_Init+0x2dc>)
 800519a:	68db      	ldr	r3, [r3, #12]
 800519c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800519e:	68fb      	ldr	r3, [r7, #12]
 80051a0:	43da      	mvns	r2, r3
 80051a2:	693b      	ldr	r3, [r7, #16]
 80051a4:	4013      	ands	r3, r2
 80051a6:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80051a8:	683b      	ldr	r3, [r7, #0]
 80051aa:	685a      	ldr	r2, [r3, #4]
 80051ac:	2380      	movs	r3, #128	; 0x80
 80051ae:	039b      	lsls	r3, r3, #14
 80051b0:	4013      	ands	r3, r2
 80051b2:	d003      	beq.n	80051bc <HAL_GPIO_Init+0x2a4>
        {
          temp |= iocurrent;
 80051b4:	693a      	ldr	r2, [r7, #16]
 80051b6:	68fb      	ldr	r3, [r7, #12]
 80051b8:	4313      	orrs	r3, r2
 80051ba:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 80051bc:	4b0d      	ldr	r3, [pc, #52]	; (80051f4 <HAL_GPIO_Init+0x2dc>)
 80051be:	693a      	ldr	r2, [r7, #16]
 80051c0:	60da      	str	r2, [r3, #12]
      }
    }

    position++;
 80051c2:	697b      	ldr	r3, [r7, #20]
 80051c4:	3301      	adds	r3, #1
 80051c6:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80051c8:	683b      	ldr	r3, [r7, #0]
 80051ca:	681a      	ldr	r2, [r3, #0]
 80051cc:	697b      	ldr	r3, [r7, #20]
 80051ce:	40da      	lsrs	r2, r3
 80051d0:	1e13      	subs	r3, r2, #0
 80051d2:	d000      	beq.n	80051d6 <HAL_GPIO_Init+0x2be>
 80051d4:	e6a8      	b.n	8004f28 <HAL_GPIO_Init+0x10>
  } 
}
 80051d6:	46c0      	nop			; (mov r8, r8)
 80051d8:	46bd      	mov	sp, r7
 80051da:	b006      	add	sp, #24
 80051dc:	bd80      	pop	{r7, pc}
 80051de:	46c0      	nop			; (mov r8, r8)
 80051e0:	40021000 	.word	0x40021000
 80051e4:	40010000 	.word	0x40010000
 80051e8:	48000400 	.word	0x48000400
 80051ec:	48000800 	.word	0x48000800
 80051f0:	48000c00 	.word	0x48000c00
 80051f4:	40010400 	.word	0x40010400

080051f8 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80051f8:	b580      	push	{r7, lr}
 80051fa:	b084      	sub	sp, #16
 80051fc:	af00      	add	r7, sp, #0
 80051fe:	6078      	str	r0, [r7, #4]
 8005200:	000a      	movs	r2, r1
 8005202:	1cbb      	adds	r3, r7, #2
 8005204:	801a      	strh	r2, [r3, #0]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8005206:	687b      	ldr	r3, [r7, #4]
 8005208:	691b      	ldr	r3, [r3, #16]
 800520a:	1cba      	adds	r2, r7, #2
 800520c:	8812      	ldrh	r2, [r2, #0]
 800520e:	4013      	ands	r3, r2
 8005210:	d004      	beq.n	800521c <HAL_GPIO_ReadPin+0x24>
  {
    bitstatus = GPIO_PIN_SET;
 8005212:	230f      	movs	r3, #15
 8005214:	18fb      	adds	r3, r7, r3
 8005216:	2201      	movs	r2, #1
 8005218:	701a      	strb	r2, [r3, #0]
 800521a:	e003      	b.n	8005224 <HAL_GPIO_ReadPin+0x2c>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800521c:	230f      	movs	r3, #15
 800521e:	18fb      	adds	r3, r7, r3
 8005220:	2200      	movs	r2, #0
 8005222:	701a      	strb	r2, [r3, #0]
  }
  return bitstatus;
 8005224:	230f      	movs	r3, #15
 8005226:	18fb      	adds	r3, r7, r3
 8005228:	781b      	ldrb	r3, [r3, #0]
  }
 800522a:	0018      	movs	r0, r3
 800522c:	46bd      	mov	sp, r7
 800522e:	b004      	add	sp, #16
 8005230:	bd80      	pop	{r7, pc}

08005232 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8005232:	b580      	push	{r7, lr}
 8005234:	b082      	sub	sp, #8
 8005236:	af00      	add	r7, sp, #0
 8005238:	6078      	str	r0, [r7, #4]
 800523a:	0008      	movs	r0, r1
 800523c:	0011      	movs	r1, r2
 800523e:	1cbb      	adds	r3, r7, #2
 8005240:	1c02      	adds	r2, r0, #0
 8005242:	801a      	strh	r2, [r3, #0]
 8005244:	1c7b      	adds	r3, r7, #1
 8005246:	1c0a      	adds	r2, r1, #0
 8005248:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 800524a:	1c7b      	adds	r3, r7, #1
 800524c:	781b      	ldrb	r3, [r3, #0]
 800524e:	2b00      	cmp	r3, #0
 8005250:	d004      	beq.n	800525c <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8005252:	1cbb      	adds	r3, r7, #2
 8005254:	881a      	ldrh	r2, [r3, #0]
 8005256:	687b      	ldr	r3, [r7, #4]
 8005258:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 800525a:	e003      	b.n	8005264 <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800525c:	1cbb      	adds	r3, r7, #2
 800525e:	881a      	ldrh	r2, [r3, #0]
 8005260:	687b      	ldr	r3, [r7, #4]
 8005262:	629a      	str	r2, [r3, #40]	; 0x28
}
 8005264:	46c0      	nop			; (mov r8, r8)
 8005266:	46bd      	mov	sp, r7
 8005268:	b002      	add	sp, #8
 800526a:	bd80      	pop	{r7, pc}

0800526c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800526c:	b580      	push	{r7, lr}
 800526e:	b088      	sub	sp, #32
 8005270:	af00      	add	r7, sp, #0
 8005272:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  uint32_t pll_config2;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8005274:	687b      	ldr	r3, [r7, #4]
 8005276:	2b00      	cmp	r3, #0
 8005278:	d101      	bne.n	800527e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800527a:	2301      	movs	r3, #1
 800527c:	e303      	b.n	8005886 <HAL_RCC_OscConfig+0x61a>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800527e:	687b      	ldr	r3, [r7, #4]
 8005280:	681b      	ldr	r3, [r3, #0]
 8005282:	2201      	movs	r2, #1
 8005284:	4013      	ands	r3, r2
 8005286:	d100      	bne.n	800528a <HAL_RCC_OscConfig+0x1e>
 8005288:	e08d      	b.n	80053a6 <HAL_RCC_OscConfig+0x13a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 800528a:	4bc4      	ldr	r3, [pc, #784]	; (800559c <HAL_RCC_OscConfig+0x330>)
 800528c:	685b      	ldr	r3, [r3, #4]
 800528e:	220c      	movs	r2, #12
 8005290:	4013      	ands	r3, r2
 8005292:	2b04      	cmp	r3, #4
 8005294:	d00e      	beq.n	80052b4 <HAL_RCC_OscConfig+0x48>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8005296:	4bc1      	ldr	r3, [pc, #772]	; (800559c <HAL_RCC_OscConfig+0x330>)
 8005298:	685b      	ldr	r3, [r3, #4]
 800529a:	220c      	movs	r2, #12
 800529c:	4013      	ands	r3, r2
 800529e:	2b08      	cmp	r3, #8
 80052a0:	d116      	bne.n	80052d0 <HAL_RCC_OscConfig+0x64>
 80052a2:	4bbe      	ldr	r3, [pc, #760]	; (800559c <HAL_RCC_OscConfig+0x330>)
 80052a4:	685a      	ldr	r2, [r3, #4]
 80052a6:	2380      	movs	r3, #128	; 0x80
 80052a8:	025b      	lsls	r3, r3, #9
 80052aa:	401a      	ands	r2, r3
 80052ac:	2380      	movs	r3, #128	; 0x80
 80052ae:	025b      	lsls	r3, r3, #9
 80052b0:	429a      	cmp	r2, r3
 80052b2:	d10d      	bne.n	80052d0 <HAL_RCC_OscConfig+0x64>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80052b4:	4bb9      	ldr	r3, [pc, #740]	; (800559c <HAL_RCC_OscConfig+0x330>)
 80052b6:	681a      	ldr	r2, [r3, #0]
 80052b8:	2380      	movs	r3, #128	; 0x80
 80052ba:	029b      	lsls	r3, r3, #10
 80052bc:	4013      	ands	r3, r2
 80052be:	d100      	bne.n	80052c2 <HAL_RCC_OscConfig+0x56>
 80052c0:	e070      	b.n	80053a4 <HAL_RCC_OscConfig+0x138>
 80052c2:	687b      	ldr	r3, [r7, #4]
 80052c4:	685b      	ldr	r3, [r3, #4]
 80052c6:	2b00      	cmp	r3, #0
 80052c8:	d000      	beq.n	80052cc <HAL_RCC_OscConfig+0x60>
 80052ca:	e06b      	b.n	80053a4 <HAL_RCC_OscConfig+0x138>
      {
        return HAL_ERROR;
 80052cc:	2301      	movs	r3, #1
 80052ce:	e2da      	b.n	8005886 <HAL_RCC_OscConfig+0x61a>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80052d0:	687b      	ldr	r3, [r7, #4]
 80052d2:	685b      	ldr	r3, [r3, #4]
 80052d4:	2b01      	cmp	r3, #1
 80052d6:	d107      	bne.n	80052e8 <HAL_RCC_OscConfig+0x7c>
 80052d8:	4bb0      	ldr	r3, [pc, #704]	; (800559c <HAL_RCC_OscConfig+0x330>)
 80052da:	681a      	ldr	r2, [r3, #0]
 80052dc:	4baf      	ldr	r3, [pc, #700]	; (800559c <HAL_RCC_OscConfig+0x330>)
 80052de:	2180      	movs	r1, #128	; 0x80
 80052e0:	0249      	lsls	r1, r1, #9
 80052e2:	430a      	orrs	r2, r1
 80052e4:	601a      	str	r2, [r3, #0]
 80052e6:	e02f      	b.n	8005348 <HAL_RCC_OscConfig+0xdc>
 80052e8:	687b      	ldr	r3, [r7, #4]
 80052ea:	685b      	ldr	r3, [r3, #4]
 80052ec:	2b00      	cmp	r3, #0
 80052ee:	d10c      	bne.n	800530a <HAL_RCC_OscConfig+0x9e>
 80052f0:	4baa      	ldr	r3, [pc, #680]	; (800559c <HAL_RCC_OscConfig+0x330>)
 80052f2:	681a      	ldr	r2, [r3, #0]
 80052f4:	4ba9      	ldr	r3, [pc, #676]	; (800559c <HAL_RCC_OscConfig+0x330>)
 80052f6:	49aa      	ldr	r1, [pc, #680]	; (80055a0 <HAL_RCC_OscConfig+0x334>)
 80052f8:	400a      	ands	r2, r1
 80052fa:	601a      	str	r2, [r3, #0]
 80052fc:	4ba7      	ldr	r3, [pc, #668]	; (800559c <HAL_RCC_OscConfig+0x330>)
 80052fe:	681a      	ldr	r2, [r3, #0]
 8005300:	4ba6      	ldr	r3, [pc, #664]	; (800559c <HAL_RCC_OscConfig+0x330>)
 8005302:	49a8      	ldr	r1, [pc, #672]	; (80055a4 <HAL_RCC_OscConfig+0x338>)
 8005304:	400a      	ands	r2, r1
 8005306:	601a      	str	r2, [r3, #0]
 8005308:	e01e      	b.n	8005348 <HAL_RCC_OscConfig+0xdc>
 800530a:	687b      	ldr	r3, [r7, #4]
 800530c:	685b      	ldr	r3, [r3, #4]
 800530e:	2b05      	cmp	r3, #5
 8005310:	d10e      	bne.n	8005330 <HAL_RCC_OscConfig+0xc4>
 8005312:	4ba2      	ldr	r3, [pc, #648]	; (800559c <HAL_RCC_OscConfig+0x330>)
 8005314:	681a      	ldr	r2, [r3, #0]
 8005316:	4ba1      	ldr	r3, [pc, #644]	; (800559c <HAL_RCC_OscConfig+0x330>)
 8005318:	2180      	movs	r1, #128	; 0x80
 800531a:	02c9      	lsls	r1, r1, #11
 800531c:	430a      	orrs	r2, r1
 800531e:	601a      	str	r2, [r3, #0]
 8005320:	4b9e      	ldr	r3, [pc, #632]	; (800559c <HAL_RCC_OscConfig+0x330>)
 8005322:	681a      	ldr	r2, [r3, #0]
 8005324:	4b9d      	ldr	r3, [pc, #628]	; (800559c <HAL_RCC_OscConfig+0x330>)
 8005326:	2180      	movs	r1, #128	; 0x80
 8005328:	0249      	lsls	r1, r1, #9
 800532a:	430a      	orrs	r2, r1
 800532c:	601a      	str	r2, [r3, #0]
 800532e:	e00b      	b.n	8005348 <HAL_RCC_OscConfig+0xdc>
 8005330:	4b9a      	ldr	r3, [pc, #616]	; (800559c <HAL_RCC_OscConfig+0x330>)
 8005332:	681a      	ldr	r2, [r3, #0]
 8005334:	4b99      	ldr	r3, [pc, #612]	; (800559c <HAL_RCC_OscConfig+0x330>)
 8005336:	499a      	ldr	r1, [pc, #616]	; (80055a0 <HAL_RCC_OscConfig+0x334>)
 8005338:	400a      	ands	r2, r1
 800533a:	601a      	str	r2, [r3, #0]
 800533c:	4b97      	ldr	r3, [pc, #604]	; (800559c <HAL_RCC_OscConfig+0x330>)
 800533e:	681a      	ldr	r2, [r3, #0]
 8005340:	4b96      	ldr	r3, [pc, #600]	; (800559c <HAL_RCC_OscConfig+0x330>)
 8005342:	4998      	ldr	r1, [pc, #608]	; (80055a4 <HAL_RCC_OscConfig+0x338>)
 8005344:	400a      	ands	r2, r1
 8005346:	601a      	str	r2, [r3, #0]
      

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8005348:	687b      	ldr	r3, [r7, #4]
 800534a:	685b      	ldr	r3, [r3, #4]
 800534c:	2b00      	cmp	r3, #0
 800534e:	d014      	beq.n	800537a <HAL_RCC_OscConfig+0x10e>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005350:	f7ff f838 	bl	80043c4 <HAL_GetTick>
 8005354:	0003      	movs	r3, r0
 8005356:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005358:	e008      	b.n	800536c <HAL_RCC_OscConfig+0x100>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800535a:	f7ff f833 	bl	80043c4 <HAL_GetTick>
 800535e:	0002      	movs	r2, r0
 8005360:	69bb      	ldr	r3, [r7, #24]
 8005362:	1ad3      	subs	r3, r2, r3
 8005364:	2b64      	cmp	r3, #100	; 0x64
 8005366:	d901      	bls.n	800536c <HAL_RCC_OscConfig+0x100>
          {
            return HAL_TIMEOUT;
 8005368:	2303      	movs	r3, #3
 800536a:	e28c      	b.n	8005886 <HAL_RCC_OscConfig+0x61a>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800536c:	4b8b      	ldr	r3, [pc, #556]	; (800559c <HAL_RCC_OscConfig+0x330>)
 800536e:	681a      	ldr	r2, [r3, #0]
 8005370:	2380      	movs	r3, #128	; 0x80
 8005372:	029b      	lsls	r3, r3, #10
 8005374:	4013      	ands	r3, r2
 8005376:	d0f0      	beq.n	800535a <HAL_RCC_OscConfig+0xee>
 8005378:	e015      	b.n	80053a6 <HAL_RCC_OscConfig+0x13a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800537a:	f7ff f823 	bl	80043c4 <HAL_GetTick>
 800537e:	0003      	movs	r3, r0
 8005380:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8005382:	e008      	b.n	8005396 <HAL_RCC_OscConfig+0x12a>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8005384:	f7ff f81e 	bl	80043c4 <HAL_GetTick>
 8005388:	0002      	movs	r2, r0
 800538a:	69bb      	ldr	r3, [r7, #24]
 800538c:	1ad3      	subs	r3, r2, r3
 800538e:	2b64      	cmp	r3, #100	; 0x64
 8005390:	d901      	bls.n	8005396 <HAL_RCC_OscConfig+0x12a>
          {
            return HAL_TIMEOUT;
 8005392:	2303      	movs	r3, #3
 8005394:	e277      	b.n	8005886 <HAL_RCC_OscConfig+0x61a>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8005396:	4b81      	ldr	r3, [pc, #516]	; (800559c <HAL_RCC_OscConfig+0x330>)
 8005398:	681a      	ldr	r2, [r3, #0]
 800539a:	2380      	movs	r3, #128	; 0x80
 800539c:	029b      	lsls	r3, r3, #10
 800539e:	4013      	ands	r3, r2
 80053a0:	d1f0      	bne.n	8005384 <HAL_RCC_OscConfig+0x118>
 80053a2:	e000      	b.n	80053a6 <HAL_RCC_OscConfig+0x13a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80053a4:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80053a6:	687b      	ldr	r3, [r7, #4]
 80053a8:	681b      	ldr	r3, [r3, #0]
 80053aa:	2202      	movs	r2, #2
 80053ac:	4013      	ands	r3, r2
 80053ae:	d100      	bne.n	80053b2 <HAL_RCC_OscConfig+0x146>
 80053b0:	e069      	b.n	8005486 <HAL_RCC_OscConfig+0x21a>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 80053b2:	4b7a      	ldr	r3, [pc, #488]	; (800559c <HAL_RCC_OscConfig+0x330>)
 80053b4:	685b      	ldr	r3, [r3, #4]
 80053b6:	220c      	movs	r2, #12
 80053b8:	4013      	ands	r3, r2
 80053ba:	d00b      	beq.n	80053d4 <HAL_RCC_OscConfig+0x168>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 80053bc:	4b77      	ldr	r3, [pc, #476]	; (800559c <HAL_RCC_OscConfig+0x330>)
 80053be:	685b      	ldr	r3, [r3, #4]
 80053c0:	220c      	movs	r2, #12
 80053c2:	4013      	ands	r3, r2
 80053c4:	2b08      	cmp	r3, #8
 80053c6:	d11c      	bne.n	8005402 <HAL_RCC_OscConfig+0x196>
 80053c8:	4b74      	ldr	r3, [pc, #464]	; (800559c <HAL_RCC_OscConfig+0x330>)
 80053ca:	685a      	ldr	r2, [r3, #4]
 80053cc:	2380      	movs	r3, #128	; 0x80
 80053ce:	025b      	lsls	r3, r3, #9
 80053d0:	4013      	ands	r3, r2
 80053d2:	d116      	bne.n	8005402 <HAL_RCC_OscConfig+0x196>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80053d4:	4b71      	ldr	r3, [pc, #452]	; (800559c <HAL_RCC_OscConfig+0x330>)
 80053d6:	681b      	ldr	r3, [r3, #0]
 80053d8:	2202      	movs	r2, #2
 80053da:	4013      	ands	r3, r2
 80053dc:	d005      	beq.n	80053ea <HAL_RCC_OscConfig+0x17e>
 80053de:	687b      	ldr	r3, [r7, #4]
 80053e0:	68db      	ldr	r3, [r3, #12]
 80053e2:	2b01      	cmp	r3, #1
 80053e4:	d001      	beq.n	80053ea <HAL_RCC_OscConfig+0x17e>
      {
        return HAL_ERROR;
 80053e6:	2301      	movs	r3, #1
 80053e8:	e24d      	b.n	8005886 <HAL_RCC_OscConfig+0x61a>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80053ea:	4b6c      	ldr	r3, [pc, #432]	; (800559c <HAL_RCC_OscConfig+0x330>)
 80053ec:	681b      	ldr	r3, [r3, #0]
 80053ee:	22f8      	movs	r2, #248	; 0xf8
 80053f0:	4393      	bics	r3, r2
 80053f2:	0019      	movs	r1, r3
 80053f4:	687b      	ldr	r3, [r7, #4]
 80053f6:	691b      	ldr	r3, [r3, #16]
 80053f8:	00da      	lsls	r2, r3, #3
 80053fa:	4b68      	ldr	r3, [pc, #416]	; (800559c <HAL_RCC_OscConfig+0x330>)
 80053fc:	430a      	orrs	r2, r1
 80053fe:	601a      	str	r2, [r3, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8005400:	e041      	b.n	8005486 <HAL_RCC_OscConfig+0x21a>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8005402:	687b      	ldr	r3, [r7, #4]
 8005404:	68db      	ldr	r3, [r3, #12]
 8005406:	2b00      	cmp	r3, #0
 8005408:	d024      	beq.n	8005454 <HAL_RCC_OscConfig+0x1e8>
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800540a:	4b64      	ldr	r3, [pc, #400]	; (800559c <HAL_RCC_OscConfig+0x330>)
 800540c:	681a      	ldr	r2, [r3, #0]
 800540e:	4b63      	ldr	r3, [pc, #396]	; (800559c <HAL_RCC_OscConfig+0x330>)
 8005410:	2101      	movs	r1, #1
 8005412:	430a      	orrs	r2, r1
 8005414:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005416:	f7fe ffd5 	bl	80043c4 <HAL_GetTick>
 800541a:	0003      	movs	r3, r0
 800541c:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800541e:	e008      	b.n	8005432 <HAL_RCC_OscConfig+0x1c6>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8005420:	f7fe ffd0 	bl	80043c4 <HAL_GetTick>
 8005424:	0002      	movs	r2, r0
 8005426:	69bb      	ldr	r3, [r7, #24]
 8005428:	1ad3      	subs	r3, r2, r3
 800542a:	2b02      	cmp	r3, #2
 800542c:	d901      	bls.n	8005432 <HAL_RCC_OscConfig+0x1c6>
          {
            return HAL_TIMEOUT;
 800542e:	2303      	movs	r3, #3
 8005430:	e229      	b.n	8005886 <HAL_RCC_OscConfig+0x61a>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005432:	4b5a      	ldr	r3, [pc, #360]	; (800559c <HAL_RCC_OscConfig+0x330>)
 8005434:	681b      	ldr	r3, [r3, #0]
 8005436:	2202      	movs	r2, #2
 8005438:	4013      	ands	r3, r2
 800543a:	d0f1      	beq.n	8005420 <HAL_RCC_OscConfig+0x1b4>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800543c:	4b57      	ldr	r3, [pc, #348]	; (800559c <HAL_RCC_OscConfig+0x330>)
 800543e:	681b      	ldr	r3, [r3, #0]
 8005440:	22f8      	movs	r2, #248	; 0xf8
 8005442:	4393      	bics	r3, r2
 8005444:	0019      	movs	r1, r3
 8005446:	687b      	ldr	r3, [r7, #4]
 8005448:	691b      	ldr	r3, [r3, #16]
 800544a:	00da      	lsls	r2, r3, #3
 800544c:	4b53      	ldr	r3, [pc, #332]	; (800559c <HAL_RCC_OscConfig+0x330>)
 800544e:	430a      	orrs	r2, r1
 8005450:	601a      	str	r2, [r3, #0]
 8005452:	e018      	b.n	8005486 <HAL_RCC_OscConfig+0x21a>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8005454:	4b51      	ldr	r3, [pc, #324]	; (800559c <HAL_RCC_OscConfig+0x330>)
 8005456:	681a      	ldr	r2, [r3, #0]
 8005458:	4b50      	ldr	r3, [pc, #320]	; (800559c <HAL_RCC_OscConfig+0x330>)
 800545a:	2101      	movs	r1, #1
 800545c:	438a      	bics	r2, r1
 800545e:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005460:	f7fe ffb0 	bl	80043c4 <HAL_GetTick>
 8005464:	0003      	movs	r3, r0
 8005466:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8005468:	e008      	b.n	800547c <HAL_RCC_OscConfig+0x210>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800546a:	f7fe ffab 	bl	80043c4 <HAL_GetTick>
 800546e:	0002      	movs	r2, r0
 8005470:	69bb      	ldr	r3, [r7, #24]
 8005472:	1ad3      	subs	r3, r2, r3
 8005474:	2b02      	cmp	r3, #2
 8005476:	d901      	bls.n	800547c <HAL_RCC_OscConfig+0x210>
          {
            return HAL_TIMEOUT;
 8005478:	2303      	movs	r3, #3
 800547a:	e204      	b.n	8005886 <HAL_RCC_OscConfig+0x61a>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800547c:	4b47      	ldr	r3, [pc, #284]	; (800559c <HAL_RCC_OscConfig+0x330>)
 800547e:	681b      	ldr	r3, [r3, #0]
 8005480:	2202      	movs	r2, #2
 8005482:	4013      	ands	r3, r2
 8005484:	d1f1      	bne.n	800546a <HAL_RCC_OscConfig+0x1fe>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8005486:	687b      	ldr	r3, [r7, #4]
 8005488:	681b      	ldr	r3, [r3, #0]
 800548a:	2208      	movs	r2, #8
 800548c:	4013      	ands	r3, r2
 800548e:	d036      	beq.n	80054fe <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8005490:	687b      	ldr	r3, [r7, #4]
 8005492:	69db      	ldr	r3, [r3, #28]
 8005494:	2b00      	cmp	r3, #0
 8005496:	d019      	beq.n	80054cc <HAL_RCC_OscConfig+0x260>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8005498:	4b40      	ldr	r3, [pc, #256]	; (800559c <HAL_RCC_OscConfig+0x330>)
 800549a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800549c:	4b3f      	ldr	r3, [pc, #252]	; (800559c <HAL_RCC_OscConfig+0x330>)
 800549e:	2101      	movs	r1, #1
 80054a0:	430a      	orrs	r2, r1
 80054a2:	625a      	str	r2, [r3, #36]	; 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80054a4:	f7fe ff8e 	bl	80043c4 <HAL_GetTick>
 80054a8:	0003      	movs	r3, r0
 80054aa:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80054ac:	e008      	b.n	80054c0 <HAL_RCC_OscConfig+0x254>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80054ae:	f7fe ff89 	bl	80043c4 <HAL_GetTick>
 80054b2:	0002      	movs	r2, r0
 80054b4:	69bb      	ldr	r3, [r7, #24]
 80054b6:	1ad3      	subs	r3, r2, r3
 80054b8:	2b02      	cmp	r3, #2
 80054ba:	d901      	bls.n	80054c0 <HAL_RCC_OscConfig+0x254>
        {
          return HAL_TIMEOUT;
 80054bc:	2303      	movs	r3, #3
 80054be:	e1e2      	b.n	8005886 <HAL_RCC_OscConfig+0x61a>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80054c0:	4b36      	ldr	r3, [pc, #216]	; (800559c <HAL_RCC_OscConfig+0x330>)
 80054c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80054c4:	2202      	movs	r2, #2
 80054c6:	4013      	ands	r3, r2
 80054c8:	d0f1      	beq.n	80054ae <HAL_RCC_OscConfig+0x242>
 80054ca:	e018      	b.n	80054fe <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80054cc:	4b33      	ldr	r3, [pc, #204]	; (800559c <HAL_RCC_OscConfig+0x330>)
 80054ce:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80054d0:	4b32      	ldr	r3, [pc, #200]	; (800559c <HAL_RCC_OscConfig+0x330>)
 80054d2:	2101      	movs	r1, #1
 80054d4:	438a      	bics	r2, r1
 80054d6:	625a      	str	r2, [r3, #36]	; 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80054d8:	f7fe ff74 	bl	80043c4 <HAL_GetTick>
 80054dc:	0003      	movs	r3, r0
 80054de:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80054e0:	e008      	b.n	80054f4 <HAL_RCC_OscConfig+0x288>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80054e2:	f7fe ff6f 	bl	80043c4 <HAL_GetTick>
 80054e6:	0002      	movs	r2, r0
 80054e8:	69bb      	ldr	r3, [r7, #24]
 80054ea:	1ad3      	subs	r3, r2, r3
 80054ec:	2b02      	cmp	r3, #2
 80054ee:	d901      	bls.n	80054f4 <HAL_RCC_OscConfig+0x288>
        {
          return HAL_TIMEOUT;
 80054f0:	2303      	movs	r3, #3
 80054f2:	e1c8      	b.n	8005886 <HAL_RCC_OscConfig+0x61a>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80054f4:	4b29      	ldr	r3, [pc, #164]	; (800559c <HAL_RCC_OscConfig+0x330>)
 80054f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80054f8:	2202      	movs	r2, #2
 80054fa:	4013      	ands	r3, r2
 80054fc:	d1f1      	bne.n	80054e2 <HAL_RCC_OscConfig+0x276>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80054fe:	687b      	ldr	r3, [r7, #4]
 8005500:	681b      	ldr	r3, [r3, #0]
 8005502:	2204      	movs	r2, #4
 8005504:	4013      	ands	r3, r2
 8005506:	d100      	bne.n	800550a <HAL_RCC_OscConfig+0x29e>
 8005508:	e0b6      	b.n	8005678 <HAL_RCC_OscConfig+0x40c>
  {
    FlagStatus       pwrclkchanged = RESET;
 800550a:	231f      	movs	r3, #31
 800550c:	18fb      	adds	r3, r7, r3
 800550e:	2200      	movs	r2, #0
 8005510:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8005512:	4b22      	ldr	r3, [pc, #136]	; (800559c <HAL_RCC_OscConfig+0x330>)
 8005514:	69da      	ldr	r2, [r3, #28]
 8005516:	2380      	movs	r3, #128	; 0x80
 8005518:	055b      	lsls	r3, r3, #21
 800551a:	4013      	ands	r3, r2
 800551c:	d111      	bne.n	8005542 <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800551e:	4b1f      	ldr	r3, [pc, #124]	; (800559c <HAL_RCC_OscConfig+0x330>)
 8005520:	69da      	ldr	r2, [r3, #28]
 8005522:	4b1e      	ldr	r3, [pc, #120]	; (800559c <HAL_RCC_OscConfig+0x330>)
 8005524:	2180      	movs	r1, #128	; 0x80
 8005526:	0549      	lsls	r1, r1, #21
 8005528:	430a      	orrs	r2, r1
 800552a:	61da      	str	r2, [r3, #28]
 800552c:	4b1b      	ldr	r3, [pc, #108]	; (800559c <HAL_RCC_OscConfig+0x330>)
 800552e:	69da      	ldr	r2, [r3, #28]
 8005530:	2380      	movs	r3, #128	; 0x80
 8005532:	055b      	lsls	r3, r3, #21
 8005534:	4013      	ands	r3, r2
 8005536:	60fb      	str	r3, [r7, #12]
 8005538:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 800553a:	231f      	movs	r3, #31
 800553c:	18fb      	adds	r3, r7, r3
 800553e:	2201      	movs	r2, #1
 8005540:	701a      	strb	r2, [r3, #0]
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005542:	4b19      	ldr	r3, [pc, #100]	; (80055a8 <HAL_RCC_OscConfig+0x33c>)
 8005544:	681a      	ldr	r2, [r3, #0]
 8005546:	2380      	movs	r3, #128	; 0x80
 8005548:	005b      	lsls	r3, r3, #1
 800554a:	4013      	ands	r3, r2
 800554c:	d11a      	bne.n	8005584 <HAL_RCC_OscConfig+0x318>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800554e:	4b16      	ldr	r3, [pc, #88]	; (80055a8 <HAL_RCC_OscConfig+0x33c>)
 8005550:	681a      	ldr	r2, [r3, #0]
 8005552:	4b15      	ldr	r3, [pc, #84]	; (80055a8 <HAL_RCC_OscConfig+0x33c>)
 8005554:	2180      	movs	r1, #128	; 0x80
 8005556:	0049      	lsls	r1, r1, #1
 8005558:	430a      	orrs	r2, r1
 800555a:	601a      	str	r2, [r3, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800555c:	f7fe ff32 	bl	80043c4 <HAL_GetTick>
 8005560:	0003      	movs	r3, r0
 8005562:	61bb      	str	r3, [r7, #24]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005564:	e008      	b.n	8005578 <HAL_RCC_OscConfig+0x30c>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005566:	f7fe ff2d 	bl	80043c4 <HAL_GetTick>
 800556a:	0002      	movs	r2, r0
 800556c:	69bb      	ldr	r3, [r7, #24]
 800556e:	1ad3      	subs	r3, r2, r3
 8005570:	2b64      	cmp	r3, #100	; 0x64
 8005572:	d901      	bls.n	8005578 <HAL_RCC_OscConfig+0x30c>
        {
          return HAL_TIMEOUT;
 8005574:	2303      	movs	r3, #3
 8005576:	e186      	b.n	8005886 <HAL_RCC_OscConfig+0x61a>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005578:	4b0b      	ldr	r3, [pc, #44]	; (80055a8 <HAL_RCC_OscConfig+0x33c>)
 800557a:	681a      	ldr	r2, [r3, #0]
 800557c:	2380      	movs	r3, #128	; 0x80
 800557e:	005b      	lsls	r3, r3, #1
 8005580:	4013      	ands	r3, r2
 8005582:	d0f0      	beq.n	8005566 <HAL_RCC_OscConfig+0x2fa>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8005584:	687b      	ldr	r3, [r7, #4]
 8005586:	689b      	ldr	r3, [r3, #8]
 8005588:	2b01      	cmp	r3, #1
 800558a:	d10f      	bne.n	80055ac <HAL_RCC_OscConfig+0x340>
 800558c:	4b03      	ldr	r3, [pc, #12]	; (800559c <HAL_RCC_OscConfig+0x330>)
 800558e:	6a1a      	ldr	r2, [r3, #32]
 8005590:	4b02      	ldr	r3, [pc, #8]	; (800559c <HAL_RCC_OscConfig+0x330>)
 8005592:	2101      	movs	r1, #1
 8005594:	430a      	orrs	r2, r1
 8005596:	621a      	str	r2, [r3, #32]
 8005598:	e036      	b.n	8005608 <HAL_RCC_OscConfig+0x39c>
 800559a:	46c0      	nop			; (mov r8, r8)
 800559c:	40021000 	.word	0x40021000
 80055a0:	fffeffff 	.word	0xfffeffff
 80055a4:	fffbffff 	.word	0xfffbffff
 80055a8:	40007000 	.word	0x40007000
 80055ac:	687b      	ldr	r3, [r7, #4]
 80055ae:	689b      	ldr	r3, [r3, #8]
 80055b0:	2b00      	cmp	r3, #0
 80055b2:	d10c      	bne.n	80055ce <HAL_RCC_OscConfig+0x362>
 80055b4:	4bb6      	ldr	r3, [pc, #728]	; (8005890 <HAL_RCC_OscConfig+0x624>)
 80055b6:	6a1a      	ldr	r2, [r3, #32]
 80055b8:	4bb5      	ldr	r3, [pc, #724]	; (8005890 <HAL_RCC_OscConfig+0x624>)
 80055ba:	2101      	movs	r1, #1
 80055bc:	438a      	bics	r2, r1
 80055be:	621a      	str	r2, [r3, #32]
 80055c0:	4bb3      	ldr	r3, [pc, #716]	; (8005890 <HAL_RCC_OscConfig+0x624>)
 80055c2:	6a1a      	ldr	r2, [r3, #32]
 80055c4:	4bb2      	ldr	r3, [pc, #712]	; (8005890 <HAL_RCC_OscConfig+0x624>)
 80055c6:	2104      	movs	r1, #4
 80055c8:	438a      	bics	r2, r1
 80055ca:	621a      	str	r2, [r3, #32]
 80055cc:	e01c      	b.n	8005608 <HAL_RCC_OscConfig+0x39c>
 80055ce:	687b      	ldr	r3, [r7, #4]
 80055d0:	689b      	ldr	r3, [r3, #8]
 80055d2:	2b05      	cmp	r3, #5
 80055d4:	d10c      	bne.n	80055f0 <HAL_RCC_OscConfig+0x384>
 80055d6:	4bae      	ldr	r3, [pc, #696]	; (8005890 <HAL_RCC_OscConfig+0x624>)
 80055d8:	6a1a      	ldr	r2, [r3, #32]
 80055da:	4bad      	ldr	r3, [pc, #692]	; (8005890 <HAL_RCC_OscConfig+0x624>)
 80055dc:	2104      	movs	r1, #4
 80055de:	430a      	orrs	r2, r1
 80055e0:	621a      	str	r2, [r3, #32]
 80055e2:	4bab      	ldr	r3, [pc, #684]	; (8005890 <HAL_RCC_OscConfig+0x624>)
 80055e4:	6a1a      	ldr	r2, [r3, #32]
 80055e6:	4baa      	ldr	r3, [pc, #680]	; (8005890 <HAL_RCC_OscConfig+0x624>)
 80055e8:	2101      	movs	r1, #1
 80055ea:	430a      	orrs	r2, r1
 80055ec:	621a      	str	r2, [r3, #32]
 80055ee:	e00b      	b.n	8005608 <HAL_RCC_OscConfig+0x39c>
 80055f0:	4ba7      	ldr	r3, [pc, #668]	; (8005890 <HAL_RCC_OscConfig+0x624>)
 80055f2:	6a1a      	ldr	r2, [r3, #32]
 80055f4:	4ba6      	ldr	r3, [pc, #664]	; (8005890 <HAL_RCC_OscConfig+0x624>)
 80055f6:	2101      	movs	r1, #1
 80055f8:	438a      	bics	r2, r1
 80055fa:	621a      	str	r2, [r3, #32]
 80055fc:	4ba4      	ldr	r3, [pc, #656]	; (8005890 <HAL_RCC_OscConfig+0x624>)
 80055fe:	6a1a      	ldr	r2, [r3, #32]
 8005600:	4ba3      	ldr	r3, [pc, #652]	; (8005890 <HAL_RCC_OscConfig+0x624>)
 8005602:	2104      	movs	r1, #4
 8005604:	438a      	bics	r2, r1
 8005606:	621a      	str	r2, [r3, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8005608:	687b      	ldr	r3, [r7, #4]
 800560a:	689b      	ldr	r3, [r3, #8]
 800560c:	2b00      	cmp	r3, #0
 800560e:	d014      	beq.n	800563a <HAL_RCC_OscConfig+0x3ce>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005610:	f7fe fed8 	bl	80043c4 <HAL_GetTick>
 8005614:	0003      	movs	r3, r0
 8005616:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005618:	e009      	b.n	800562e <HAL_RCC_OscConfig+0x3c2>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800561a:	f7fe fed3 	bl	80043c4 <HAL_GetTick>
 800561e:	0002      	movs	r2, r0
 8005620:	69bb      	ldr	r3, [r7, #24]
 8005622:	1ad3      	subs	r3, r2, r3
 8005624:	4a9b      	ldr	r2, [pc, #620]	; (8005894 <HAL_RCC_OscConfig+0x628>)
 8005626:	4293      	cmp	r3, r2
 8005628:	d901      	bls.n	800562e <HAL_RCC_OscConfig+0x3c2>
        {
          return HAL_TIMEOUT;
 800562a:	2303      	movs	r3, #3
 800562c:	e12b      	b.n	8005886 <HAL_RCC_OscConfig+0x61a>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800562e:	4b98      	ldr	r3, [pc, #608]	; (8005890 <HAL_RCC_OscConfig+0x624>)
 8005630:	6a1b      	ldr	r3, [r3, #32]
 8005632:	2202      	movs	r2, #2
 8005634:	4013      	ands	r3, r2
 8005636:	d0f0      	beq.n	800561a <HAL_RCC_OscConfig+0x3ae>
 8005638:	e013      	b.n	8005662 <HAL_RCC_OscConfig+0x3f6>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800563a:	f7fe fec3 	bl	80043c4 <HAL_GetTick>
 800563e:	0003      	movs	r3, r0
 8005640:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005642:	e009      	b.n	8005658 <HAL_RCC_OscConfig+0x3ec>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8005644:	f7fe febe 	bl	80043c4 <HAL_GetTick>
 8005648:	0002      	movs	r2, r0
 800564a:	69bb      	ldr	r3, [r7, #24]
 800564c:	1ad3      	subs	r3, r2, r3
 800564e:	4a91      	ldr	r2, [pc, #580]	; (8005894 <HAL_RCC_OscConfig+0x628>)
 8005650:	4293      	cmp	r3, r2
 8005652:	d901      	bls.n	8005658 <HAL_RCC_OscConfig+0x3ec>
        {
          return HAL_TIMEOUT;
 8005654:	2303      	movs	r3, #3
 8005656:	e116      	b.n	8005886 <HAL_RCC_OscConfig+0x61a>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005658:	4b8d      	ldr	r3, [pc, #564]	; (8005890 <HAL_RCC_OscConfig+0x624>)
 800565a:	6a1b      	ldr	r3, [r3, #32]
 800565c:	2202      	movs	r2, #2
 800565e:	4013      	ands	r3, r2
 8005660:	d1f0      	bne.n	8005644 <HAL_RCC_OscConfig+0x3d8>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8005662:	231f      	movs	r3, #31
 8005664:	18fb      	adds	r3, r7, r3
 8005666:	781b      	ldrb	r3, [r3, #0]
 8005668:	2b01      	cmp	r3, #1
 800566a:	d105      	bne.n	8005678 <HAL_RCC_OscConfig+0x40c>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800566c:	4b88      	ldr	r3, [pc, #544]	; (8005890 <HAL_RCC_OscConfig+0x624>)
 800566e:	69da      	ldr	r2, [r3, #28]
 8005670:	4b87      	ldr	r3, [pc, #540]	; (8005890 <HAL_RCC_OscConfig+0x624>)
 8005672:	4989      	ldr	r1, [pc, #548]	; (8005898 <HAL_RCC_OscConfig+0x62c>)
 8005674:	400a      	ands	r2, r1
 8005676:	61da      	str	r2, [r3, #28]
    }
  }

  /*----------------------------- HSI14 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI14) == RCC_OSCILLATORTYPE_HSI14)
 8005678:	687b      	ldr	r3, [r7, #4]
 800567a:	681b      	ldr	r3, [r3, #0]
 800567c:	2210      	movs	r2, #16
 800567e:	4013      	ands	r3, r2
 8005680:	d063      	beq.n	800574a <HAL_RCC_OscConfig+0x4de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI14(RCC_OscInitStruct->HSI14State));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSI14CalibrationValue));

    /* Check the HSI14 State */
    if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ON)
 8005682:	687b      	ldr	r3, [r7, #4]
 8005684:	695b      	ldr	r3, [r3, #20]
 8005686:	2b01      	cmp	r3, #1
 8005688:	d12a      	bne.n	80056e0 <HAL_RCC_OscConfig+0x474>
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 800568a:	4b81      	ldr	r3, [pc, #516]	; (8005890 <HAL_RCC_OscConfig+0x624>)
 800568c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800568e:	4b80      	ldr	r3, [pc, #512]	; (8005890 <HAL_RCC_OscConfig+0x624>)
 8005690:	2104      	movs	r1, #4
 8005692:	430a      	orrs	r2, r1
 8005694:	635a      	str	r2, [r3, #52]	; 0x34

      /* Enable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_ENABLE();
 8005696:	4b7e      	ldr	r3, [pc, #504]	; (8005890 <HAL_RCC_OscConfig+0x624>)
 8005698:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800569a:	4b7d      	ldr	r3, [pc, #500]	; (8005890 <HAL_RCC_OscConfig+0x624>)
 800569c:	2101      	movs	r1, #1
 800569e:	430a      	orrs	r2, r1
 80056a0:	635a      	str	r2, [r3, #52]	; 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80056a2:	f7fe fe8f 	bl	80043c4 <HAL_GetTick>
 80056a6:	0003      	movs	r3, r0
 80056a8:	61bb      	str	r3, [r7, #24]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 80056aa:	e008      	b.n	80056be <HAL_RCC_OscConfig+0x452>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 80056ac:	f7fe fe8a 	bl	80043c4 <HAL_GetTick>
 80056b0:	0002      	movs	r2, r0
 80056b2:	69bb      	ldr	r3, [r7, #24]
 80056b4:	1ad3      	subs	r3, r2, r3
 80056b6:	2b02      	cmp	r3, #2
 80056b8:	d901      	bls.n	80056be <HAL_RCC_OscConfig+0x452>
        {
          return HAL_TIMEOUT;
 80056ba:	2303      	movs	r3, #3
 80056bc:	e0e3      	b.n	8005886 <HAL_RCC_OscConfig+0x61a>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 80056be:	4b74      	ldr	r3, [pc, #464]	; (8005890 <HAL_RCC_OscConfig+0x624>)
 80056c0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80056c2:	2202      	movs	r2, #2
 80056c4:	4013      	ands	r3, r2
 80056c6:	d0f1      	beq.n	80056ac <HAL_RCC_OscConfig+0x440>
        }      
      } 

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 80056c8:	4b71      	ldr	r3, [pc, #452]	; (8005890 <HAL_RCC_OscConfig+0x624>)
 80056ca:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80056cc:	22f8      	movs	r2, #248	; 0xf8
 80056ce:	4393      	bics	r3, r2
 80056d0:	0019      	movs	r1, r3
 80056d2:	687b      	ldr	r3, [r7, #4]
 80056d4:	699b      	ldr	r3, [r3, #24]
 80056d6:	00da      	lsls	r2, r3, #3
 80056d8:	4b6d      	ldr	r3, [pc, #436]	; (8005890 <HAL_RCC_OscConfig+0x624>)
 80056da:	430a      	orrs	r2, r1
 80056dc:	635a      	str	r2, [r3, #52]	; 0x34
 80056de:	e034      	b.n	800574a <HAL_RCC_OscConfig+0x4de>
    }
    else if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ADC_CONTROL)
 80056e0:	687b      	ldr	r3, [r7, #4]
 80056e2:	695b      	ldr	r3, [r3, #20]
 80056e4:	3305      	adds	r3, #5
 80056e6:	d111      	bne.n	800570c <HAL_RCC_OscConfig+0x4a0>
    {
      /* Enable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_ENABLE();
 80056e8:	4b69      	ldr	r3, [pc, #420]	; (8005890 <HAL_RCC_OscConfig+0x624>)
 80056ea:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80056ec:	4b68      	ldr	r3, [pc, #416]	; (8005890 <HAL_RCC_OscConfig+0x624>)
 80056ee:	2104      	movs	r1, #4
 80056f0:	438a      	bics	r2, r1
 80056f2:	635a      	str	r2, [r3, #52]	; 0x34

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 80056f4:	4b66      	ldr	r3, [pc, #408]	; (8005890 <HAL_RCC_OscConfig+0x624>)
 80056f6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80056f8:	22f8      	movs	r2, #248	; 0xf8
 80056fa:	4393      	bics	r3, r2
 80056fc:	0019      	movs	r1, r3
 80056fe:	687b      	ldr	r3, [r7, #4]
 8005700:	699b      	ldr	r3, [r3, #24]
 8005702:	00da      	lsls	r2, r3, #3
 8005704:	4b62      	ldr	r3, [pc, #392]	; (8005890 <HAL_RCC_OscConfig+0x624>)
 8005706:	430a      	orrs	r2, r1
 8005708:	635a      	str	r2, [r3, #52]	; 0x34
 800570a:	e01e      	b.n	800574a <HAL_RCC_OscConfig+0x4de>
    }
    else
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 800570c:	4b60      	ldr	r3, [pc, #384]	; (8005890 <HAL_RCC_OscConfig+0x624>)
 800570e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005710:	4b5f      	ldr	r3, [pc, #380]	; (8005890 <HAL_RCC_OscConfig+0x624>)
 8005712:	2104      	movs	r1, #4
 8005714:	430a      	orrs	r2, r1
 8005716:	635a      	str	r2, [r3, #52]	; 0x34

      /* Disable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_DISABLE();
 8005718:	4b5d      	ldr	r3, [pc, #372]	; (8005890 <HAL_RCC_OscConfig+0x624>)
 800571a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800571c:	4b5c      	ldr	r3, [pc, #368]	; (8005890 <HAL_RCC_OscConfig+0x624>)
 800571e:	2101      	movs	r1, #1
 8005720:	438a      	bics	r2, r1
 8005722:	635a      	str	r2, [r3, #52]	; 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005724:	f7fe fe4e 	bl	80043c4 <HAL_GetTick>
 8005728:	0003      	movs	r3, r0
 800572a:	61bb      	str	r3, [r7, #24]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 800572c:	e008      	b.n	8005740 <HAL_RCC_OscConfig+0x4d4>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 800572e:	f7fe fe49 	bl	80043c4 <HAL_GetTick>
 8005732:	0002      	movs	r2, r0
 8005734:	69bb      	ldr	r3, [r7, #24]
 8005736:	1ad3      	subs	r3, r2, r3
 8005738:	2b02      	cmp	r3, #2
 800573a:	d901      	bls.n	8005740 <HAL_RCC_OscConfig+0x4d4>
        {
          return HAL_TIMEOUT;
 800573c:	2303      	movs	r3, #3
 800573e:	e0a2      	b.n	8005886 <HAL_RCC_OscConfig+0x61a>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 8005740:	4b53      	ldr	r3, [pc, #332]	; (8005890 <HAL_RCC_OscConfig+0x624>)
 8005742:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005744:	2202      	movs	r2, #2
 8005746:	4013      	ands	r3, r2
 8005748:	d1f1      	bne.n	800572e <HAL_RCC_OscConfig+0x4c2>
#endif /* RCC_HSI48_SUPPORT */
       
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800574a:	687b      	ldr	r3, [r7, #4]
 800574c:	6a1b      	ldr	r3, [r3, #32]
 800574e:	2b00      	cmp	r3, #0
 8005750:	d100      	bne.n	8005754 <HAL_RCC_OscConfig+0x4e8>
 8005752:	e097      	b.n	8005884 <HAL_RCC_OscConfig+0x618>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8005754:	4b4e      	ldr	r3, [pc, #312]	; (8005890 <HAL_RCC_OscConfig+0x624>)
 8005756:	685b      	ldr	r3, [r3, #4]
 8005758:	220c      	movs	r2, #12
 800575a:	4013      	ands	r3, r2
 800575c:	2b08      	cmp	r3, #8
 800575e:	d100      	bne.n	8005762 <HAL_RCC_OscConfig+0x4f6>
 8005760:	e06b      	b.n	800583a <HAL_RCC_OscConfig+0x5ce>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8005762:	687b      	ldr	r3, [r7, #4]
 8005764:	6a1b      	ldr	r3, [r3, #32]
 8005766:	2b02      	cmp	r3, #2
 8005768:	d14c      	bne.n	8005804 <HAL_RCC_OscConfig+0x598>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800576a:	4b49      	ldr	r3, [pc, #292]	; (8005890 <HAL_RCC_OscConfig+0x624>)
 800576c:	681a      	ldr	r2, [r3, #0]
 800576e:	4b48      	ldr	r3, [pc, #288]	; (8005890 <HAL_RCC_OscConfig+0x624>)
 8005770:	494a      	ldr	r1, [pc, #296]	; (800589c <HAL_RCC_OscConfig+0x630>)
 8005772:	400a      	ands	r2, r1
 8005774:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005776:	f7fe fe25 	bl	80043c4 <HAL_GetTick>
 800577a:	0003      	movs	r3, r0
 800577c:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800577e:	e008      	b.n	8005792 <HAL_RCC_OscConfig+0x526>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005780:	f7fe fe20 	bl	80043c4 <HAL_GetTick>
 8005784:	0002      	movs	r2, r0
 8005786:	69bb      	ldr	r3, [r7, #24]
 8005788:	1ad3      	subs	r3, r2, r3
 800578a:	2b02      	cmp	r3, #2
 800578c:	d901      	bls.n	8005792 <HAL_RCC_OscConfig+0x526>
          {
            return HAL_TIMEOUT;
 800578e:	2303      	movs	r3, #3
 8005790:	e079      	b.n	8005886 <HAL_RCC_OscConfig+0x61a>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8005792:	4b3f      	ldr	r3, [pc, #252]	; (8005890 <HAL_RCC_OscConfig+0x624>)
 8005794:	681a      	ldr	r2, [r3, #0]
 8005796:	2380      	movs	r3, #128	; 0x80
 8005798:	049b      	lsls	r3, r3, #18
 800579a:	4013      	ands	r3, r2
 800579c:	d1f0      	bne.n	8005780 <HAL_RCC_OscConfig+0x514>
          }
        }

        /* Configure the main PLL clock source, predivider and multiplication factor. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800579e:	4b3c      	ldr	r3, [pc, #240]	; (8005890 <HAL_RCC_OscConfig+0x624>)
 80057a0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80057a2:	220f      	movs	r2, #15
 80057a4:	4393      	bics	r3, r2
 80057a6:	0019      	movs	r1, r3
 80057a8:	687b      	ldr	r3, [r7, #4]
 80057aa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80057ac:	4b38      	ldr	r3, [pc, #224]	; (8005890 <HAL_RCC_OscConfig+0x624>)
 80057ae:	430a      	orrs	r2, r1
 80057b0:	62da      	str	r2, [r3, #44]	; 0x2c
 80057b2:	4b37      	ldr	r3, [pc, #220]	; (8005890 <HAL_RCC_OscConfig+0x624>)
 80057b4:	685b      	ldr	r3, [r3, #4]
 80057b6:	4a3a      	ldr	r2, [pc, #232]	; (80058a0 <HAL_RCC_OscConfig+0x634>)
 80057b8:	4013      	ands	r3, r2
 80057ba:	0019      	movs	r1, r3
 80057bc:	687b      	ldr	r3, [r7, #4]
 80057be:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80057c0:	687b      	ldr	r3, [r7, #4]
 80057c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80057c4:	431a      	orrs	r2, r3
 80057c6:	4b32      	ldr	r3, [pc, #200]	; (8005890 <HAL_RCC_OscConfig+0x624>)
 80057c8:	430a      	orrs	r2, r1
 80057ca:	605a      	str	r2, [r3, #4]
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80057cc:	4b30      	ldr	r3, [pc, #192]	; (8005890 <HAL_RCC_OscConfig+0x624>)
 80057ce:	681a      	ldr	r2, [r3, #0]
 80057d0:	4b2f      	ldr	r3, [pc, #188]	; (8005890 <HAL_RCC_OscConfig+0x624>)
 80057d2:	2180      	movs	r1, #128	; 0x80
 80057d4:	0449      	lsls	r1, r1, #17
 80057d6:	430a      	orrs	r2, r1
 80057d8:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80057da:	f7fe fdf3 	bl	80043c4 <HAL_GetTick>
 80057de:	0003      	movs	r3, r0
 80057e0:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80057e2:	e008      	b.n	80057f6 <HAL_RCC_OscConfig+0x58a>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80057e4:	f7fe fdee 	bl	80043c4 <HAL_GetTick>
 80057e8:	0002      	movs	r2, r0
 80057ea:	69bb      	ldr	r3, [r7, #24]
 80057ec:	1ad3      	subs	r3, r2, r3
 80057ee:	2b02      	cmp	r3, #2
 80057f0:	d901      	bls.n	80057f6 <HAL_RCC_OscConfig+0x58a>
          {
            return HAL_TIMEOUT;
 80057f2:	2303      	movs	r3, #3
 80057f4:	e047      	b.n	8005886 <HAL_RCC_OscConfig+0x61a>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80057f6:	4b26      	ldr	r3, [pc, #152]	; (8005890 <HAL_RCC_OscConfig+0x624>)
 80057f8:	681a      	ldr	r2, [r3, #0]
 80057fa:	2380      	movs	r3, #128	; 0x80
 80057fc:	049b      	lsls	r3, r3, #18
 80057fe:	4013      	ands	r3, r2
 8005800:	d0f0      	beq.n	80057e4 <HAL_RCC_OscConfig+0x578>
 8005802:	e03f      	b.n	8005884 <HAL_RCC_OscConfig+0x618>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005804:	4b22      	ldr	r3, [pc, #136]	; (8005890 <HAL_RCC_OscConfig+0x624>)
 8005806:	681a      	ldr	r2, [r3, #0]
 8005808:	4b21      	ldr	r3, [pc, #132]	; (8005890 <HAL_RCC_OscConfig+0x624>)
 800580a:	4924      	ldr	r1, [pc, #144]	; (800589c <HAL_RCC_OscConfig+0x630>)
 800580c:	400a      	ands	r2, r1
 800580e:	601a      	str	r2, [r3, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005810:	f7fe fdd8 	bl	80043c4 <HAL_GetTick>
 8005814:	0003      	movs	r3, r0
 8005816:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8005818:	e008      	b.n	800582c <HAL_RCC_OscConfig+0x5c0>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800581a:	f7fe fdd3 	bl	80043c4 <HAL_GetTick>
 800581e:	0002      	movs	r2, r0
 8005820:	69bb      	ldr	r3, [r7, #24]
 8005822:	1ad3      	subs	r3, r2, r3
 8005824:	2b02      	cmp	r3, #2
 8005826:	d901      	bls.n	800582c <HAL_RCC_OscConfig+0x5c0>
          {
            return HAL_TIMEOUT;
 8005828:	2303      	movs	r3, #3
 800582a:	e02c      	b.n	8005886 <HAL_RCC_OscConfig+0x61a>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800582c:	4b18      	ldr	r3, [pc, #96]	; (8005890 <HAL_RCC_OscConfig+0x624>)
 800582e:	681a      	ldr	r2, [r3, #0]
 8005830:	2380      	movs	r3, #128	; 0x80
 8005832:	049b      	lsls	r3, r3, #18
 8005834:	4013      	ands	r3, r2
 8005836:	d1f0      	bne.n	800581a <HAL_RCC_OscConfig+0x5ae>
 8005838:	e024      	b.n	8005884 <HAL_RCC_OscConfig+0x618>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800583a:	687b      	ldr	r3, [r7, #4]
 800583c:	6a1b      	ldr	r3, [r3, #32]
 800583e:	2b01      	cmp	r3, #1
 8005840:	d101      	bne.n	8005846 <HAL_RCC_OscConfig+0x5da>
      {
        return HAL_ERROR;
 8005842:	2301      	movs	r3, #1
 8005844:	e01f      	b.n	8005886 <HAL_RCC_OscConfig+0x61a>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config  = RCC->CFGR;
 8005846:	4b12      	ldr	r3, [pc, #72]	; (8005890 <HAL_RCC_OscConfig+0x624>)
 8005848:	685b      	ldr	r3, [r3, #4]
 800584a:	617b      	str	r3, [r7, #20]
        pll_config2 = RCC->CFGR2;
 800584c:	4b10      	ldr	r3, [pc, #64]	; (8005890 <HAL_RCC_OscConfig+0x624>)
 800584e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005850:	613b      	str	r3, [r7, #16]
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8005852:	697a      	ldr	r2, [r7, #20]
 8005854:	2380      	movs	r3, #128	; 0x80
 8005856:	025b      	lsls	r3, r3, #9
 8005858:	401a      	ands	r2, r3
 800585a:	687b      	ldr	r3, [r7, #4]
 800585c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800585e:	429a      	cmp	r2, r3
 8005860:	d10e      	bne.n	8005880 <HAL_RCC_OscConfig+0x614>
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 8005862:	693b      	ldr	r3, [r7, #16]
 8005864:	220f      	movs	r2, #15
 8005866:	401a      	ands	r2, r3
 8005868:	687b      	ldr	r3, [r7, #4]
 800586a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 800586c:	429a      	cmp	r2, r3
 800586e:	d107      	bne.n	8005880 <HAL_RCC_OscConfig+0x614>
           (READ_BIT(pll_config,  RCC_CFGR_PLLMUL)  != RCC_OscInitStruct->PLL.PLLMUL))
 8005870:	697a      	ldr	r2, [r7, #20]
 8005872:	23f0      	movs	r3, #240	; 0xf0
 8005874:	039b      	lsls	r3, r3, #14
 8005876:	401a      	ands	r2, r3
 8005878:	687b      	ldr	r3, [r7, #4]
 800587a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 800587c:	429a      	cmp	r2, r3
 800587e:	d001      	beq.n	8005884 <HAL_RCC_OscConfig+0x618>
        {
          return HAL_ERROR;
 8005880:	2301      	movs	r3, #1
 8005882:	e000      	b.n	8005886 <HAL_RCC_OscConfig+0x61a>
        }
      }
    }
  }

  return HAL_OK;
 8005884:	2300      	movs	r3, #0
}
 8005886:	0018      	movs	r0, r3
 8005888:	46bd      	mov	sp, r7
 800588a:	b008      	add	sp, #32
 800588c:	bd80      	pop	{r7, pc}
 800588e:	46c0      	nop			; (mov r8, r8)
 8005890:	40021000 	.word	0x40021000
 8005894:	00001388 	.word	0x00001388
 8005898:	efffffff 	.word	0xefffffff
 800589c:	feffffff 	.word	0xfeffffff
 80058a0:	ffc2ffff 	.word	0xffc2ffff

080058a4 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80058a4:	b580      	push	{r7, lr}
 80058a6:	b084      	sub	sp, #16
 80058a8:	af00      	add	r7, sp, #0
 80058aa:	6078      	str	r0, [r7, #4]
 80058ac:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80058ae:	687b      	ldr	r3, [r7, #4]
 80058b0:	2b00      	cmp	r3, #0
 80058b2:	d101      	bne.n	80058b8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80058b4:	2301      	movs	r3, #1
 80058b6:	e0b3      	b.n	8005a20 <HAL_RCC_ClockConfig+0x17c>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80058b8:	4b5b      	ldr	r3, [pc, #364]	; (8005a28 <HAL_RCC_ClockConfig+0x184>)
 80058ba:	681b      	ldr	r3, [r3, #0]
 80058bc:	2201      	movs	r2, #1
 80058be:	4013      	ands	r3, r2
 80058c0:	683a      	ldr	r2, [r7, #0]
 80058c2:	429a      	cmp	r2, r3
 80058c4:	d911      	bls.n	80058ea <HAL_RCC_ClockConfig+0x46>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80058c6:	4b58      	ldr	r3, [pc, #352]	; (8005a28 <HAL_RCC_ClockConfig+0x184>)
 80058c8:	681b      	ldr	r3, [r3, #0]
 80058ca:	2201      	movs	r2, #1
 80058cc:	4393      	bics	r3, r2
 80058ce:	0019      	movs	r1, r3
 80058d0:	4b55      	ldr	r3, [pc, #340]	; (8005a28 <HAL_RCC_ClockConfig+0x184>)
 80058d2:	683a      	ldr	r2, [r7, #0]
 80058d4:	430a      	orrs	r2, r1
 80058d6:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80058d8:	4b53      	ldr	r3, [pc, #332]	; (8005a28 <HAL_RCC_ClockConfig+0x184>)
 80058da:	681b      	ldr	r3, [r3, #0]
 80058dc:	2201      	movs	r2, #1
 80058de:	4013      	ands	r3, r2
 80058e0:	683a      	ldr	r2, [r7, #0]
 80058e2:	429a      	cmp	r2, r3
 80058e4:	d001      	beq.n	80058ea <HAL_RCC_ClockConfig+0x46>
    {
      return HAL_ERROR;
 80058e6:	2301      	movs	r3, #1
 80058e8:	e09a      	b.n	8005a20 <HAL_RCC_ClockConfig+0x17c>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80058ea:	687b      	ldr	r3, [r7, #4]
 80058ec:	681b      	ldr	r3, [r3, #0]
 80058ee:	2202      	movs	r2, #2
 80058f0:	4013      	ands	r3, r2
 80058f2:	d015      	beq.n	8005920 <HAL_RCC_ClockConfig+0x7c>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80058f4:	687b      	ldr	r3, [r7, #4]
 80058f6:	681b      	ldr	r3, [r3, #0]
 80058f8:	2204      	movs	r2, #4
 80058fa:	4013      	ands	r3, r2
 80058fc:	d006      	beq.n	800590c <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 80058fe:	4b4b      	ldr	r3, [pc, #300]	; (8005a2c <HAL_RCC_ClockConfig+0x188>)
 8005900:	685a      	ldr	r2, [r3, #4]
 8005902:	4b4a      	ldr	r3, [pc, #296]	; (8005a2c <HAL_RCC_ClockConfig+0x188>)
 8005904:	21e0      	movs	r1, #224	; 0xe0
 8005906:	00c9      	lsls	r1, r1, #3
 8005908:	430a      	orrs	r2, r1
 800590a:	605a      	str	r2, [r3, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800590c:	4b47      	ldr	r3, [pc, #284]	; (8005a2c <HAL_RCC_ClockConfig+0x188>)
 800590e:	685b      	ldr	r3, [r3, #4]
 8005910:	22f0      	movs	r2, #240	; 0xf0
 8005912:	4393      	bics	r3, r2
 8005914:	0019      	movs	r1, r3
 8005916:	687b      	ldr	r3, [r7, #4]
 8005918:	689a      	ldr	r2, [r3, #8]
 800591a:	4b44      	ldr	r3, [pc, #272]	; (8005a2c <HAL_RCC_ClockConfig+0x188>)
 800591c:	430a      	orrs	r2, r1
 800591e:	605a      	str	r2, [r3, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8005920:	687b      	ldr	r3, [r7, #4]
 8005922:	681b      	ldr	r3, [r3, #0]
 8005924:	2201      	movs	r2, #1
 8005926:	4013      	ands	r3, r2
 8005928:	d040      	beq.n	80059ac <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800592a:	687b      	ldr	r3, [r7, #4]
 800592c:	685b      	ldr	r3, [r3, #4]
 800592e:	2b01      	cmp	r3, #1
 8005930:	d107      	bne.n	8005942 <HAL_RCC_ClockConfig+0x9e>
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005932:	4b3e      	ldr	r3, [pc, #248]	; (8005a2c <HAL_RCC_ClockConfig+0x188>)
 8005934:	681a      	ldr	r2, [r3, #0]
 8005936:	2380      	movs	r3, #128	; 0x80
 8005938:	029b      	lsls	r3, r3, #10
 800593a:	4013      	ands	r3, r2
 800593c:	d114      	bne.n	8005968 <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_ERROR;
 800593e:	2301      	movs	r3, #1
 8005940:	e06e      	b.n	8005a20 <HAL_RCC_ClockConfig+0x17c>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8005942:	687b      	ldr	r3, [r7, #4]
 8005944:	685b      	ldr	r3, [r3, #4]
 8005946:	2b02      	cmp	r3, #2
 8005948:	d107      	bne.n	800595a <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800594a:	4b38      	ldr	r3, [pc, #224]	; (8005a2c <HAL_RCC_ClockConfig+0x188>)
 800594c:	681a      	ldr	r2, [r3, #0]
 800594e:	2380      	movs	r3, #128	; 0x80
 8005950:	049b      	lsls	r3, r3, #18
 8005952:	4013      	ands	r3, r2
 8005954:	d108      	bne.n	8005968 <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_ERROR;
 8005956:	2301      	movs	r3, #1
 8005958:	e062      	b.n	8005a20 <HAL_RCC_ClockConfig+0x17c>
#endif /* RCC_CFGR_SWS_HSI48 */
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800595a:	4b34      	ldr	r3, [pc, #208]	; (8005a2c <HAL_RCC_ClockConfig+0x188>)
 800595c:	681b      	ldr	r3, [r3, #0]
 800595e:	2202      	movs	r2, #2
 8005960:	4013      	ands	r3, r2
 8005962:	d101      	bne.n	8005968 <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_ERROR;
 8005964:	2301      	movs	r3, #1
 8005966:	e05b      	b.n	8005a20 <HAL_RCC_ClockConfig+0x17c>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8005968:	4b30      	ldr	r3, [pc, #192]	; (8005a2c <HAL_RCC_ClockConfig+0x188>)
 800596a:	685b      	ldr	r3, [r3, #4]
 800596c:	2203      	movs	r2, #3
 800596e:	4393      	bics	r3, r2
 8005970:	0019      	movs	r1, r3
 8005972:	687b      	ldr	r3, [r7, #4]
 8005974:	685a      	ldr	r2, [r3, #4]
 8005976:	4b2d      	ldr	r3, [pc, #180]	; (8005a2c <HAL_RCC_ClockConfig+0x188>)
 8005978:	430a      	orrs	r2, r1
 800597a:	605a      	str	r2, [r3, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800597c:	f7fe fd22 	bl	80043c4 <HAL_GetTick>
 8005980:	0003      	movs	r3, r0
 8005982:	60fb      	str	r3, [r7, #12]
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005984:	e009      	b.n	800599a <HAL_RCC_ClockConfig+0xf6>
    {
      if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005986:	f7fe fd1d 	bl	80043c4 <HAL_GetTick>
 800598a:	0002      	movs	r2, r0
 800598c:	68fb      	ldr	r3, [r7, #12]
 800598e:	1ad3      	subs	r3, r2, r3
 8005990:	4a27      	ldr	r2, [pc, #156]	; (8005a30 <HAL_RCC_ClockConfig+0x18c>)
 8005992:	4293      	cmp	r3, r2
 8005994:	d901      	bls.n	800599a <HAL_RCC_ClockConfig+0xf6>
      {
        return HAL_TIMEOUT;
 8005996:	2303      	movs	r3, #3
 8005998:	e042      	b.n	8005a20 <HAL_RCC_ClockConfig+0x17c>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800599a:	4b24      	ldr	r3, [pc, #144]	; (8005a2c <HAL_RCC_ClockConfig+0x188>)
 800599c:	685b      	ldr	r3, [r3, #4]
 800599e:	220c      	movs	r2, #12
 80059a0:	401a      	ands	r2, r3
 80059a2:	687b      	ldr	r3, [r7, #4]
 80059a4:	685b      	ldr	r3, [r3, #4]
 80059a6:	009b      	lsls	r3, r3, #2
 80059a8:	429a      	cmp	r2, r3
 80059aa:	d1ec      	bne.n	8005986 <HAL_RCC_ClockConfig+0xe2>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80059ac:	4b1e      	ldr	r3, [pc, #120]	; (8005a28 <HAL_RCC_ClockConfig+0x184>)
 80059ae:	681b      	ldr	r3, [r3, #0]
 80059b0:	2201      	movs	r2, #1
 80059b2:	4013      	ands	r3, r2
 80059b4:	683a      	ldr	r2, [r7, #0]
 80059b6:	429a      	cmp	r2, r3
 80059b8:	d211      	bcs.n	80059de <HAL_RCC_ClockConfig+0x13a>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80059ba:	4b1b      	ldr	r3, [pc, #108]	; (8005a28 <HAL_RCC_ClockConfig+0x184>)
 80059bc:	681b      	ldr	r3, [r3, #0]
 80059be:	2201      	movs	r2, #1
 80059c0:	4393      	bics	r3, r2
 80059c2:	0019      	movs	r1, r3
 80059c4:	4b18      	ldr	r3, [pc, #96]	; (8005a28 <HAL_RCC_ClockConfig+0x184>)
 80059c6:	683a      	ldr	r2, [r7, #0]
 80059c8:	430a      	orrs	r2, r1
 80059ca:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80059cc:	4b16      	ldr	r3, [pc, #88]	; (8005a28 <HAL_RCC_ClockConfig+0x184>)
 80059ce:	681b      	ldr	r3, [r3, #0]
 80059d0:	2201      	movs	r2, #1
 80059d2:	4013      	ands	r3, r2
 80059d4:	683a      	ldr	r2, [r7, #0]
 80059d6:	429a      	cmp	r2, r3
 80059d8:	d001      	beq.n	80059de <HAL_RCC_ClockConfig+0x13a>
    {
      return HAL_ERROR;
 80059da:	2301      	movs	r3, #1
 80059dc:	e020      	b.n	8005a20 <HAL_RCC_ClockConfig+0x17c>
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80059de:	687b      	ldr	r3, [r7, #4]
 80059e0:	681b      	ldr	r3, [r3, #0]
 80059e2:	2204      	movs	r2, #4
 80059e4:	4013      	ands	r3, r2
 80059e6:	d009      	beq.n	80059fc <HAL_RCC_ClockConfig+0x158>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 80059e8:	4b10      	ldr	r3, [pc, #64]	; (8005a2c <HAL_RCC_ClockConfig+0x188>)
 80059ea:	685b      	ldr	r3, [r3, #4]
 80059ec:	4a11      	ldr	r2, [pc, #68]	; (8005a34 <HAL_RCC_ClockConfig+0x190>)
 80059ee:	4013      	ands	r3, r2
 80059f0:	0019      	movs	r1, r3
 80059f2:	687b      	ldr	r3, [r7, #4]
 80059f4:	68da      	ldr	r2, [r3, #12]
 80059f6:	4b0d      	ldr	r3, [pc, #52]	; (8005a2c <HAL_RCC_ClockConfig+0x188>)
 80059f8:	430a      	orrs	r2, r1
 80059fa:	605a      	str	r2, [r3, #4]
  }
  
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 80059fc:	f000 f820 	bl	8005a40 <HAL_RCC_GetSysClockFreq>
 8005a00:	0001      	movs	r1, r0
 8005a02:	4b0a      	ldr	r3, [pc, #40]	; (8005a2c <HAL_RCC_ClockConfig+0x188>)
 8005a04:	685b      	ldr	r3, [r3, #4]
 8005a06:	091b      	lsrs	r3, r3, #4
 8005a08:	220f      	movs	r2, #15
 8005a0a:	4013      	ands	r3, r2
 8005a0c:	4a0a      	ldr	r2, [pc, #40]	; (8005a38 <HAL_RCC_ClockConfig+0x194>)
 8005a0e:	5cd3      	ldrb	r3, [r2, r3]
 8005a10:	000a      	movs	r2, r1
 8005a12:	40da      	lsrs	r2, r3
 8005a14:	4b09      	ldr	r3, [pc, #36]	; (8005a3c <HAL_RCC_ClockConfig+0x198>)
 8005a16:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (TICK_INT_PRIORITY);
 8005a18:	2000      	movs	r0, #0
 8005a1a:	f7fe fbff 	bl	800421c <HAL_InitTick>
  
  return HAL_OK;
 8005a1e:	2300      	movs	r3, #0
}
 8005a20:	0018      	movs	r0, r3
 8005a22:	46bd      	mov	sp, r7
 8005a24:	b004      	add	sp, #16
 8005a26:	bd80      	pop	{r7, pc}
 8005a28:	40022000 	.word	0x40022000
 8005a2c:	40021000 	.word	0x40021000
 8005a30:	00001388 	.word	0x00001388
 8005a34:	fffff8ff 	.word	0xfffff8ff
 8005a38:	08009574 	.word	0x08009574
 8005a3c:	20000004 	.word	0x20000004

08005a40 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005a40:	b590      	push	{r4, r7, lr}
 8005a42:	b08f      	sub	sp, #60	; 0x3c
 8005a44:	af00      	add	r7, sp, #0
  const uint8_t aPLLMULFactorTable[16] = { 2U,  3U,  4U,  5U,  6U,  7U,  8U,  9U,
 8005a46:	2314      	movs	r3, #20
 8005a48:	18fb      	adds	r3, r7, r3
 8005a4a:	4a2b      	ldr	r2, [pc, #172]	; (8005af8 <HAL_RCC_GetSysClockFreq+0xb8>)
 8005a4c:	ca13      	ldmia	r2!, {r0, r1, r4}
 8005a4e:	c313      	stmia	r3!, {r0, r1, r4}
 8005a50:	6812      	ldr	r2, [r2, #0]
 8005a52:	601a      	str	r2, [r3, #0]
                                         10U, 11U, 12U, 13U, 14U, 15U, 16U, 16U};
  const uint8_t aPredivFactorTable[16] = { 1U, 2U,  3U,  4U,  5U,  6U,  7U,  8U,
 8005a54:	1d3b      	adds	r3, r7, #4
 8005a56:	4a29      	ldr	r2, [pc, #164]	; (8005afc <HAL_RCC_GetSysClockFreq+0xbc>)
 8005a58:	ca13      	ldmia	r2!, {r0, r1, r4}
 8005a5a:	c313      	stmia	r3!, {r0, r1, r4}
 8005a5c:	6812      	ldr	r2, [r2, #0]
 8005a5e:	601a      	str	r2, [r3, #0]
                                           9U,10U, 11U, 12U, 13U, 14U, 15U, 16U};

  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8005a60:	2300      	movs	r3, #0
 8005a62:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005a64:	2300      	movs	r3, #0
 8005a66:	62bb      	str	r3, [r7, #40]	; 0x28
 8005a68:	2300      	movs	r3, #0
 8005a6a:	637b      	str	r3, [r7, #52]	; 0x34
 8005a6c:	2300      	movs	r3, #0
 8005a6e:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t sysclockfreq = 0U;
 8005a70:	2300      	movs	r3, #0
 8005a72:	633b      	str	r3, [r7, #48]	; 0x30
  
  tmpreg = RCC->CFGR;
 8005a74:	4b22      	ldr	r3, [pc, #136]	; (8005b00 <HAL_RCC_GetSysClockFreq+0xc0>)
 8005a76:	685b      	ldr	r3, [r3, #4]
 8005a78:	62fb      	str	r3, [r7, #44]	; 0x2c
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8005a7a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005a7c:	220c      	movs	r2, #12
 8005a7e:	4013      	ands	r3, r2
 8005a80:	2b04      	cmp	r3, #4
 8005a82:	d002      	beq.n	8005a8a <HAL_RCC_GetSysClockFreq+0x4a>
 8005a84:	2b08      	cmp	r3, #8
 8005a86:	d003      	beq.n	8005a90 <HAL_RCC_GetSysClockFreq+0x50>
 8005a88:	e02d      	b.n	8005ae6 <HAL_RCC_GetSysClockFreq+0xa6>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8005a8a:	4b1e      	ldr	r3, [pc, #120]	; (8005b04 <HAL_RCC_GetSysClockFreq+0xc4>)
 8005a8c:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8005a8e:	e02d      	b.n	8005aec <HAL_RCC_GetSysClockFreq+0xac>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_BITNUMBER];
 8005a90:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005a92:	0c9b      	lsrs	r3, r3, #18
 8005a94:	220f      	movs	r2, #15
 8005a96:	4013      	ands	r3, r2
 8005a98:	2214      	movs	r2, #20
 8005a9a:	18ba      	adds	r2, r7, r2
 8005a9c:	5cd3      	ldrb	r3, [r2, r3]
 8005a9e:	627b      	str	r3, [r7, #36]	; 0x24
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> RCC_CFGR2_PREDIV_BITNUMBER];
 8005aa0:	4b17      	ldr	r3, [pc, #92]	; (8005b00 <HAL_RCC_GetSysClockFreq+0xc0>)
 8005aa2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005aa4:	220f      	movs	r2, #15
 8005aa6:	4013      	ands	r3, r2
 8005aa8:	1d3a      	adds	r2, r7, #4
 8005aaa:	5cd3      	ldrb	r3, [r2, r3]
 8005aac:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((tmpreg & RCC_CFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 8005aae:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005ab0:	2380      	movs	r3, #128	; 0x80
 8005ab2:	025b      	lsls	r3, r3, #9
 8005ab4:	4013      	ands	r3, r2
 8005ab6:	d009      	beq.n	8005acc <HAL_RCC_GetSysClockFreq+0x8c>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8005ab8:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8005aba:	4812      	ldr	r0, [pc, #72]	; (8005b04 <HAL_RCC_GetSysClockFreq+0xc4>)
 8005abc:	f7fa fb24 	bl	8000108 <__udivsi3>
 8005ac0:	0003      	movs	r3, r0
 8005ac2:	001a      	movs	r2, r3
 8005ac4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005ac6:	4353      	muls	r3, r2
 8005ac8:	637b      	str	r3, [r7, #52]	; 0x34
 8005aca:	e009      	b.n	8005ae0 <HAL_RCC_GetSysClockFreq+0xa0>
#if  (defined(STM32F042x6) || defined(STM32F048xx) || defined(STM32F070x6) || defined(STM32F071xB) || defined(STM32F072xB) || defined(STM32F078xx) || defined(STM32F070xB) || defined(STM32F091xC) || defined(STM32F098xx) || defined(STM32F030xC))
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
#else
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
 8005acc:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8005ace:	000a      	movs	r2, r1
 8005ad0:	0152      	lsls	r2, r2, #5
 8005ad2:	1a52      	subs	r2, r2, r1
 8005ad4:	0193      	lsls	r3, r2, #6
 8005ad6:	1a9b      	subs	r3, r3, r2
 8005ad8:	00db      	lsls	r3, r3, #3
 8005ada:	185b      	adds	r3, r3, r1
 8005adc:	021b      	lsls	r3, r3, #8
 8005ade:	637b      	str	r3, [r7, #52]	; 0x34
#endif
      }
      sysclockfreq = pllclk;
 8005ae0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005ae2:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8005ae4:	e002      	b.n	8005aec <HAL_RCC_GetSysClockFreq+0xac>
    }
#endif /* RCC_CFGR_SWS_HSI48 */
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8005ae6:	4b07      	ldr	r3, [pc, #28]	; (8005b04 <HAL_RCC_GetSysClockFreq+0xc4>)
 8005ae8:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8005aea:	46c0      	nop			; (mov r8, r8)
    }
  }
  return sysclockfreq;
 8005aec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
}
 8005aee:	0018      	movs	r0, r3
 8005af0:	46bd      	mov	sp, r7
 8005af2:	b00f      	add	sp, #60	; 0x3c
 8005af4:	bd90      	pop	{r4, r7, pc}
 8005af6:	46c0      	nop			; (mov r8, r8)
 8005af8:	0800940c 	.word	0x0800940c
 8005afc:	0800941c 	.word	0x0800941c
 8005b00:	40021000 	.word	0x40021000
 8005b04:	007a1200 	.word	0x007a1200

08005b08 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005b08:	b580      	push	{r7, lr}
 8005b0a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8005b0c:	4b02      	ldr	r3, [pc, #8]	; (8005b18 <HAL_RCC_GetHCLKFreq+0x10>)
 8005b0e:	681b      	ldr	r3, [r3, #0]
}
 8005b10:	0018      	movs	r0, r3
 8005b12:	46bd      	mov	sp, r7
 8005b14:	bd80      	pop	{r7, pc}
 8005b16:	46c0      	nop			; (mov r8, r8)
 8005b18:	20000004 	.word	0x20000004

08005b1c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8005b1c:	b580      	push	{r7, lr}
 8005b1e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE) >> RCC_CFGR_PPRE_BITNUMBER]);
 8005b20:	f7ff fff2 	bl	8005b08 <HAL_RCC_GetHCLKFreq>
 8005b24:	0001      	movs	r1, r0
 8005b26:	4b06      	ldr	r3, [pc, #24]	; (8005b40 <HAL_RCC_GetPCLK1Freq+0x24>)
 8005b28:	685b      	ldr	r3, [r3, #4]
 8005b2a:	0a1b      	lsrs	r3, r3, #8
 8005b2c:	2207      	movs	r2, #7
 8005b2e:	4013      	ands	r3, r2
 8005b30:	4a04      	ldr	r2, [pc, #16]	; (8005b44 <HAL_RCC_GetPCLK1Freq+0x28>)
 8005b32:	5cd3      	ldrb	r3, [r2, r3]
 8005b34:	40d9      	lsrs	r1, r3
 8005b36:	000b      	movs	r3, r1
}    
 8005b38:	0018      	movs	r0, r3
 8005b3a:	46bd      	mov	sp, r7
 8005b3c:	bd80      	pop	{r7, pc}
 8005b3e:	46c0      	nop			; (mov r8, r8)
 8005b40:	40021000 	.word	0x40021000
 8005b44:	08009584 	.word	0x08009584

08005b48 <HAL_RCC_GetClockConfig>:
  * contains the current clock configuration.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8005b48:	b580      	push	{r7, lr}
 8005b4a:	b082      	sub	sp, #8
 8005b4c:	af00      	add	r7, sp, #0
 8005b4e:	6078      	str	r0, [r7, #4]
 8005b50:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != NULL);
  assert_param(pFLatency != NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1;
 8005b52:	687b      	ldr	r3, [r7, #4]
 8005b54:	2207      	movs	r2, #7
 8005b56:	601a      	str	r2, [r3, #0]
  
  /* Get the SYSCLK configuration --------------------------------------------*/ 
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8005b58:	4b0e      	ldr	r3, [pc, #56]	; (8005b94 <HAL_RCC_GetClockConfig+0x4c>)
 8005b5a:	685b      	ldr	r3, [r3, #4]
 8005b5c:	2203      	movs	r2, #3
 8005b5e:	401a      	ands	r2, r3
 8005b60:	687b      	ldr	r3, [r7, #4]
 8005b62:	605a      	str	r2, [r3, #4]
  
  /* Get the HCLK configuration ----------------------------------------------*/ 
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE); 
 8005b64:	4b0b      	ldr	r3, [pc, #44]	; (8005b94 <HAL_RCC_GetClockConfig+0x4c>)
 8005b66:	685b      	ldr	r3, [r3, #4]
 8005b68:	22f0      	movs	r2, #240	; 0xf0
 8005b6a:	401a      	ands	r2, r3
 8005b6c:	687b      	ldr	r3, [r7, #4]
 8005b6e:	609a      	str	r2, [r3, #8]
  
  /* Get the APB1 configuration ----------------------------------------------*/ 
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE);   
 8005b70:	4b08      	ldr	r3, [pc, #32]	; (8005b94 <HAL_RCC_GetClockConfig+0x4c>)
 8005b72:	685a      	ldr	r2, [r3, #4]
 8005b74:	23e0      	movs	r3, #224	; 0xe0
 8005b76:	00db      	lsls	r3, r3, #3
 8005b78:	401a      	ands	r2, r3
 8005b7a:	687b      	ldr	r3, [r7, #4]
 8005b7c:	60da      	str	r2, [r3, #12]
  /* Get the Flash Wait State (Latency) configuration ------------------------*/   
  *pFLatency = __HAL_FLASH_GET_LATENCY(); 
 8005b7e:	4b06      	ldr	r3, [pc, #24]	; (8005b98 <HAL_RCC_GetClockConfig+0x50>)
 8005b80:	681b      	ldr	r3, [r3, #0]
 8005b82:	2201      	movs	r2, #1
 8005b84:	401a      	ands	r2, r3
 8005b86:	683b      	ldr	r3, [r7, #0]
 8005b88:	601a      	str	r2, [r3, #0]
}
 8005b8a:	46c0      	nop			; (mov r8, r8)
 8005b8c:	46bd      	mov	sp, r7
 8005b8e:	b002      	add	sp, #8
 8005b90:	bd80      	pop	{r7, pc}
 8005b92:	46c0      	nop			; (mov r8, r8)
 8005b94:	40021000 	.word	0x40021000
 8005b98:	40022000 	.word	0x40022000

08005b9c <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8005b9c:	b580      	push	{r7, lr}
 8005b9e:	b086      	sub	sp, #24
 8005ba0:	af00      	add	r7, sp, #0
 8005ba2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8005ba4:	2300      	movs	r3, #0
 8005ba6:	613b      	str	r3, [r7, #16]
  uint32_t temp_reg = 0U;
 8005ba8:	2300      	movs	r3, #0
 8005baa:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8005bac:	687b      	ldr	r3, [r7, #4]
 8005bae:	681a      	ldr	r2, [r3, #0]
 8005bb0:	2380      	movs	r3, #128	; 0x80
 8005bb2:	025b      	lsls	r3, r3, #9
 8005bb4:	4013      	ands	r3, r2
 8005bb6:	d100      	bne.n	8005bba <HAL_RCCEx_PeriphCLKConfig+0x1e>
 8005bb8:	e08f      	b.n	8005cda <HAL_RCCEx_PeriphCLKConfig+0x13e>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));
    
    FlagStatus       pwrclkchanged = RESET;
 8005bba:	2317      	movs	r3, #23
 8005bbc:	18fb      	adds	r3, r7, r3
 8005bbe:	2200      	movs	r2, #0
 8005bc0:	701a      	strb	r2, [r3, #0]

    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8005bc2:	4b5f      	ldr	r3, [pc, #380]	; (8005d40 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 8005bc4:	69da      	ldr	r2, [r3, #28]
 8005bc6:	2380      	movs	r3, #128	; 0x80
 8005bc8:	055b      	lsls	r3, r3, #21
 8005bca:	4013      	ands	r3, r2
 8005bcc:	d111      	bne.n	8005bf2 <HAL_RCCEx_PeriphCLKConfig+0x56>
    {
    __HAL_RCC_PWR_CLK_ENABLE();
 8005bce:	4b5c      	ldr	r3, [pc, #368]	; (8005d40 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 8005bd0:	69da      	ldr	r2, [r3, #28]
 8005bd2:	4b5b      	ldr	r3, [pc, #364]	; (8005d40 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 8005bd4:	2180      	movs	r1, #128	; 0x80
 8005bd6:	0549      	lsls	r1, r1, #21
 8005bd8:	430a      	orrs	r2, r1
 8005bda:	61da      	str	r2, [r3, #28]
 8005bdc:	4b58      	ldr	r3, [pc, #352]	; (8005d40 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 8005bde:	69da      	ldr	r2, [r3, #28]
 8005be0:	2380      	movs	r3, #128	; 0x80
 8005be2:	055b      	lsls	r3, r3, #21
 8005be4:	4013      	ands	r3, r2
 8005be6:	60bb      	str	r3, [r7, #8]
 8005be8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8005bea:	2317      	movs	r3, #23
 8005bec:	18fb      	adds	r3, r7, r3
 8005bee:	2201      	movs	r2, #1
 8005bf0:	701a      	strb	r2, [r3, #0]
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005bf2:	4b54      	ldr	r3, [pc, #336]	; (8005d44 <HAL_RCCEx_PeriphCLKConfig+0x1a8>)
 8005bf4:	681a      	ldr	r2, [r3, #0]
 8005bf6:	2380      	movs	r3, #128	; 0x80
 8005bf8:	005b      	lsls	r3, r3, #1
 8005bfa:	4013      	ands	r3, r2
 8005bfc:	d11a      	bne.n	8005c34 <HAL_RCCEx_PeriphCLKConfig+0x98>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8005bfe:	4b51      	ldr	r3, [pc, #324]	; (8005d44 <HAL_RCCEx_PeriphCLKConfig+0x1a8>)
 8005c00:	681a      	ldr	r2, [r3, #0]
 8005c02:	4b50      	ldr	r3, [pc, #320]	; (8005d44 <HAL_RCCEx_PeriphCLKConfig+0x1a8>)
 8005c04:	2180      	movs	r1, #128	; 0x80
 8005c06:	0049      	lsls	r1, r1, #1
 8005c08:	430a      	orrs	r2, r1
 8005c0a:	601a      	str	r2, [r3, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8005c0c:	f7fe fbda 	bl	80043c4 <HAL_GetTick>
 8005c10:	0003      	movs	r3, r0
 8005c12:	613b      	str	r3, [r7, #16]
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005c14:	e008      	b.n	8005c28 <HAL_RCCEx_PeriphCLKConfig+0x8c>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005c16:	f7fe fbd5 	bl	80043c4 <HAL_GetTick>
 8005c1a:	0002      	movs	r2, r0
 8005c1c:	693b      	ldr	r3, [r7, #16]
 8005c1e:	1ad3      	subs	r3, r2, r3
 8005c20:	2b64      	cmp	r3, #100	; 0x64
 8005c22:	d901      	bls.n	8005c28 <HAL_RCCEx_PeriphCLKConfig+0x8c>
        {
          return HAL_TIMEOUT;
 8005c24:	2303      	movs	r3, #3
 8005c26:	e087      	b.n	8005d38 <HAL_RCCEx_PeriphCLKConfig+0x19c>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005c28:	4b46      	ldr	r3, [pc, #280]	; (8005d44 <HAL_RCCEx_PeriphCLKConfig+0x1a8>)
 8005c2a:	681a      	ldr	r2, [r3, #0]
 8005c2c:	2380      	movs	r3, #128	; 0x80
 8005c2e:	005b      	lsls	r3, r3, #1
 8005c30:	4013      	ands	r3, r2
 8005c32:	d0f0      	beq.n	8005c16 <HAL_RCCEx_PeriphCLKConfig+0x7a>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8005c34:	4b42      	ldr	r3, [pc, #264]	; (8005d40 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 8005c36:	6a1a      	ldr	r2, [r3, #32]
 8005c38:	23c0      	movs	r3, #192	; 0xc0
 8005c3a:	009b      	lsls	r3, r3, #2
 8005c3c:	4013      	ands	r3, r2
 8005c3e:	60fb      	str	r3, [r7, #12]
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8005c40:	68fb      	ldr	r3, [r7, #12]
 8005c42:	2b00      	cmp	r3, #0
 8005c44:	d034      	beq.n	8005cb0 <HAL_RCCEx_PeriphCLKConfig+0x114>
 8005c46:	687b      	ldr	r3, [r7, #4]
 8005c48:	685a      	ldr	r2, [r3, #4]
 8005c4a:	23c0      	movs	r3, #192	; 0xc0
 8005c4c:	009b      	lsls	r3, r3, #2
 8005c4e:	4013      	ands	r3, r2
 8005c50:	68fa      	ldr	r2, [r7, #12]
 8005c52:	429a      	cmp	r2, r3
 8005c54:	d02c      	beq.n	8005cb0 <HAL_RCCEx_PeriphCLKConfig+0x114>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8005c56:	4b3a      	ldr	r3, [pc, #232]	; (8005d40 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 8005c58:	6a1b      	ldr	r3, [r3, #32]
 8005c5a:	4a3b      	ldr	r2, [pc, #236]	; (8005d48 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8005c5c:	4013      	ands	r3, r2
 8005c5e:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8005c60:	4b37      	ldr	r3, [pc, #220]	; (8005d40 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 8005c62:	6a1a      	ldr	r2, [r3, #32]
 8005c64:	4b36      	ldr	r3, [pc, #216]	; (8005d40 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 8005c66:	2180      	movs	r1, #128	; 0x80
 8005c68:	0249      	lsls	r1, r1, #9
 8005c6a:	430a      	orrs	r2, r1
 8005c6c:	621a      	str	r2, [r3, #32]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8005c6e:	4b34      	ldr	r3, [pc, #208]	; (8005d40 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 8005c70:	6a1a      	ldr	r2, [r3, #32]
 8005c72:	4b33      	ldr	r3, [pc, #204]	; (8005d40 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 8005c74:	4935      	ldr	r1, [pc, #212]	; (8005d4c <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 8005c76:	400a      	ands	r2, r1
 8005c78:	621a      	str	r2, [r3, #32]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8005c7a:	4b31      	ldr	r3, [pc, #196]	; (8005d40 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 8005c7c:	68fa      	ldr	r2, [r7, #12]
 8005c7e:	621a      	str	r2, [r3, #32]
      
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8005c80:	68fb      	ldr	r3, [r7, #12]
 8005c82:	2201      	movs	r2, #1
 8005c84:	4013      	ands	r3, r2
 8005c86:	d013      	beq.n	8005cb0 <HAL_RCCEx_PeriphCLKConfig+0x114>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005c88:	f7fe fb9c 	bl	80043c4 <HAL_GetTick>
 8005c8c:	0003      	movs	r3, r0
 8005c8e:	613b      	str	r3, [r7, #16]
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005c90:	e009      	b.n	8005ca6 <HAL_RCCEx_PeriphCLKConfig+0x10a>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005c92:	f7fe fb97 	bl	80043c4 <HAL_GetTick>
 8005c96:	0002      	movs	r2, r0
 8005c98:	693b      	ldr	r3, [r7, #16]
 8005c9a:	1ad3      	subs	r3, r2, r3
 8005c9c:	4a2c      	ldr	r2, [pc, #176]	; (8005d50 <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 8005c9e:	4293      	cmp	r3, r2
 8005ca0:	d901      	bls.n	8005ca6 <HAL_RCCEx_PeriphCLKConfig+0x10a>
          {
            return HAL_TIMEOUT;
 8005ca2:	2303      	movs	r3, #3
 8005ca4:	e048      	b.n	8005d38 <HAL_RCCEx_PeriphCLKConfig+0x19c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005ca6:	4b26      	ldr	r3, [pc, #152]	; (8005d40 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 8005ca8:	6a1b      	ldr	r3, [r3, #32]
 8005caa:	2202      	movs	r2, #2
 8005cac:	4013      	ands	r3, r2
 8005cae:	d0f0      	beq.n	8005c92 <HAL_RCCEx_PeriphCLKConfig+0xf6>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8005cb0:	4b23      	ldr	r3, [pc, #140]	; (8005d40 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 8005cb2:	6a1b      	ldr	r3, [r3, #32]
 8005cb4:	4a24      	ldr	r2, [pc, #144]	; (8005d48 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8005cb6:	4013      	ands	r3, r2
 8005cb8:	0019      	movs	r1, r3
 8005cba:	687b      	ldr	r3, [r7, #4]
 8005cbc:	685a      	ldr	r2, [r3, #4]
 8005cbe:	4b20      	ldr	r3, [pc, #128]	; (8005d40 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 8005cc0:	430a      	orrs	r2, r1
 8005cc2:	621a      	str	r2, [r3, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8005cc4:	2317      	movs	r3, #23
 8005cc6:	18fb      	adds	r3, r7, r3
 8005cc8:	781b      	ldrb	r3, [r3, #0]
 8005cca:	2b01      	cmp	r3, #1
 8005ccc:	d105      	bne.n	8005cda <HAL_RCCEx_PeriphCLKConfig+0x13e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005cce:	4b1c      	ldr	r3, [pc, #112]	; (8005d40 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 8005cd0:	69da      	ldr	r2, [r3, #28]
 8005cd2:	4b1b      	ldr	r3, [pc, #108]	; (8005d40 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 8005cd4:	491f      	ldr	r1, [pc, #124]	; (8005d54 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8005cd6:	400a      	ands	r2, r1
 8005cd8:	61da      	str	r2, [r3, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8005cda:	687b      	ldr	r3, [r7, #4]
 8005cdc:	681b      	ldr	r3, [r3, #0]
 8005cde:	2201      	movs	r2, #1
 8005ce0:	4013      	ands	r3, r2
 8005ce2:	d009      	beq.n	8005cf8 <HAL_RCCEx_PeriphCLKConfig+0x15c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8005ce4:	4b16      	ldr	r3, [pc, #88]	; (8005d40 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 8005ce6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005ce8:	2203      	movs	r2, #3
 8005cea:	4393      	bics	r3, r2
 8005cec:	0019      	movs	r1, r3
 8005cee:	687b      	ldr	r3, [r7, #4]
 8005cf0:	689a      	ldr	r2, [r3, #8]
 8005cf2:	4b13      	ldr	r3, [pc, #76]	; (8005d40 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 8005cf4:	430a      	orrs	r2, r1
 8005cf6:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
  }
#endif /* STM32F091xC || STM32F098xx */  

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8005cf8:	687b      	ldr	r3, [r7, #4]
 8005cfa:	681b      	ldr	r3, [r3, #0]
 8005cfc:	2220      	movs	r2, #32
 8005cfe:	4013      	ands	r3, r2
 8005d00:	d009      	beq.n	8005d16 <HAL_RCCEx_PeriphCLKConfig+0x17a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8005d02:	4b0f      	ldr	r3, [pc, #60]	; (8005d40 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 8005d04:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005d06:	2210      	movs	r2, #16
 8005d08:	4393      	bics	r3, r2
 8005d0a:	0019      	movs	r1, r3
 8005d0c:	687b      	ldr	r3, [r7, #4]
 8005d0e:	68da      	ldr	r2, [r3, #12]
 8005d10:	4b0b      	ldr	r3, [pc, #44]	; (8005d40 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 8005d12:	430a      	orrs	r2, r1
 8005d14:	631a      	str	r2, [r3, #48]	; 0x30
#if defined(STM32F042x6) || defined(STM32F048xx)\
 || defined(STM32F051x8) || defined(STM32F058xx)\
 || defined(STM32F071xB) || defined(STM32F072xB) || defined(STM32F078xx)\
 || defined(STM32F091xC) || defined(STM32F098xx)
  /*------------------------------ CEC clock Configuration -------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8005d16:	687b      	ldr	r3, [r7, #4]
 8005d18:	681a      	ldr	r2, [r3, #0]
 8005d1a:	2380      	movs	r3, #128	; 0x80
 8005d1c:	00db      	lsls	r3, r3, #3
 8005d1e:	4013      	ands	r3, r2
 8005d20:	d009      	beq.n	8005d36 <HAL_RCCEx_PeriphCLKConfig+0x19a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8005d22:	4b07      	ldr	r3, [pc, #28]	; (8005d40 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 8005d24:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005d26:	2240      	movs	r2, #64	; 0x40
 8005d28:	4393      	bics	r3, r2
 8005d2a:	0019      	movs	r1, r3
 8005d2c:	687b      	ldr	r3, [r7, #4]
 8005d2e:	691a      	ldr	r2, [r3, #16]
 8005d30:	4b03      	ldr	r3, [pc, #12]	; (8005d40 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 8005d32:	430a      	orrs	r2, r1
 8005d34:	631a      	str	r2, [r3, #48]	; 0x30
#endif /* STM32F042x6 || STM32F048xx ||                */
       /* STM32F051x8 || STM32F058xx ||                */
       /* STM32F071xB || STM32F072xB || STM32F078xx || */
       /* STM32F091xC || STM32F098xx */
  
  return HAL_OK;
 8005d36:	2300      	movs	r3, #0
}
 8005d38:	0018      	movs	r0, r3
 8005d3a:	46bd      	mov	sp, r7
 8005d3c:	b006      	add	sp, #24
 8005d3e:	bd80      	pop	{r7, pc}
 8005d40:	40021000 	.word	0x40021000
 8005d44:	40007000 	.word	0x40007000
 8005d48:	fffffcff 	.word	0xfffffcff
 8005d4c:	fffeffff 	.word	0xfffeffff
 8005d50:	00001388 	.word	0x00001388
 8005d54:	efffffff 	.word	0xefffffff

08005d58 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8005d58:	b580      	push	{r7, lr}
 8005d5a:	b082      	sub	sp, #8
 8005d5c:	af00      	add	r7, sp, #0
 8005d5e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005d60:	687b      	ldr	r3, [r7, #4]
 8005d62:	2b00      	cmp	r3, #0
 8005d64:	d101      	bne.n	8005d6a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8005d66:	2301      	movs	r3, #1
 8005d68:	e01e      	b.n	8005da8 <HAL_TIM_Base_Init+0x50>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005d6a:	687b      	ldr	r3, [r7, #4]
 8005d6c:	223d      	movs	r2, #61	; 0x3d
 8005d6e:	5c9b      	ldrb	r3, [r3, r2]
 8005d70:	b2db      	uxtb	r3, r3
 8005d72:	2b00      	cmp	r3, #0
 8005d74:	d107      	bne.n	8005d86 <HAL_TIM_Base_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005d76:	687b      	ldr	r3, [r7, #4]
 8005d78:	223c      	movs	r2, #60	; 0x3c
 8005d7a:	2100      	movs	r1, #0
 8005d7c:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8005d7e:	687b      	ldr	r3, [r7, #4]
 8005d80:	0018      	movs	r0, r3
 8005d82:	f7fe f8f7 	bl	8003f74 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005d86:	687b      	ldr	r3, [r7, #4]
 8005d88:	223d      	movs	r2, #61	; 0x3d
 8005d8a:	2102      	movs	r1, #2
 8005d8c:	5499      	strb	r1, [r3, r2]

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005d8e:	687b      	ldr	r3, [r7, #4]
 8005d90:	681a      	ldr	r2, [r3, #0]
 8005d92:	687b      	ldr	r3, [r7, #4]
 8005d94:	3304      	adds	r3, #4
 8005d96:	0019      	movs	r1, r3
 8005d98:	0010      	movs	r0, r2
 8005d9a:	f000 fa91 	bl	80062c0 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005d9e:	687b      	ldr	r3, [r7, #4]
 8005da0:	223d      	movs	r2, #61	; 0x3d
 8005da2:	2101      	movs	r1, #1
 8005da4:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8005da6:	2300      	movs	r3, #0
}
 8005da8:	0018      	movs	r0, r3
 8005daa:	46bd      	mov	sp, r7
 8005dac:	b002      	add	sp, #8
 8005dae:	bd80      	pop	{r7, pc}

08005db0 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8005db0:	b580      	push	{r7, lr}
 8005db2:	b084      	sub	sp, #16
 8005db4:	af00      	add	r7, sp, #0
 8005db6:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8005db8:	687b      	ldr	r3, [r7, #4]
 8005dba:	681b      	ldr	r3, [r3, #0]
 8005dbc:	68da      	ldr	r2, [r3, #12]
 8005dbe:	687b      	ldr	r3, [r7, #4]
 8005dc0:	681b      	ldr	r3, [r3, #0]
 8005dc2:	2101      	movs	r1, #1
 8005dc4:	430a      	orrs	r2, r1
 8005dc6:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005dc8:	687b      	ldr	r3, [r7, #4]
 8005dca:	681b      	ldr	r3, [r3, #0]
 8005dcc:	689b      	ldr	r3, [r3, #8]
 8005dce:	2207      	movs	r2, #7
 8005dd0:	4013      	ands	r3, r2
 8005dd2:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005dd4:	68fb      	ldr	r3, [r7, #12]
 8005dd6:	2b06      	cmp	r3, #6
 8005dd8:	d007      	beq.n	8005dea <HAL_TIM_Base_Start_IT+0x3a>
  {
    __HAL_TIM_ENABLE(htim);
 8005dda:	687b      	ldr	r3, [r7, #4]
 8005ddc:	681b      	ldr	r3, [r3, #0]
 8005dde:	681a      	ldr	r2, [r3, #0]
 8005de0:	687b      	ldr	r3, [r7, #4]
 8005de2:	681b      	ldr	r3, [r3, #0]
 8005de4:	2101      	movs	r1, #1
 8005de6:	430a      	orrs	r2, r1
 8005de8:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8005dea:	2300      	movs	r3, #0
}
 8005dec:	0018      	movs	r0, r3
 8005dee:	46bd      	mov	sp, r7
 8005df0:	b004      	add	sp, #16
 8005df2:	bd80      	pop	{r7, pc}

08005df4 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8005df4:	b580      	push	{r7, lr}
 8005df6:	b082      	sub	sp, #8
 8005df8:	af00      	add	r7, sp, #0
 8005dfa:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005dfc:	687b      	ldr	r3, [r7, #4]
 8005dfe:	2b00      	cmp	r3, #0
 8005e00:	d101      	bne.n	8005e06 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8005e02:	2301      	movs	r3, #1
 8005e04:	e01e      	b.n	8005e44 <HAL_TIM_PWM_Init+0x50>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005e06:	687b      	ldr	r3, [r7, #4]
 8005e08:	223d      	movs	r2, #61	; 0x3d
 8005e0a:	5c9b      	ldrb	r3, [r3, r2]
 8005e0c:	b2db      	uxtb	r3, r3
 8005e0e:	2b00      	cmp	r3, #0
 8005e10:	d107      	bne.n	8005e22 <HAL_TIM_PWM_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005e12:	687b      	ldr	r3, [r7, #4]
 8005e14:	223c      	movs	r2, #60	; 0x3c
 8005e16:	2100      	movs	r1, #0
 8005e18:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8005e1a:	687b      	ldr	r3, [r7, #4]
 8005e1c:	0018      	movs	r0, r3
 8005e1e:	f7fe f879 	bl	8003f14 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005e22:	687b      	ldr	r3, [r7, #4]
 8005e24:	223d      	movs	r2, #61	; 0x3d
 8005e26:	2102      	movs	r1, #2
 8005e28:	5499      	strb	r1, [r3, r2]

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005e2a:	687b      	ldr	r3, [r7, #4]
 8005e2c:	681a      	ldr	r2, [r3, #0]
 8005e2e:	687b      	ldr	r3, [r7, #4]
 8005e30:	3304      	adds	r3, #4
 8005e32:	0019      	movs	r1, r3
 8005e34:	0010      	movs	r0, r2
 8005e36:	f000 fa43 	bl	80062c0 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005e3a:	687b      	ldr	r3, [r7, #4]
 8005e3c:	223d      	movs	r2, #61	; 0x3d
 8005e3e:	2101      	movs	r1, #1
 8005e40:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8005e42:	2300      	movs	r3, #0
}
 8005e44:	0018      	movs	r0, r3
 8005e46:	46bd      	mov	sp, r7
 8005e48:	b002      	add	sp, #8
 8005e4a:	bd80      	pop	{r7, pc}

08005e4c <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8005e4c:	b580      	push	{r7, lr}
 8005e4e:	b084      	sub	sp, #16
 8005e50:	af00      	add	r7, sp, #0
 8005e52:	6078      	str	r0, [r7, #4]
 8005e54:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8005e56:	687b      	ldr	r3, [r7, #4]
 8005e58:	681b      	ldr	r3, [r3, #0]
 8005e5a:	6839      	ldr	r1, [r7, #0]
 8005e5c:	2201      	movs	r2, #1
 8005e5e:	0018      	movs	r0, r3
 8005e60:	f000 fcaa 	bl	80067b8 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8005e64:	687b      	ldr	r3, [r7, #4]
 8005e66:	681b      	ldr	r3, [r3, #0]
 8005e68:	4a1a      	ldr	r2, [pc, #104]	; (8005ed4 <HAL_TIM_PWM_Start+0x88>)
 8005e6a:	4293      	cmp	r3, r2
 8005e6c:	d00e      	beq.n	8005e8c <HAL_TIM_PWM_Start+0x40>
 8005e6e:	687b      	ldr	r3, [r7, #4]
 8005e70:	681b      	ldr	r3, [r3, #0]
 8005e72:	4a19      	ldr	r2, [pc, #100]	; (8005ed8 <HAL_TIM_PWM_Start+0x8c>)
 8005e74:	4293      	cmp	r3, r2
 8005e76:	d009      	beq.n	8005e8c <HAL_TIM_PWM_Start+0x40>
 8005e78:	687b      	ldr	r3, [r7, #4]
 8005e7a:	681b      	ldr	r3, [r3, #0]
 8005e7c:	4a17      	ldr	r2, [pc, #92]	; (8005edc <HAL_TIM_PWM_Start+0x90>)
 8005e7e:	4293      	cmp	r3, r2
 8005e80:	d004      	beq.n	8005e8c <HAL_TIM_PWM_Start+0x40>
 8005e82:	687b      	ldr	r3, [r7, #4]
 8005e84:	681b      	ldr	r3, [r3, #0]
 8005e86:	4a16      	ldr	r2, [pc, #88]	; (8005ee0 <HAL_TIM_PWM_Start+0x94>)
 8005e88:	4293      	cmp	r3, r2
 8005e8a:	d101      	bne.n	8005e90 <HAL_TIM_PWM_Start+0x44>
 8005e8c:	2301      	movs	r3, #1
 8005e8e:	e000      	b.n	8005e92 <HAL_TIM_PWM_Start+0x46>
 8005e90:	2300      	movs	r3, #0
 8005e92:	2b00      	cmp	r3, #0
 8005e94:	d008      	beq.n	8005ea8 <HAL_TIM_PWM_Start+0x5c>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8005e96:	687b      	ldr	r3, [r7, #4]
 8005e98:	681b      	ldr	r3, [r3, #0]
 8005e9a:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005e9c:	687b      	ldr	r3, [r7, #4]
 8005e9e:	681b      	ldr	r3, [r3, #0]
 8005ea0:	2180      	movs	r1, #128	; 0x80
 8005ea2:	0209      	lsls	r1, r1, #8
 8005ea4:	430a      	orrs	r2, r1
 8005ea6:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005ea8:	687b      	ldr	r3, [r7, #4]
 8005eaa:	681b      	ldr	r3, [r3, #0]
 8005eac:	689b      	ldr	r3, [r3, #8]
 8005eae:	2207      	movs	r2, #7
 8005eb0:	4013      	ands	r3, r2
 8005eb2:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005eb4:	68fb      	ldr	r3, [r7, #12]
 8005eb6:	2b06      	cmp	r3, #6
 8005eb8:	d007      	beq.n	8005eca <HAL_TIM_PWM_Start+0x7e>
  {
    __HAL_TIM_ENABLE(htim);
 8005eba:	687b      	ldr	r3, [r7, #4]
 8005ebc:	681b      	ldr	r3, [r3, #0]
 8005ebe:	681a      	ldr	r2, [r3, #0]
 8005ec0:	687b      	ldr	r3, [r7, #4]
 8005ec2:	681b      	ldr	r3, [r3, #0]
 8005ec4:	2101      	movs	r1, #1
 8005ec6:	430a      	orrs	r2, r1
 8005ec8:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8005eca:	2300      	movs	r3, #0
}
 8005ecc:	0018      	movs	r0, r3
 8005ece:	46bd      	mov	sp, r7
 8005ed0:	b004      	add	sp, #16
 8005ed2:	bd80      	pop	{r7, pc}
 8005ed4:	40012c00 	.word	0x40012c00
 8005ed8:	40014000 	.word	0x40014000
 8005edc:	40014400 	.word	0x40014400
 8005ee0:	40014800 	.word	0x40014800

08005ee4 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8005ee4:	b580      	push	{r7, lr}
 8005ee6:	b082      	sub	sp, #8
 8005ee8:	af00      	add	r7, sp, #0
 8005eea:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8005eec:	687b      	ldr	r3, [r7, #4]
 8005eee:	681b      	ldr	r3, [r3, #0]
 8005ef0:	691b      	ldr	r3, [r3, #16]
 8005ef2:	2202      	movs	r2, #2
 8005ef4:	4013      	ands	r3, r2
 8005ef6:	2b02      	cmp	r3, #2
 8005ef8:	d124      	bne.n	8005f44 <HAL_TIM_IRQHandler+0x60>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8005efa:	687b      	ldr	r3, [r7, #4]
 8005efc:	681b      	ldr	r3, [r3, #0]
 8005efe:	68db      	ldr	r3, [r3, #12]
 8005f00:	2202      	movs	r2, #2
 8005f02:	4013      	ands	r3, r2
 8005f04:	2b02      	cmp	r3, #2
 8005f06:	d11d      	bne.n	8005f44 <HAL_TIM_IRQHandler+0x60>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8005f08:	687b      	ldr	r3, [r7, #4]
 8005f0a:	681b      	ldr	r3, [r3, #0]
 8005f0c:	2203      	movs	r2, #3
 8005f0e:	4252      	negs	r2, r2
 8005f10:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8005f12:	687b      	ldr	r3, [r7, #4]
 8005f14:	2201      	movs	r2, #1
 8005f16:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8005f18:	687b      	ldr	r3, [r7, #4]
 8005f1a:	681b      	ldr	r3, [r3, #0]
 8005f1c:	699b      	ldr	r3, [r3, #24]
 8005f1e:	2203      	movs	r2, #3
 8005f20:	4013      	ands	r3, r2
 8005f22:	d004      	beq.n	8005f2e <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8005f24:	687b      	ldr	r3, [r7, #4]
 8005f26:	0018      	movs	r0, r3
 8005f28:	f000 f9b2 	bl	8006290 <HAL_TIM_IC_CaptureCallback>
 8005f2c:	e007      	b.n	8005f3e <HAL_TIM_IRQHandler+0x5a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8005f2e:	687b      	ldr	r3, [r7, #4]
 8005f30:	0018      	movs	r0, r3
 8005f32:	f000 f9a5 	bl	8006280 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005f36:	687b      	ldr	r3, [r7, #4]
 8005f38:	0018      	movs	r0, r3
 8005f3a:	f000 f9b1 	bl	80062a0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005f3e:	687b      	ldr	r3, [r7, #4]
 8005f40:	2200      	movs	r2, #0
 8005f42:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8005f44:	687b      	ldr	r3, [r7, #4]
 8005f46:	681b      	ldr	r3, [r3, #0]
 8005f48:	691b      	ldr	r3, [r3, #16]
 8005f4a:	2204      	movs	r2, #4
 8005f4c:	4013      	ands	r3, r2
 8005f4e:	2b04      	cmp	r3, #4
 8005f50:	d125      	bne.n	8005f9e <HAL_TIM_IRQHandler+0xba>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8005f52:	687b      	ldr	r3, [r7, #4]
 8005f54:	681b      	ldr	r3, [r3, #0]
 8005f56:	68db      	ldr	r3, [r3, #12]
 8005f58:	2204      	movs	r2, #4
 8005f5a:	4013      	ands	r3, r2
 8005f5c:	2b04      	cmp	r3, #4
 8005f5e:	d11e      	bne.n	8005f9e <HAL_TIM_IRQHandler+0xba>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8005f60:	687b      	ldr	r3, [r7, #4]
 8005f62:	681b      	ldr	r3, [r3, #0]
 8005f64:	2205      	movs	r2, #5
 8005f66:	4252      	negs	r2, r2
 8005f68:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8005f6a:	687b      	ldr	r3, [r7, #4]
 8005f6c:	2202      	movs	r2, #2
 8005f6e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8005f70:	687b      	ldr	r3, [r7, #4]
 8005f72:	681b      	ldr	r3, [r3, #0]
 8005f74:	699a      	ldr	r2, [r3, #24]
 8005f76:	23c0      	movs	r3, #192	; 0xc0
 8005f78:	009b      	lsls	r3, r3, #2
 8005f7a:	4013      	ands	r3, r2
 8005f7c:	d004      	beq.n	8005f88 <HAL_TIM_IRQHandler+0xa4>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005f7e:	687b      	ldr	r3, [r7, #4]
 8005f80:	0018      	movs	r0, r3
 8005f82:	f000 f985 	bl	8006290 <HAL_TIM_IC_CaptureCallback>
 8005f86:	e007      	b.n	8005f98 <HAL_TIM_IRQHandler+0xb4>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005f88:	687b      	ldr	r3, [r7, #4]
 8005f8a:	0018      	movs	r0, r3
 8005f8c:	f000 f978 	bl	8006280 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005f90:	687b      	ldr	r3, [r7, #4]
 8005f92:	0018      	movs	r0, r3
 8005f94:	f000 f984 	bl	80062a0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005f98:	687b      	ldr	r3, [r7, #4]
 8005f9a:	2200      	movs	r2, #0
 8005f9c:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8005f9e:	687b      	ldr	r3, [r7, #4]
 8005fa0:	681b      	ldr	r3, [r3, #0]
 8005fa2:	691b      	ldr	r3, [r3, #16]
 8005fa4:	2208      	movs	r2, #8
 8005fa6:	4013      	ands	r3, r2
 8005fa8:	2b08      	cmp	r3, #8
 8005faa:	d124      	bne.n	8005ff6 <HAL_TIM_IRQHandler+0x112>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8005fac:	687b      	ldr	r3, [r7, #4]
 8005fae:	681b      	ldr	r3, [r3, #0]
 8005fb0:	68db      	ldr	r3, [r3, #12]
 8005fb2:	2208      	movs	r2, #8
 8005fb4:	4013      	ands	r3, r2
 8005fb6:	2b08      	cmp	r3, #8
 8005fb8:	d11d      	bne.n	8005ff6 <HAL_TIM_IRQHandler+0x112>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8005fba:	687b      	ldr	r3, [r7, #4]
 8005fbc:	681b      	ldr	r3, [r3, #0]
 8005fbe:	2209      	movs	r2, #9
 8005fc0:	4252      	negs	r2, r2
 8005fc2:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8005fc4:	687b      	ldr	r3, [r7, #4]
 8005fc6:	2204      	movs	r2, #4
 8005fc8:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8005fca:	687b      	ldr	r3, [r7, #4]
 8005fcc:	681b      	ldr	r3, [r3, #0]
 8005fce:	69db      	ldr	r3, [r3, #28]
 8005fd0:	2203      	movs	r2, #3
 8005fd2:	4013      	ands	r3, r2
 8005fd4:	d004      	beq.n	8005fe0 <HAL_TIM_IRQHandler+0xfc>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005fd6:	687b      	ldr	r3, [r7, #4]
 8005fd8:	0018      	movs	r0, r3
 8005fda:	f000 f959 	bl	8006290 <HAL_TIM_IC_CaptureCallback>
 8005fde:	e007      	b.n	8005ff0 <HAL_TIM_IRQHandler+0x10c>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005fe0:	687b      	ldr	r3, [r7, #4]
 8005fe2:	0018      	movs	r0, r3
 8005fe4:	f000 f94c 	bl	8006280 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005fe8:	687b      	ldr	r3, [r7, #4]
 8005fea:	0018      	movs	r0, r3
 8005fec:	f000 f958 	bl	80062a0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005ff0:	687b      	ldr	r3, [r7, #4]
 8005ff2:	2200      	movs	r2, #0
 8005ff4:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8005ff6:	687b      	ldr	r3, [r7, #4]
 8005ff8:	681b      	ldr	r3, [r3, #0]
 8005ffa:	691b      	ldr	r3, [r3, #16]
 8005ffc:	2210      	movs	r2, #16
 8005ffe:	4013      	ands	r3, r2
 8006000:	2b10      	cmp	r3, #16
 8006002:	d125      	bne.n	8006050 <HAL_TIM_IRQHandler+0x16c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8006004:	687b      	ldr	r3, [r7, #4]
 8006006:	681b      	ldr	r3, [r3, #0]
 8006008:	68db      	ldr	r3, [r3, #12]
 800600a:	2210      	movs	r2, #16
 800600c:	4013      	ands	r3, r2
 800600e:	2b10      	cmp	r3, #16
 8006010:	d11e      	bne.n	8006050 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8006012:	687b      	ldr	r3, [r7, #4]
 8006014:	681b      	ldr	r3, [r3, #0]
 8006016:	2211      	movs	r2, #17
 8006018:	4252      	negs	r2, r2
 800601a:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800601c:	687b      	ldr	r3, [r7, #4]
 800601e:	2208      	movs	r2, #8
 8006020:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8006022:	687b      	ldr	r3, [r7, #4]
 8006024:	681b      	ldr	r3, [r3, #0]
 8006026:	69da      	ldr	r2, [r3, #28]
 8006028:	23c0      	movs	r3, #192	; 0xc0
 800602a:	009b      	lsls	r3, r3, #2
 800602c:	4013      	ands	r3, r2
 800602e:	d004      	beq.n	800603a <HAL_TIM_IRQHandler+0x156>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006030:	687b      	ldr	r3, [r7, #4]
 8006032:	0018      	movs	r0, r3
 8006034:	f000 f92c 	bl	8006290 <HAL_TIM_IC_CaptureCallback>
 8006038:	e007      	b.n	800604a <HAL_TIM_IRQHandler+0x166>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800603a:	687b      	ldr	r3, [r7, #4]
 800603c:	0018      	movs	r0, r3
 800603e:	f000 f91f 	bl	8006280 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006042:	687b      	ldr	r3, [r7, #4]
 8006044:	0018      	movs	r0, r3
 8006046:	f000 f92b 	bl	80062a0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800604a:	687b      	ldr	r3, [r7, #4]
 800604c:	2200      	movs	r2, #0
 800604e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8006050:	687b      	ldr	r3, [r7, #4]
 8006052:	681b      	ldr	r3, [r3, #0]
 8006054:	691b      	ldr	r3, [r3, #16]
 8006056:	2201      	movs	r2, #1
 8006058:	4013      	ands	r3, r2
 800605a:	2b01      	cmp	r3, #1
 800605c:	d10f      	bne.n	800607e <HAL_TIM_IRQHandler+0x19a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800605e:	687b      	ldr	r3, [r7, #4]
 8006060:	681b      	ldr	r3, [r3, #0]
 8006062:	68db      	ldr	r3, [r3, #12]
 8006064:	2201      	movs	r2, #1
 8006066:	4013      	ands	r3, r2
 8006068:	2b01      	cmp	r3, #1
 800606a:	d108      	bne.n	800607e <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800606c:	687b      	ldr	r3, [r7, #4]
 800606e:	681b      	ldr	r3, [r3, #0]
 8006070:	2202      	movs	r2, #2
 8006072:	4252      	negs	r2, r2
 8006074:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8006076:	687b      	ldr	r3, [r7, #4]
 8006078:	0018      	movs	r0, r3
 800607a:	f7fd fec9 	bl	8003e10 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800607e:	687b      	ldr	r3, [r7, #4]
 8006080:	681b      	ldr	r3, [r3, #0]
 8006082:	691b      	ldr	r3, [r3, #16]
 8006084:	2280      	movs	r2, #128	; 0x80
 8006086:	4013      	ands	r3, r2
 8006088:	2b80      	cmp	r3, #128	; 0x80
 800608a:	d10f      	bne.n	80060ac <HAL_TIM_IRQHandler+0x1c8>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800608c:	687b      	ldr	r3, [r7, #4]
 800608e:	681b      	ldr	r3, [r3, #0]
 8006090:	68db      	ldr	r3, [r3, #12]
 8006092:	2280      	movs	r2, #128	; 0x80
 8006094:	4013      	ands	r3, r2
 8006096:	2b80      	cmp	r3, #128	; 0x80
 8006098:	d108      	bne.n	80060ac <HAL_TIM_IRQHandler+0x1c8>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800609a:	687b      	ldr	r3, [r7, #4]
 800609c:	681b      	ldr	r3, [r3, #0]
 800609e:	2281      	movs	r2, #129	; 0x81
 80060a0:	4252      	negs	r2, r2
 80060a2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80060a4:	687b      	ldr	r3, [r7, #4]
 80060a6:	0018      	movs	r0, r3
 80060a8:	f000 fc6e 	bl	8006988 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80060ac:	687b      	ldr	r3, [r7, #4]
 80060ae:	681b      	ldr	r3, [r3, #0]
 80060b0:	691b      	ldr	r3, [r3, #16]
 80060b2:	2240      	movs	r2, #64	; 0x40
 80060b4:	4013      	ands	r3, r2
 80060b6:	2b40      	cmp	r3, #64	; 0x40
 80060b8:	d10f      	bne.n	80060da <HAL_TIM_IRQHandler+0x1f6>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80060ba:	687b      	ldr	r3, [r7, #4]
 80060bc:	681b      	ldr	r3, [r3, #0]
 80060be:	68db      	ldr	r3, [r3, #12]
 80060c0:	2240      	movs	r2, #64	; 0x40
 80060c2:	4013      	ands	r3, r2
 80060c4:	2b40      	cmp	r3, #64	; 0x40
 80060c6:	d108      	bne.n	80060da <HAL_TIM_IRQHandler+0x1f6>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80060c8:	687b      	ldr	r3, [r7, #4]
 80060ca:	681b      	ldr	r3, [r3, #0]
 80060cc:	2241      	movs	r2, #65	; 0x41
 80060ce:	4252      	negs	r2, r2
 80060d0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80060d2:	687b      	ldr	r3, [r7, #4]
 80060d4:	0018      	movs	r0, r3
 80060d6:	f000 f8eb 	bl	80062b0 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80060da:	687b      	ldr	r3, [r7, #4]
 80060dc:	681b      	ldr	r3, [r3, #0]
 80060de:	691b      	ldr	r3, [r3, #16]
 80060e0:	2220      	movs	r2, #32
 80060e2:	4013      	ands	r3, r2
 80060e4:	2b20      	cmp	r3, #32
 80060e6:	d10f      	bne.n	8006108 <HAL_TIM_IRQHandler+0x224>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80060e8:	687b      	ldr	r3, [r7, #4]
 80060ea:	681b      	ldr	r3, [r3, #0]
 80060ec:	68db      	ldr	r3, [r3, #12]
 80060ee:	2220      	movs	r2, #32
 80060f0:	4013      	ands	r3, r2
 80060f2:	2b20      	cmp	r3, #32
 80060f4:	d108      	bne.n	8006108 <HAL_TIM_IRQHandler+0x224>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80060f6:	687b      	ldr	r3, [r7, #4]
 80060f8:	681b      	ldr	r3, [r3, #0]
 80060fa:	2221      	movs	r2, #33	; 0x21
 80060fc:	4252      	negs	r2, r2
 80060fe:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8006100:	687b      	ldr	r3, [r7, #4]
 8006102:	0018      	movs	r0, r3
 8006104:	f000 fc38 	bl	8006978 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8006108:	46c0      	nop			; (mov r8, r8)
 800610a:	46bd      	mov	sp, r7
 800610c:	b002      	add	sp, #8
 800610e:	bd80      	pop	{r7, pc}

08006110 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8006110:	b580      	push	{r7, lr}
 8006112:	b084      	sub	sp, #16
 8006114:	af00      	add	r7, sp, #0
 8006116:	60f8      	str	r0, [r7, #12]
 8006118:	60b9      	str	r1, [r7, #8]
 800611a:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 800611c:	68fb      	ldr	r3, [r7, #12]
 800611e:	223c      	movs	r2, #60	; 0x3c
 8006120:	5c9b      	ldrb	r3, [r3, r2]
 8006122:	2b01      	cmp	r3, #1
 8006124:	d101      	bne.n	800612a <HAL_TIM_PWM_ConfigChannel+0x1a>
 8006126:	2302      	movs	r3, #2
 8006128:	e0a4      	b.n	8006274 <HAL_TIM_PWM_ConfigChannel+0x164>
 800612a:	68fb      	ldr	r3, [r7, #12]
 800612c:	223c      	movs	r2, #60	; 0x3c
 800612e:	2101      	movs	r1, #1
 8006130:	5499      	strb	r1, [r3, r2]

  htim->State = HAL_TIM_STATE_BUSY;
 8006132:	68fb      	ldr	r3, [r7, #12]
 8006134:	223d      	movs	r2, #61	; 0x3d
 8006136:	2102      	movs	r1, #2
 8006138:	5499      	strb	r1, [r3, r2]

  switch (Channel)
 800613a:	687b      	ldr	r3, [r7, #4]
 800613c:	2b04      	cmp	r3, #4
 800613e:	d029      	beq.n	8006194 <HAL_TIM_PWM_ConfigChannel+0x84>
 8006140:	d802      	bhi.n	8006148 <HAL_TIM_PWM_ConfigChannel+0x38>
 8006142:	2b00      	cmp	r3, #0
 8006144:	d005      	beq.n	8006152 <HAL_TIM_PWM_ConfigChannel+0x42>
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
      break;
    }

    default:
      break;
 8006146:	e08c      	b.n	8006262 <HAL_TIM_PWM_ConfigChannel+0x152>
  switch (Channel)
 8006148:	2b08      	cmp	r3, #8
 800614a:	d046      	beq.n	80061da <HAL_TIM_PWM_ConfigChannel+0xca>
 800614c:	2b0c      	cmp	r3, #12
 800614e:	d065      	beq.n	800621c <HAL_TIM_PWM_ConfigChannel+0x10c>
      break;
 8006150:	e087      	b.n	8006262 <HAL_TIM_PWM_ConfigChannel+0x152>
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8006152:	68fb      	ldr	r3, [r7, #12]
 8006154:	681b      	ldr	r3, [r3, #0]
 8006156:	68ba      	ldr	r2, [r7, #8]
 8006158:	0011      	movs	r1, r2
 800615a:	0018      	movs	r0, r3
 800615c:	f000 f930 	bl	80063c0 <TIM_OC1_SetConfig>
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8006160:	68fb      	ldr	r3, [r7, #12]
 8006162:	681b      	ldr	r3, [r3, #0]
 8006164:	699a      	ldr	r2, [r3, #24]
 8006166:	68fb      	ldr	r3, [r7, #12]
 8006168:	681b      	ldr	r3, [r3, #0]
 800616a:	2108      	movs	r1, #8
 800616c:	430a      	orrs	r2, r1
 800616e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8006170:	68fb      	ldr	r3, [r7, #12]
 8006172:	681b      	ldr	r3, [r3, #0]
 8006174:	699a      	ldr	r2, [r3, #24]
 8006176:	68fb      	ldr	r3, [r7, #12]
 8006178:	681b      	ldr	r3, [r3, #0]
 800617a:	2104      	movs	r1, #4
 800617c:	438a      	bics	r2, r1
 800617e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8006180:	68fb      	ldr	r3, [r7, #12]
 8006182:	681b      	ldr	r3, [r3, #0]
 8006184:	6999      	ldr	r1, [r3, #24]
 8006186:	68bb      	ldr	r3, [r7, #8]
 8006188:	691a      	ldr	r2, [r3, #16]
 800618a:	68fb      	ldr	r3, [r7, #12]
 800618c:	681b      	ldr	r3, [r3, #0]
 800618e:	430a      	orrs	r2, r1
 8006190:	619a      	str	r2, [r3, #24]
      break;
 8006192:	e066      	b.n	8006262 <HAL_TIM_PWM_ConfigChannel+0x152>
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8006194:	68fb      	ldr	r3, [r7, #12]
 8006196:	681b      	ldr	r3, [r3, #0]
 8006198:	68ba      	ldr	r2, [r7, #8]
 800619a:	0011      	movs	r1, r2
 800619c:	0018      	movs	r0, r3
 800619e:	f000 f997 	bl	80064d0 <TIM_OC2_SetConfig>
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80061a2:	68fb      	ldr	r3, [r7, #12]
 80061a4:	681b      	ldr	r3, [r3, #0]
 80061a6:	699a      	ldr	r2, [r3, #24]
 80061a8:	68fb      	ldr	r3, [r7, #12]
 80061aa:	681b      	ldr	r3, [r3, #0]
 80061ac:	2180      	movs	r1, #128	; 0x80
 80061ae:	0109      	lsls	r1, r1, #4
 80061b0:	430a      	orrs	r2, r1
 80061b2:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80061b4:	68fb      	ldr	r3, [r7, #12]
 80061b6:	681b      	ldr	r3, [r3, #0]
 80061b8:	699a      	ldr	r2, [r3, #24]
 80061ba:	68fb      	ldr	r3, [r7, #12]
 80061bc:	681b      	ldr	r3, [r3, #0]
 80061be:	492f      	ldr	r1, [pc, #188]	; (800627c <HAL_TIM_PWM_ConfigChannel+0x16c>)
 80061c0:	400a      	ands	r2, r1
 80061c2:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80061c4:	68fb      	ldr	r3, [r7, #12]
 80061c6:	681b      	ldr	r3, [r3, #0]
 80061c8:	6999      	ldr	r1, [r3, #24]
 80061ca:	68bb      	ldr	r3, [r7, #8]
 80061cc:	691b      	ldr	r3, [r3, #16]
 80061ce:	021a      	lsls	r2, r3, #8
 80061d0:	68fb      	ldr	r3, [r7, #12]
 80061d2:	681b      	ldr	r3, [r3, #0]
 80061d4:	430a      	orrs	r2, r1
 80061d6:	619a      	str	r2, [r3, #24]
      break;
 80061d8:	e043      	b.n	8006262 <HAL_TIM_PWM_ConfigChannel+0x152>
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80061da:	68fb      	ldr	r3, [r7, #12]
 80061dc:	681b      	ldr	r3, [r3, #0]
 80061de:	68ba      	ldr	r2, [r7, #8]
 80061e0:	0011      	movs	r1, r2
 80061e2:	0018      	movs	r0, r3
 80061e4:	f000 f9f8 	bl	80065d8 <TIM_OC3_SetConfig>
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80061e8:	68fb      	ldr	r3, [r7, #12]
 80061ea:	681b      	ldr	r3, [r3, #0]
 80061ec:	69da      	ldr	r2, [r3, #28]
 80061ee:	68fb      	ldr	r3, [r7, #12]
 80061f0:	681b      	ldr	r3, [r3, #0]
 80061f2:	2108      	movs	r1, #8
 80061f4:	430a      	orrs	r2, r1
 80061f6:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80061f8:	68fb      	ldr	r3, [r7, #12]
 80061fa:	681b      	ldr	r3, [r3, #0]
 80061fc:	69da      	ldr	r2, [r3, #28]
 80061fe:	68fb      	ldr	r3, [r7, #12]
 8006200:	681b      	ldr	r3, [r3, #0]
 8006202:	2104      	movs	r1, #4
 8006204:	438a      	bics	r2, r1
 8006206:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8006208:	68fb      	ldr	r3, [r7, #12]
 800620a:	681b      	ldr	r3, [r3, #0]
 800620c:	69d9      	ldr	r1, [r3, #28]
 800620e:	68bb      	ldr	r3, [r7, #8]
 8006210:	691a      	ldr	r2, [r3, #16]
 8006212:	68fb      	ldr	r3, [r7, #12]
 8006214:	681b      	ldr	r3, [r3, #0]
 8006216:	430a      	orrs	r2, r1
 8006218:	61da      	str	r2, [r3, #28]
      break;
 800621a:	e022      	b.n	8006262 <HAL_TIM_PWM_ConfigChannel+0x152>
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800621c:	68fb      	ldr	r3, [r7, #12]
 800621e:	681b      	ldr	r3, [r3, #0]
 8006220:	68ba      	ldr	r2, [r7, #8]
 8006222:	0011      	movs	r1, r2
 8006224:	0018      	movs	r0, r3
 8006226:	f000 fa5d 	bl	80066e4 <TIM_OC4_SetConfig>
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800622a:	68fb      	ldr	r3, [r7, #12]
 800622c:	681b      	ldr	r3, [r3, #0]
 800622e:	69da      	ldr	r2, [r3, #28]
 8006230:	68fb      	ldr	r3, [r7, #12]
 8006232:	681b      	ldr	r3, [r3, #0]
 8006234:	2180      	movs	r1, #128	; 0x80
 8006236:	0109      	lsls	r1, r1, #4
 8006238:	430a      	orrs	r2, r1
 800623a:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800623c:	68fb      	ldr	r3, [r7, #12]
 800623e:	681b      	ldr	r3, [r3, #0]
 8006240:	69da      	ldr	r2, [r3, #28]
 8006242:	68fb      	ldr	r3, [r7, #12]
 8006244:	681b      	ldr	r3, [r3, #0]
 8006246:	490d      	ldr	r1, [pc, #52]	; (800627c <HAL_TIM_PWM_ConfigChannel+0x16c>)
 8006248:	400a      	ands	r2, r1
 800624a:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800624c:	68fb      	ldr	r3, [r7, #12]
 800624e:	681b      	ldr	r3, [r3, #0]
 8006250:	69d9      	ldr	r1, [r3, #28]
 8006252:	68bb      	ldr	r3, [r7, #8]
 8006254:	691b      	ldr	r3, [r3, #16]
 8006256:	021a      	lsls	r2, r3, #8
 8006258:	68fb      	ldr	r3, [r7, #12]
 800625a:	681b      	ldr	r3, [r3, #0]
 800625c:	430a      	orrs	r2, r1
 800625e:	61da      	str	r2, [r3, #28]
      break;
 8006260:	46c0      	nop			; (mov r8, r8)
  }

  htim->State = HAL_TIM_STATE_READY;
 8006262:	68fb      	ldr	r3, [r7, #12]
 8006264:	223d      	movs	r2, #61	; 0x3d
 8006266:	2101      	movs	r1, #1
 8006268:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 800626a:	68fb      	ldr	r3, [r7, #12]
 800626c:	223c      	movs	r2, #60	; 0x3c
 800626e:	2100      	movs	r1, #0
 8006270:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8006272:	2300      	movs	r3, #0
}
 8006274:	0018      	movs	r0, r3
 8006276:	46bd      	mov	sp, r7
 8006278:	b004      	add	sp, #16
 800627a:	bd80      	pop	{r7, pc}
 800627c:	fffffbff 	.word	0xfffffbff

08006280 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8006280:	b580      	push	{r7, lr}
 8006282:	b082      	sub	sp, #8
 8006284:	af00      	add	r7, sp, #0
 8006286:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8006288:	46c0      	nop			; (mov r8, r8)
 800628a:	46bd      	mov	sp, r7
 800628c:	b002      	add	sp, #8
 800628e:	bd80      	pop	{r7, pc}

08006290 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8006290:	b580      	push	{r7, lr}
 8006292:	b082      	sub	sp, #8
 8006294:	af00      	add	r7, sp, #0
 8006296:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8006298:	46c0      	nop			; (mov r8, r8)
 800629a:	46bd      	mov	sp, r7
 800629c:	b002      	add	sp, #8
 800629e:	bd80      	pop	{r7, pc}

080062a0 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80062a0:	b580      	push	{r7, lr}
 80062a2:	b082      	sub	sp, #8
 80062a4:	af00      	add	r7, sp, #0
 80062a6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80062a8:	46c0      	nop			; (mov r8, r8)
 80062aa:	46bd      	mov	sp, r7
 80062ac:	b002      	add	sp, #8
 80062ae:	bd80      	pop	{r7, pc}

080062b0 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80062b0:	b580      	push	{r7, lr}
 80062b2:	b082      	sub	sp, #8
 80062b4:	af00      	add	r7, sp, #0
 80062b6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80062b8:	46c0      	nop			; (mov r8, r8)
 80062ba:	46bd      	mov	sp, r7
 80062bc:	b002      	add	sp, #8
 80062be:	bd80      	pop	{r7, pc}

080062c0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80062c0:	b580      	push	{r7, lr}
 80062c2:	b084      	sub	sp, #16
 80062c4:	af00      	add	r7, sp, #0
 80062c6:	6078      	str	r0, [r7, #4]
 80062c8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80062ca:	687b      	ldr	r3, [r7, #4]
 80062cc:	681b      	ldr	r3, [r3, #0]
 80062ce:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80062d0:	687b      	ldr	r3, [r7, #4]
 80062d2:	4a34      	ldr	r2, [pc, #208]	; (80063a4 <TIM_Base_SetConfig+0xe4>)
 80062d4:	4293      	cmp	r3, r2
 80062d6:	d008      	beq.n	80062ea <TIM_Base_SetConfig+0x2a>
 80062d8:	687a      	ldr	r2, [r7, #4]
 80062da:	2380      	movs	r3, #128	; 0x80
 80062dc:	05db      	lsls	r3, r3, #23
 80062de:	429a      	cmp	r2, r3
 80062e0:	d003      	beq.n	80062ea <TIM_Base_SetConfig+0x2a>
 80062e2:	687b      	ldr	r3, [r7, #4]
 80062e4:	4a30      	ldr	r2, [pc, #192]	; (80063a8 <TIM_Base_SetConfig+0xe8>)
 80062e6:	4293      	cmp	r3, r2
 80062e8:	d108      	bne.n	80062fc <TIM_Base_SetConfig+0x3c>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80062ea:	68fb      	ldr	r3, [r7, #12]
 80062ec:	2270      	movs	r2, #112	; 0x70
 80062ee:	4393      	bics	r3, r2
 80062f0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80062f2:	683b      	ldr	r3, [r7, #0]
 80062f4:	685b      	ldr	r3, [r3, #4]
 80062f6:	68fa      	ldr	r2, [r7, #12]
 80062f8:	4313      	orrs	r3, r2
 80062fa:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80062fc:	687b      	ldr	r3, [r7, #4]
 80062fe:	4a29      	ldr	r2, [pc, #164]	; (80063a4 <TIM_Base_SetConfig+0xe4>)
 8006300:	4293      	cmp	r3, r2
 8006302:	d018      	beq.n	8006336 <TIM_Base_SetConfig+0x76>
 8006304:	687a      	ldr	r2, [r7, #4]
 8006306:	2380      	movs	r3, #128	; 0x80
 8006308:	05db      	lsls	r3, r3, #23
 800630a:	429a      	cmp	r2, r3
 800630c:	d013      	beq.n	8006336 <TIM_Base_SetConfig+0x76>
 800630e:	687b      	ldr	r3, [r7, #4]
 8006310:	4a25      	ldr	r2, [pc, #148]	; (80063a8 <TIM_Base_SetConfig+0xe8>)
 8006312:	4293      	cmp	r3, r2
 8006314:	d00f      	beq.n	8006336 <TIM_Base_SetConfig+0x76>
 8006316:	687b      	ldr	r3, [r7, #4]
 8006318:	4a24      	ldr	r2, [pc, #144]	; (80063ac <TIM_Base_SetConfig+0xec>)
 800631a:	4293      	cmp	r3, r2
 800631c:	d00b      	beq.n	8006336 <TIM_Base_SetConfig+0x76>
 800631e:	687b      	ldr	r3, [r7, #4]
 8006320:	4a23      	ldr	r2, [pc, #140]	; (80063b0 <TIM_Base_SetConfig+0xf0>)
 8006322:	4293      	cmp	r3, r2
 8006324:	d007      	beq.n	8006336 <TIM_Base_SetConfig+0x76>
 8006326:	687b      	ldr	r3, [r7, #4]
 8006328:	4a22      	ldr	r2, [pc, #136]	; (80063b4 <TIM_Base_SetConfig+0xf4>)
 800632a:	4293      	cmp	r3, r2
 800632c:	d003      	beq.n	8006336 <TIM_Base_SetConfig+0x76>
 800632e:	687b      	ldr	r3, [r7, #4]
 8006330:	4a21      	ldr	r2, [pc, #132]	; (80063b8 <TIM_Base_SetConfig+0xf8>)
 8006332:	4293      	cmp	r3, r2
 8006334:	d108      	bne.n	8006348 <TIM_Base_SetConfig+0x88>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8006336:	68fb      	ldr	r3, [r7, #12]
 8006338:	4a20      	ldr	r2, [pc, #128]	; (80063bc <TIM_Base_SetConfig+0xfc>)
 800633a:	4013      	ands	r3, r2
 800633c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800633e:	683b      	ldr	r3, [r7, #0]
 8006340:	68db      	ldr	r3, [r3, #12]
 8006342:	68fa      	ldr	r2, [r7, #12]
 8006344:	4313      	orrs	r3, r2
 8006346:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8006348:	68fb      	ldr	r3, [r7, #12]
 800634a:	2280      	movs	r2, #128	; 0x80
 800634c:	4393      	bics	r3, r2
 800634e:	001a      	movs	r2, r3
 8006350:	683b      	ldr	r3, [r7, #0]
 8006352:	695b      	ldr	r3, [r3, #20]
 8006354:	4313      	orrs	r3, r2
 8006356:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8006358:	687b      	ldr	r3, [r7, #4]
 800635a:	68fa      	ldr	r2, [r7, #12]
 800635c:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800635e:	683b      	ldr	r3, [r7, #0]
 8006360:	689a      	ldr	r2, [r3, #8]
 8006362:	687b      	ldr	r3, [r7, #4]
 8006364:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8006366:	683b      	ldr	r3, [r7, #0]
 8006368:	681a      	ldr	r2, [r3, #0]
 800636a:	687b      	ldr	r3, [r7, #4]
 800636c:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800636e:	687b      	ldr	r3, [r7, #4]
 8006370:	4a0c      	ldr	r2, [pc, #48]	; (80063a4 <TIM_Base_SetConfig+0xe4>)
 8006372:	4293      	cmp	r3, r2
 8006374:	d00b      	beq.n	800638e <TIM_Base_SetConfig+0xce>
 8006376:	687b      	ldr	r3, [r7, #4]
 8006378:	4a0d      	ldr	r2, [pc, #52]	; (80063b0 <TIM_Base_SetConfig+0xf0>)
 800637a:	4293      	cmp	r3, r2
 800637c:	d007      	beq.n	800638e <TIM_Base_SetConfig+0xce>
 800637e:	687b      	ldr	r3, [r7, #4]
 8006380:	4a0c      	ldr	r2, [pc, #48]	; (80063b4 <TIM_Base_SetConfig+0xf4>)
 8006382:	4293      	cmp	r3, r2
 8006384:	d003      	beq.n	800638e <TIM_Base_SetConfig+0xce>
 8006386:	687b      	ldr	r3, [r7, #4]
 8006388:	4a0b      	ldr	r2, [pc, #44]	; (80063b8 <TIM_Base_SetConfig+0xf8>)
 800638a:	4293      	cmp	r3, r2
 800638c:	d103      	bne.n	8006396 <TIM_Base_SetConfig+0xd6>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800638e:	683b      	ldr	r3, [r7, #0]
 8006390:	691a      	ldr	r2, [r3, #16]
 8006392:	687b      	ldr	r3, [r7, #4]
 8006394:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8006396:	687b      	ldr	r3, [r7, #4]
 8006398:	2201      	movs	r2, #1
 800639a:	615a      	str	r2, [r3, #20]
}
 800639c:	46c0      	nop			; (mov r8, r8)
 800639e:	46bd      	mov	sp, r7
 80063a0:	b004      	add	sp, #16
 80063a2:	bd80      	pop	{r7, pc}
 80063a4:	40012c00 	.word	0x40012c00
 80063a8:	40000400 	.word	0x40000400
 80063ac:	40002000 	.word	0x40002000
 80063b0:	40014000 	.word	0x40014000
 80063b4:	40014400 	.word	0x40014400
 80063b8:	40014800 	.word	0x40014800
 80063bc:	fffffcff 	.word	0xfffffcff

080063c0 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80063c0:	b580      	push	{r7, lr}
 80063c2:	b086      	sub	sp, #24
 80063c4:	af00      	add	r7, sp, #0
 80063c6:	6078      	str	r0, [r7, #4]
 80063c8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80063ca:	687b      	ldr	r3, [r7, #4]
 80063cc:	6a1b      	ldr	r3, [r3, #32]
 80063ce:	2201      	movs	r2, #1
 80063d0:	4393      	bics	r3, r2
 80063d2:	001a      	movs	r2, r3
 80063d4:	687b      	ldr	r3, [r7, #4]
 80063d6:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80063d8:	687b      	ldr	r3, [r7, #4]
 80063da:	6a1b      	ldr	r3, [r3, #32]
 80063dc:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80063de:	687b      	ldr	r3, [r7, #4]
 80063e0:	685b      	ldr	r3, [r3, #4]
 80063e2:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80063e4:	687b      	ldr	r3, [r7, #4]
 80063e6:	699b      	ldr	r3, [r3, #24]
 80063e8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80063ea:	68fb      	ldr	r3, [r7, #12]
 80063ec:	2270      	movs	r2, #112	; 0x70
 80063ee:	4393      	bics	r3, r2
 80063f0:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80063f2:	68fb      	ldr	r3, [r7, #12]
 80063f4:	2203      	movs	r2, #3
 80063f6:	4393      	bics	r3, r2
 80063f8:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80063fa:	683b      	ldr	r3, [r7, #0]
 80063fc:	681b      	ldr	r3, [r3, #0]
 80063fe:	68fa      	ldr	r2, [r7, #12]
 8006400:	4313      	orrs	r3, r2
 8006402:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8006404:	697b      	ldr	r3, [r7, #20]
 8006406:	2202      	movs	r2, #2
 8006408:	4393      	bics	r3, r2
 800640a:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800640c:	683b      	ldr	r3, [r7, #0]
 800640e:	689b      	ldr	r3, [r3, #8]
 8006410:	697a      	ldr	r2, [r7, #20]
 8006412:	4313      	orrs	r3, r2
 8006414:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8006416:	687b      	ldr	r3, [r7, #4]
 8006418:	4a27      	ldr	r2, [pc, #156]	; (80064b8 <TIM_OC1_SetConfig+0xf8>)
 800641a:	4293      	cmp	r3, r2
 800641c:	d00b      	beq.n	8006436 <TIM_OC1_SetConfig+0x76>
 800641e:	687b      	ldr	r3, [r7, #4]
 8006420:	4a26      	ldr	r2, [pc, #152]	; (80064bc <TIM_OC1_SetConfig+0xfc>)
 8006422:	4293      	cmp	r3, r2
 8006424:	d007      	beq.n	8006436 <TIM_OC1_SetConfig+0x76>
 8006426:	687b      	ldr	r3, [r7, #4]
 8006428:	4a25      	ldr	r2, [pc, #148]	; (80064c0 <TIM_OC1_SetConfig+0x100>)
 800642a:	4293      	cmp	r3, r2
 800642c:	d003      	beq.n	8006436 <TIM_OC1_SetConfig+0x76>
 800642e:	687b      	ldr	r3, [r7, #4]
 8006430:	4a24      	ldr	r2, [pc, #144]	; (80064c4 <TIM_OC1_SetConfig+0x104>)
 8006432:	4293      	cmp	r3, r2
 8006434:	d10c      	bne.n	8006450 <TIM_OC1_SetConfig+0x90>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8006436:	697b      	ldr	r3, [r7, #20]
 8006438:	2208      	movs	r2, #8
 800643a:	4393      	bics	r3, r2
 800643c:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800643e:	683b      	ldr	r3, [r7, #0]
 8006440:	68db      	ldr	r3, [r3, #12]
 8006442:	697a      	ldr	r2, [r7, #20]
 8006444:	4313      	orrs	r3, r2
 8006446:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8006448:	697b      	ldr	r3, [r7, #20]
 800644a:	2204      	movs	r2, #4
 800644c:	4393      	bics	r3, r2
 800644e:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006450:	687b      	ldr	r3, [r7, #4]
 8006452:	4a19      	ldr	r2, [pc, #100]	; (80064b8 <TIM_OC1_SetConfig+0xf8>)
 8006454:	4293      	cmp	r3, r2
 8006456:	d00b      	beq.n	8006470 <TIM_OC1_SetConfig+0xb0>
 8006458:	687b      	ldr	r3, [r7, #4]
 800645a:	4a18      	ldr	r2, [pc, #96]	; (80064bc <TIM_OC1_SetConfig+0xfc>)
 800645c:	4293      	cmp	r3, r2
 800645e:	d007      	beq.n	8006470 <TIM_OC1_SetConfig+0xb0>
 8006460:	687b      	ldr	r3, [r7, #4]
 8006462:	4a17      	ldr	r2, [pc, #92]	; (80064c0 <TIM_OC1_SetConfig+0x100>)
 8006464:	4293      	cmp	r3, r2
 8006466:	d003      	beq.n	8006470 <TIM_OC1_SetConfig+0xb0>
 8006468:	687b      	ldr	r3, [r7, #4]
 800646a:	4a16      	ldr	r2, [pc, #88]	; (80064c4 <TIM_OC1_SetConfig+0x104>)
 800646c:	4293      	cmp	r3, r2
 800646e:	d111      	bne.n	8006494 <TIM_OC1_SetConfig+0xd4>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8006470:	693b      	ldr	r3, [r7, #16]
 8006472:	4a15      	ldr	r2, [pc, #84]	; (80064c8 <TIM_OC1_SetConfig+0x108>)
 8006474:	4013      	ands	r3, r2
 8006476:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8006478:	693b      	ldr	r3, [r7, #16]
 800647a:	4a14      	ldr	r2, [pc, #80]	; (80064cc <TIM_OC1_SetConfig+0x10c>)
 800647c:	4013      	ands	r3, r2
 800647e:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8006480:	683b      	ldr	r3, [r7, #0]
 8006482:	695b      	ldr	r3, [r3, #20]
 8006484:	693a      	ldr	r2, [r7, #16]
 8006486:	4313      	orrs	r3, r2
 8006488:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800648a:	683b      	ldr	r3, [r7, #0]
 800648c:	699b      	ldr	r3, [r3, #24]
 800648e:	693a      	ldr	r2, [r7, #16]
 8006490:	4313      	orrs	r3, r2
 8006492:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006494:	687b      	ldr	r3, [r7, #4]
 8006496:	693a      	ldr	r2, [r7, #16]
 8006498:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800649a:	687b      	ldr	r3, [r7, #4]
 800649c:	68fa      	ldr	r2, [r7, #12]
 800649e:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80064a0:	683b      	ldr	r3, [r7, #0]
 80064a2:	685a      	ldr	r2, [r3, #4]
 80064a4:	687b      	ldr	r3, [r7, #4]
 80064a6:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80064a8:	687b      	ldr	r3, [r7, #4]
 80064aa:	697a      	ldr	r2, [r7, #20]
 80064ac:	621a      	str	r2, [r3, #32]
}
 80064ae:	46c0      	nop			; (mov r8, r8)
 80064b0:	46bd      	mov	sp, r7
 80064b2:	b006      	add	sp, #24
 80064b4:	bd80      	pop	{r7, pc}
 80064b6:	46c0      	nop			; (mov r8, r8)
 80064b8:	40012c00 	.word	0x40012c00
 80064bc:	40014000 	.word	0x40014000
 80064c0:	40014400 	.word	0x40014400
 80064c4:	40014800 	.word	0x40014800
 80064c8:	fffffeff 	.word	0xfffffeff
 80064cc:	fffffdff 	.word	0xfffffdff

080064d0 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80064d0:	b580      	push	{r7, lr}
 80064d2:	b086      	sub	sp, #24
 80064d4:	af00      	add	r7, sp, #0
 80064d6:	6078      	str	r0, [r7, #4]
 80064d8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80064da:	687b      	ldr	r3, [r7, #4]
 80064dc:	6a1b      	ldr	r3, [r3, #32]
 80064de:	2210      	movs	r2, #16
 80064e0:	4393      	bics	r3, r2
 80064e2:	001a      	movs	r2, r3
 80064e4:	687b      	ldr	r3, [r7, #4]
 80064e6:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80064e8:	687b      	ldr	r3, [r7, #4]
 80064ea:	6a1b      	ldr	r3, [r3, #32]
 80064ec:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80064ee:	687b      	ldr	r3, [r7, #4]
 80064f0:	685b      	ldr	r3, [r3, #4]
 80064f2:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80064f4:	687b      	ldr	r3, [r7, #4]
 80064f6:	699b      	ldr	r3, [r3, #24]
 80064f8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80064fa:	68fb      	ldr	r3, [r7, #12]
 80064fc:	4a2e      	ldr	r2, [pc, #184]	; (80065b8 <TIM_OC2_SetConfig+0xe8>)
 80064fe:	4013      	ands	r3, r2
 8006500:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8006502:	68fb      	ldr	r3, [r7, #12]
 8006504:	4a2d      	ldr	r2, [pc, #180]	; (80065bc <TIM_OC2_SetConfig+0xec>)
 8006506:	4013      	ands	r3, r2
 8006508:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800650a:	683b      	ldr	r3, [r7, #0]
 800650c:	681b      	ldr	r3, [r3, #0]
 800650e:	021b      	lsls	r3, r3, #8
 8006510:	68fa      	ldr	r2, [r7, #12]
 8006512:	4313      	orrs	r3, r2
 8006514:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8006516:	697b      	ldr	r3, [r7, #20]
 8006518:	2220      	movs	r2, #32
 800651a:	4393      	bics	r3, r2
 800651c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800651e:	683b      	ldr	r3, [r7, #0]
 8006520:	689b      	ldr	r3, [r3, #8]
 8006522:	011b      	lsls	r3, r3, #4
 8006524:	697a      	ldr	r2, [r7, #20]
 8006526:	4313      	orrs	r3, r2
 8006528:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800652a:	687b      	ldr	r3, [r7, #4]
 800652c:	4a24      	ldr	r2, [pc, #144]	; (80065c0 <TIM_OC2_SetConfig+0xf0>)
 800652e:	4293      	cmp	r3, r2
 8006530:	d10d      	bne.n	800654e <TIM_OC2_SetConfig+0x7e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8006532:	697b      	ldr	r3, [r7, #20]
 8006534:	2280      	movs	r2, #128	; 0x80
 8006536:	4393      	bics	r3, r2
 8006538:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800653a:	683b      	ldr	r3, [r7, #0]
 800653c:	68db      	ldr	r3, [r3, #12]
 800653e:	011b      	lsls	r3, r3, #4
 8006540:	697a      	ldr	r2, [r7, #20]
 8006542:	4313      	orrs	r3, r2
 8006544:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8006546:	697b      	ldr	r3, [r7, #20]
 8006548:	2240      	movs	r2, #64	; 0x40
 800654a:	4393      	bics	r3, r2
 800654c:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800654e:	687b      	ldr	r3, [r7, #4]
 8006550:	4a1b      	ldr	r2, [pc, #108]	; (80065c0 <TIM_OC2_SetConfig+0xf0>)
 8006552:	4293      	cmp	r3, r2
 8006554:	d00b      	beq.n	800656e <TIM_OC2_SetConfig+0x9e>
 8006556:	687b      	ldr	r3, [r7, #4]
 8006558:	4a1a      	ldr	r2, [pc, #104]	; (80065c4 <TIM_OC2_SetConfig+0xf4>)
 800655a:	4293      	cmp	r3, r2
 800655c:	d007      	beq.n	800656e <TIM_OC2_SetConfig+0x9e>
 800655e:	687b      	ldr	r3, [r7, #4]
 8006560:	4a19      	ldr	r2, [pc, #100]	; (80065c8 <TIM_OC2_SetConfig+0xf8>)
 8006562:	4293      	cmp	r3, r2
 8006564:	d003      	beq.n	800656e <TIM_OC2_SetConfig+0x9e>
 8006566:	687b      	ldr	r3, [r7, #4]
 8006568:	4a18      	ldr	r2, [pc, #96]	; (80065cc <TIM_OC2_SetConfig+0xfc>)
 800656a:	4293      	cmp	r3, r2
 800656c:	d113      	bne.n	8006596 <TIM_OC2_SetConfig+0xc6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800656e:	693b      	ldr	r3, [r7, #16]
 8006570:	4a17      	ldr	r2, [pc, #92]	; (80065d0 <TIM_OC2_SetConfig+0x100>)
 8006572:	4013      	ands	r3, r2
 8006574:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8006576:	693b      	ldr	r3, [r7, #16]
 8006578:	4a16      	ldr	r2, [pc, #88]	; (80065d4 <TIM_OC2_SetConfig+0x104>)
 800657a:	4013      	ands	r3, r2
 800657c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800657e:	683b      	ldr	r3, [r7, #0]
 8006580:	695b      	ldr	r3, [r3, #20]
 8006582:	009b      	lsls	r3, r3, #2
 8006584:	693a      	ldr	r2, [r7, #16]
 8006586:	4313      	orrs	r3, r2
 8006588:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800658a:	683b      	ldr	r3, [r7, #0]
 800658c:	699b      	ldr	r3, [r3, #24]
 800658e:	009b      	lsls	r3, r3, #2
 8006590:	693a      	ldr	r2, [r7, #16]
 8006592:	4313      	orrs	r3, r2
 8006594:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006596:	687b      	ldr	r3, [r7, #4]
 8006598:	693a      	ldr	r2, [r7, #16]
 800659a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800659c:	687b      	ldr	r3, [r7, #4]
 800659e:	68fa      	ldr	r2, [r7, #12]
 80065a0:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80065a2:	683b      	ldr	r3, [r7, #0]
 80065a4:	685a      	ldr	r2, [r3, #4]
 80065a6:	687b      	ldr	r3, [r7, #4]
 80065a8:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80065aa:	687b      	ldr	r3, [r7, #4]
 80065ac:	697a      	ldr	r2, [r7, #20]
 80065ae:	621a      	str	r2, [r3, #32]
}
 80065b0:	46c0      	nop			; (mov r8, r8)
 80065b2:	46bd      	mov	sp, r7
 80065b4:	b006      	add	sp, #24
 80065b6:	bd80      	pop	{r7, pc}
 80065b8:	ffff8fff 	.word	0xffff8fff
 80065bc:	fffffcff 	.word	0xfffffcff
 80065c0:	40012c00 	.word	0x40012c00
 80065c4:	40014000 	.word	0x40014000
 80065c8:	40014400 	.word	0x40014400
 80065cc:	40014800 	.word	0x40014800
 80065d0:	fffffbff 	.word	0xfffffbff
 80065d4:	fffff7ff 	.word	0xfffff7ff

080065d8 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80065d8:	b580      	push	{r7, lr}
 80065da:	b086      	sub	sp, #24
 80065dc:	af00      	add	r7, sp, #0
 80065de:	6078      	str	r0, [r7, #4]
 80065e0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80065e2:	687b      	ldr	r3, [r7, #4]
 80065e4:	6a1b      	ldr	r3, [r3, #32]
 80065e6:	4a35      	ldr	r2, [pc, #212]	; (80066bc <TIM_OC3_SetConfig+0xe4>)
 80065e8:	401a      	ands	r2, r3
 80065ea:	687b      	ldr	r3, [r7, #4]
 80065ec:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80065ee:	687b      	ldr	r3, [r7, #4]
 80065f0:	6a1b      	ldr	r3, [r3, #32]
 80065f2:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80065f4:	687b      	ldr	r3, [r7, #4]
 80065f6:	685b      	ldr	r3, [r3, #4]
 80065f8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80065fa:	687b      	ldr	r3, [r7, #4]
 80065fc:	69db      	ldr	r3, [r3, #28]
 80065fe:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8006600:	68fb      	ldr	r3, [r7, #12]
 8006602:	2270      	movs	r2, #112	; 0x70
 8006604:	4393      	bics	r3, r2
 8006606:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8006608:	68fb      	ldr	r3, [r7, #12]
 800660a:	2203      	movs	r2, #3
 800660c:	4393      	bics	r3, r2
 800660e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006610:	683b      	ldr	r3, [r7, #0]
 8006612:	681b      	ldr	r3, [r3, #0]
 8006614:	68fa      	ldr	r2, [r7, #12]
 8006616:	4313      	orrs	r3, r2
 8006618:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800661a:	697b      	ldr	r3, [r7, #20]
 800661c:	4a28      	ldr	r2, [pc, #160]	; (80066c0 <TIM_OC3_SetConfig+0xe8>)
 800661e:	4013      	ands	r3, r2
 8006620:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8006622:	683b      	ldr	r3, [r7, #0]
 8006624:	689b      	ldr	r3, [r3, #8]
 8006626:	021b      	lsls	r3, r3, #8
 8006628:	697a      	ldr	r2, [r7, #20]
 800662a:	4313      	orrs	r3, r2
 800662c:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800662e:	687b      	ldr	r3, [r7, #4]
 8006630:	4a24      	ldr	r2, [pc, #144]	; (80066c4 <TIM_OC3_SetConfig+0xec>)
 8006632:	4293      	cmp	r3, r2
 8006634:	d10d      	bne.n	8006652 <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8006636:	697b      	ldr	r3, [r7, #20]
 8006638:	4a23      	ldr	r2, [pc, #140]	; (80066c8 <TIM_OC3_SetConfig+0xf0>)
 800663a:	4013      	ands	r3, r2
 800663c:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800663e:	683b      	ldr	r3, [r7, #0]
 8006640:	68db      	ldr	r3, [r3, #12]
 8006642:	021b      	lsls	r3, r3, #8
 8006644:	697a      	ldr	r2, [r7, #20]
 8006646:	4313      	orrs	r3, r2
 8006648:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800664a:	697b      	ldr	r3, [r7, #20]
 800664c:	4a1f      	ldr	r2, [pc, #124]	; (80066cc <TIM_OC3_SetConfig+0xf4>)
 800664e:	4013      	ands	r3, r2
 8006650:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006652:	687b      	ldr	r3, [r7, #4]
 8006654:	4a1b      	ldr	r2, [pc, #108]	; (80066c4 <TIM_OC3_SetConfig+0xec>)
 8006656:	4293      	cmp	r3, r2
 8006658:	d00b      	beq.n	8006672 <TIM_OC3_SetConfig+0x9a>
 800665a:	687b      	ldr	r3, [r7, #4]
 800665c:	4a1c      	ldr	r2, [pc, #112]	; (80066d0 <TIM_OC3_SetConfig+0xf8>)
 800665e:	4293      	cmp	r3, r2
 8006660:	d007      	beq.n	8006672 <TIM_OC3_SetConfig+0x9a>
 8006662:	687b      	ldr	r3, [r7, #4]
 8006664:	4a1b      	ldr	r2, [pc, #108]	; (80066d4 <TIM_OC3_SetConfig+0xfc>)
 8006666:	4293      	cmp	r3, r2
 8006668:	d003      	beq.n	8006672 <TIM_OC3_SetConfig+0x9a>
 800666a:	687b      	ldr	r3, [r7, #4]
 800666c:	4a1a      	ldr	r2, [pc, #104]	; (80066d8 <TIM_OC3_SetConfig+0x100>)
 800666e:	4293      	cmp	r3, r2
 8006670:	d113      	bne.n	800669a <TIM_OC3_SetConfig+0xc2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8006672:	693b      	ldr	r3, [r7, #16]
 8006674:	4a19      	ldr	r2, [pc, #100]	; (80066dc <TIM_OC3_SetConfig+0x104>)
 8006676:	4013      	ands	r3, r2
 8006678:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800667a:	693b      	ldr	r3, [r7, #16]
 800667c:	4a18      	ldr	r2, [pc, #96]	; (80066e0 <TIM_OC3_SetConfig+0x108>)
 800667e:	4013      	ands	r3, r2
 8006680:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8006682:	683b      	ldr	r3, [r7, #0]
 8006684:	695b      	ldr	r3, [r3, #20]
 8006686:	011b      	lsls	r3, r3, #4
 8006688:	693a      	ldr	r2, [r7, #16]
 800668a:	4313      	orrs	r3, r2
 800668c:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800668e:	683b      	ldr	r3, [r7, #0]
 8006690:	699b      	ldr	r3, [r3, #24]
 8006692:	011b      	lsls	r3, r3, #4
 8006694:	693a      	ldr	r2, [r7, #16]
 8006696:	4313      	orrs	r3, r2
 8006698:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800669a:	687b      	ldr	r3, [r7, #4]
 800669c:	693a      	ldr	r2, [r7, #16]
 800669e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80066a0:	687b      	ldr	r3, [r7, #4]
 80066a2:	68fa      	ldr	r2, [r7, #12]
 80066a4:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80066a6:	683b      	ldr	r3, [r7, #0]
 80066a8:	685a      	ldr	r2, [r3, #4]
 80066aa:	687b      	ldr	r3, [r7, #4]
 80066ac:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80066ae:	687b      	ldr	r3, [r7, #4]
 80066b0:	697a      	ldr	r2, [r7, #20]
 80066b2:	621a      	str	r2, [r3, #32]
}
 80066b4:	46c0      	nop			; (mov r8, r8)
 80066b6:	46bd      	mov	sp, r7
 80066b8:	b006      	add	sp, #24
 80066ba:	bd80      	pop	{r7, pc}
 80066bc:	fffffeff 	.word	0xfffffeff
 80066c0:	fffffdff 	.word	0xfffffdff
 80066c4:	40012c00 	.word	0x40012c00
 80066c8:	fffff7ff 	.word	0xfffff7ff
 80066cc:	fffffbff 	.word	0xfffffbff
 80066d0:	40014000 	.word	0x40014000
 80066d4:	40014400 	.word	0x40014400
 80066d8:	40014800 	.word	0x40014800
 80066dc:	ffffefff 	.word	0xffffefff
 80066e0:	ffffdfff 	.word	0xffffdfff

080066e4 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80066e4:	b580      	push	{r7, lr}
 80066e6:	b086      	sub	sp, #24
 80066e8:	af00      	add	r7, sp, #0
 80066ea:	6078      	str	r0, [r7, #4]
 80066ec:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80066ee:	687b      	ldr	r3, [r7, #4]
 80066f0:	6a1b      	ldr	r3, [r3, #32]
 80066f2:	4a28      	ldr	r2, [pc, #160]	; (8006794 <TIM_OC4_SetConfig+0xb0>)
 80066f4:	401a      	ands	r2, r3
 80066f6:	687b      	ldr	r3, [r7, #4]
 80066f8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80066fa:	687b      	ldr	r3, [r7, #4]
 80066fc:	6a1b      	ldr	r3, [r3, #32]
 80066fe:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006700:	687b      	ldr	r3, [r7, #4]
 8006702:	685b      	ldr	r3, [r3, #4]
 8006704:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8006706:	687b      	ldr	r3, [r7, #4]
 8006708:	69db      	ldr	r3, [r3, #28]
 800670a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800670c:	68fb      	ldr	r3, [r7, #12]
 800670e:	4a22      	ldr	r2, [pc, #136]	; (8006798 <TIM_OC4_SetConfig+0xb4>)
 8006710:	4013      	ands	r3, r2
 8006712:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8006714:	68fb      	ldr	r3, [r7, #12]
 8006716:	4a21      	ldr	r2, [pc, #132]	; (800679c <TIM_OC4_SetConfig+0xb8>)
 8006718:	4013      	ands	r3, r2
 800671a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800671c:	683b      	ldr	r3, [r7, #0]
 800671e:	681b      	ldr	r3, [r3, #0]
 8006720:	021b      	lsls	r3, r3, #8
 8006722:	68fa      	ldr	r2, [r7, #12]
 8006724:	4313      	orrs	r3, r2
 8006726:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8006728:	693b      	ldr	r3, [r7, #16]
 800672a:	4a1d      	ldr	r2, [pc, #116]	; (80067a0 <TIM_OC4_SetConfig+0xbc>)
 800672c:	4013      	ands	r3, r2
 800672e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8006730:	683b      	ldr	r3, [r7, #0]
 8006732:	689b      	ldr	r3, [r3, #8]
 8006734:	031b      	lsls	r3, r3, #12
 8006736:	693a      	ldr	r2, [r7, #16]
 8006738:	4313      	orrs	r3, r2
 800673a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800673c:	687b      	ldr	r3, [r7, #4]
 800673e:	4a19      	ldr	r2, [pc, #100]	; (80067a4 <TIM_OC4_SetConfig+0xc0>)
 8006740:	4293      	cmp	r3, r2
 8006742:	d00b      	beq.n	800675c <TIM_OC4_SetConfig+0x78>
 8006744:	687b      	ldr	r3, [r7, #4]
 8006746:	4a18      	ldr	r2, [pc, #96]	; (80067a8 <TIM_OC4_SetConfig+0xc4>)
 8006748:	4293      	cmp	r3, r2
 800674a:	d007      	beq.n	800675c <TIM_OC4_SetConfig+0x78>
 800674c:	687b      	ldr	r3, [r7, #4]
 800674e:	4a17      	ldr	r2, [pc, #92]	; (80067ac <TIM_OC4_SetConfig+0xc8>)
 8006750:	4293      	cmp	r3, r2
 8006752:	d003      	beq.n	800675c <TIM_OC4_SetConfig+0x78>
 8006754:	687b      	ldr	r3, [r7, #4]
 8006756:	4a16      	ldr	r2, [pc, #88]	; (80067b0 <TIM_OC4_SetConfig+0xcc>)
 8006758:	4293      	cmp	r3, r2
 800675a:	d109      	bne.n	8006770 <TIM_OC4_SetConfig+0x8c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800675c:	697b      	ldr	r3, [r7, #20]
 800675e:	4a15      	ldr	r2, [pc, #84]	; (80067b4 <TIM_OC4_SetConfig+0xd0>)
 8006760:	4013      	ands	r3, r2
 8006762:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8006764:	683b      	ldr	r3, [r7, #0]
 8006766:	695b      	ldr	r3, [r3, #20]
 8006768:	019b      	lsls	r3, r3, #6
 800676a:	697a      	ldr	r2, [r7, #20]
 800676c:	4313      	orrs	r3, r2
 800676e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006770:	687b      	ldr	r3, [r7, #4]
 8006772:	697a      	ldr	r2, [r7, #20]
 8006774:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8006776:	687b      	ldr	r3, [r7, #4]
 8006778:	68fa      	ldr	r2, [r7, #12]
 800677a:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800677c:	683b      	ldr	r3, [r7, #0]
 800677e:	685a      	ldr	r2, [r3, #4]
 8006780:	687b      	ldr	r3, [r7, #4]
 8006782:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006784:	687b      	ldr	r3, [r7, #4]
 8006786:	693a      	ldr	r2, [r7, #16]
 8006788:	621a      	str	r2, [r3, #32]
}
 800678a:	46c0      	nop			; (mov r8, r8)
 800678c:	46bd      	mov	sp, r7
 800678e:	b006      	add	sp, #24
 8006790:	bd80      	pop	{r7, pc}
 8006792:	46c0      	nop			; (mov r8, r8)
 8006794:	ffffefff 	.word	0xffffefff
 8006798:	ffff8fff 	.word	0xffff8fff
 800679c:	fffffcff 	.word	0xfffffcff
 80067a0:	ffffdfff 	.word	0xffffdfff
 80067a4:	40012c00 	.word	0x40012c00
 80067a8:	40014000 	.word	0x40014000
 80067ac:	40014400 	.word	0x40014400
 80067b0:	40014800 	.word	0x40014800
 80067b4:	ffffbfff 	.word	0xffffbfff

080067b8 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80067b8:	b580      	push	{r7, lr}
 80067ba:	b086      	sub	sp, #24
 80067bc:	af00      	add	r7, sp, #0
 80067be:	60f8      	str	r0, [r7, #12]
 80067c0:	60b9      	str	r1, [r7, #8]
 80067c2:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80067c4:	68bb      	ldr	r3, [r7, #8]
 80067c6:	221f      	movs	r2, #31
 80067c8:	4013      	ands	r3, r2
 80067ca:	2201      	movs	r2, #1
 80067cc:	409a      	lsls	r2, r3
 80067ce:	0013      	movs	r3, r2
 80067d0:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80067d2:	68fb      	ldr	r3, [r7, #12]
 80067d4:	6a1b      	ldr	r3, [r3, #32]
 80067d6:	697a      	ldr	r2, [r7, #20]
 80067d8:	43d2      	mvns	r2, r2
 80067da:	401a      	ands	r2, r3
 80067dc:	68fb      	ldr	r3, [r7, #12]
 80067de:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80067e0:	68fb      	ldr	r3, [r7, #12]
 80067e2:	6a1a      	ldr	r2, [r3, #32]
 80067e4:	68bb      	ldr	r3, [r7, #8]
 80067e6:	211f      	movs	r1, #31
 80067e8:	400b      	ands	r3, r1
 80067ea:	6879      	ldr	r1, [r7, #4]
 80067ec:	4099      	lsls	r1, r3
 80067ee:	000b      	movs	r3, r1
 80067f0:	431a      	orrs	r2, r3
 80067f2:	68fb      	ldr	r3, [r7, #12]
 80067f4:	621a      	str	r2, [r3, #32]
}
 80067f6:	46c0      	nop			; (mov r8, r8)
 80067f8:	46bd      	mov	sp, r7
 80067fa:	b006      	add	sp, #24
 80067fc:	bd80      	pop	{r7, pc}
	...

08006800 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8006800:	b580      	push	{r7, lr}
 8006802:	b084      	sub	sp, #16
 8006804:	af00      	add	r7, sp, #0
 8006806:	6078      	str	r0, [r7, #4]
 8006808:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800680a:	687b      	ldr	r3, [r7, #4]
 800680c:	223c      	movs	r2, #60	; 0x3c
 800680e:	5c9b      	ldrb	r3, [r3, r2]
 8006810:	2b01      	cmp	r3, #1
 8006812:	d101      	bne.n	8006818 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8006814:	2302      	movs	r3, #2
 8006816:	e047      	b.n	80068a8 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
 8006818:	687b      	ldr	r3, [r7, #4]
 800681a:	223c      	movs	r2, #60	; 0x3c
 800681c:	2101      	movs	r1, #1
 800681e:	5499      	strb	r1, [r3, r2]

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006820:	687b      	ldr	r3, [r7, #4]
 8006822:	223d      	movs	r2, #61	; 0x3d
 8006824:	2102      	movs	r1, #2
 8006826:	5499      	strb	r1, [r3, r2]

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8006828:	687b      	ldr	r3, [r7, #4]
 800682a:	681b      	ldr	r3, [r3, #0]
 800682c:	685b      	ldr	r3, [r3, #4]
 800682e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8006830:	687b      	ldr	r3, [r7, #4]
 8006832:	681b      	ldr	r3, [r3, #0]
 8006834:	689b      	ldr	r3, [r3, #8]
 8006836:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8006838:	68fb      	ldr	r3, [r7, #12]
 800683a:	2270      	movs	r2, #112	; 0x70
 800683c:	4393      	bics	r3, r2
 800683e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8006840:	683b      	ldr	r3, [r7, #0]
 8006842:	681b      	ldr	r3, [r3, #0]
 8006844:	68fa      	ldr	r2, [r7, #12]
 8006846:	4313      	orrs	r3, r2
 8006848:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800684a:	687b      	ldr	r3, [r7, #4]
 800684c:	681b      	ldr	r3, [r3, #0]
 800684e:	68fa      	ldr	r2, [r7, #12]
 8006850:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006852:	687b      	ldr	r3, [r7, #4]
 8006854:	681b      	ldr	r3, [r3, #0]
 8006856:	4a16      	ldr	r2, [pc, #88]	; (80068b0 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 8006858:	4293      	cmp	r3, r2
 800685a:	d00f      	beq.n	800687c <HAL_TIMEx_MasterConfigSynchronization+0x7c>
 800685c:	687b      	ldr	r3, [r7, #4]
 800685e:	681a      	ldr	r2, [r3, #0]
 8006860:	2380      	movs	r3, #128	; 0x80
 8006862:	05db      	lsls	r3, r3, #23
 8006864:	429a      	cmp	r2, r3
 8006866:	d009      	beq.n	800687c <HAL_TIMEx_MasterConfigSynchronization+0x7c>
 8006868:	687b      	ldr	r3, [r7, #4]
 800686a:	681b      	ldr	r3, [r3, #0]
 800686c:	4a11      	ldr	r2, [pc, #68]	; (80068b4 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 800686e:	4293      	cmp	r3, r2
 8006870:	d004      	beq.n	800687c <HAL_TIMEx_MasterConfigSynchronization+0x7c>
 8006872:	687b      	ldr	r3, [r7, #4]
 8006874:	681b      	ldr	r3, [r3, #0]
 8006876:	4a10      	ldr	r2, [pc, #64]	; (80068b8 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 8006878:	4293      	cmp	r3, r2
 800687a:	d10c      	bne.n	8006896 <HAL_TIMEx_MasterConfigSynchronization+0x96>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800687c:	68bb      	ldr	r3, [r7, #8]
 800687e:	2280      	movs	r2, #128	; 0x80
 8006880:	4393      	bics	r3, r2
 8006882:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8006884:	683b      	ldr	r3, [r7, #0]
 8006886:	685b      	ldr	r3, [r3, #4]
 8006888:	68ba      	ldr	r2, [r7, #8]
 800688a:	4313      	orrs	r3, r2
 800688c:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800688e:	687b      	ldr	r3, [r7, #4]
 8006890:	681b      	ldr	r3, [r3, #0]
 8006892:	68ba      	ldr	r2, [r7, #8]
 8006894:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8006896:	687b      	ldr	r3, [r7, #4]
 8006898:	223d      	movs	r2, #61	; 0x3d
 800689a:	2101      	movs	r1, #1
 800689c:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 800689e:	687b      	ldr	r3, [r7, #4]
 80068a0:	223c      	movs	r2, #60	; 0x3c
 80068a2:	2100      	movs	r1, #0
 80068a4:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80068a6:	2300      	movs	r3, #0
}
 80068a8:	0018      	movs	r0, r3
 80068aa:	46bd      	mov	sp, r7
 80068ac:	b004      	add	sp, #16
 80068ae:	bd80      	pop	{r7, pc}
 80068b0:	40012c00 	.word	0x40012c00
 80068b4:	40000400 	.word	0x40000400
 80068b8:	40014000 	.word	0x40014000

080068bc <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 80068bc:	b580      	push	{r7, lr}
 80068be:	b084      	sub	sp, #16
 80068c0:	af00      	add	r7, sp, #0
 80068c2:	6078      	str	r0, [r7, #4]
 80068c4:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 80068c6:	2300      	movs	r3, #0
 80068c8:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 80068ca:	687b      	ldr	r3, [r7, #4]
 80068cc:	223c      	movs	r2, #60	; 0x3c
 80068ce:	5c9b      	ldrb	r3, [r3, r2]
 80068d0:	2b01      	cmp	r3, #1
 80068d2:	d101      	bne.n	80068d8 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 80068d4:	2302      	movs	r3, #2
 80068d6:	e03e      	b.n	8006956 <HAL_TIMEx_ConfigBreakDeadTime+0x9a>
 80068d8:	687b      	ldr	r3, [r7, #4]
 80068da:	223c      	movs	r2, #60	; 0x3c
 80068dc:	2101      	movs	r1, #1
 80068de:	5499      	strb	r1, [r3, r2]

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 80068e0:	68fb      	ldr	r3, [r7, #12]
 80068e2:	22ff      	movs	r2, #255	; 0xff
 80068e4:	4393      	bics	r3, r2
 80068e6:	001a      	movs	r2, r3
 80068e8:	683b      	ldr	r3, [r7, #0]
 80068ea:	68db      	ldr	r3, [r3, #12]
 80068ec:	4313      	orrs	r3, r2
 80068ee:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 80068f0:	68fb      	ldr	r3, [r7, #12]
 80068f2:	4a1b      	ldr	r2, [pc, #108]	; (8006960 <HAL_TIMEx_ConfigBreakDeadTime+0xa4>)
 80068f4:	401a      	ands	r2, r3
 80068f6:	683b      	ldr	r3, [r7, #0]
 80068f8:	689b      	ldr	r3, [r3, #8]
 80068fa:	4313      	orrs	r3, r2
 80068fc:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 80068fe:	68fb      	ldr	r3, [r7, #12]
 8006900:	4a18      	ldr	r2, [pc, #96]	; (8006964 <HAL_TIMEx_ConfigBreakDeadTime+0xa8>)
 8006902:	401a      	ands	r2, r3
 8006904:	683b      	ldr	r3, [r7, #0]
 8006906:	685b      	ldr	r3, [r3, #4]
 8006908:	4313      	orrs	r3, r2
 800690a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 800690c:	68fb      	ldr	r3, [r7, #12]
 800690e:	4a16      	ldr	r2, [pc, #88]	; (8006968 <HAL_TIMEx_ConfigBreakDeadTime+0xac>)
 8006910:	401a      	ands	r2, r3
 8006912:	683b      	ldr	r3, [r7, #0]
 8006914:	681b      	ldr	r3, [r3, #0]
 8006916:	4313      	orrs	r3, r2
 8006918:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 800691a:	68fb      	ldr	r3, [r7, #12]
 800691c:	4a13      	ldr	r2, [pc, #76]	; (800696c <HAL_TIMEx_ConfigBreakDeadTime+0xb0>)
 800691e:	401a      	ands	r2, r3
 8006920:	683b      	ldr	r3, [r7, #0]
 8006922:	691b      	ldr	r3, [r3, #16]
 8006924:	4313      	orrs	r3, r2
 8006926:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8006928:	68fb      	ldr	r3, [r7, #12]
 800692a:	4a11      	ldr	r2, [pc, #68]	; (8006970 <HAL_TIMEx_ConfigBreakDeadTime+0xb4>)
 800692c:	401a      	ands	r2, r3
 800692e:	683b      	ldr	r3, [r7, #0]
 8006930:	695b      	ldr	r3, [r3, #20]
 8006932:	4313      	orrs	r3, r2
 8006934:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8006936:	68fb      	ldr	r3, [r7, #12]
 8006938:	4a0e      	ldr	r2, [pc, #56]	; (8006974 <HAL_TIMEx_ConfigBreakDeadTime+0xb8>)
 800693a:	401a      	ands	r2, r3
 800693c:	683b      	ldr	r3, [r7, #0]
 800693e:	69db      	ldr	r3, [r3, #28]
 8006940:	4313      	orrs	r3, r2
 8006942:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8006944:	687b      	ldr	r3, [r7, #4]
 8006946:	681b      	ldr	r3, [r3, #0]
 8006948:	68fa      	ldr	r2, [r7, #12]
 800694a:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 800694c:	687b      	ldr	r3, [r7, #4]
 800694e:	223c      	movs	r2, #60	; 0x3c
 8006950:	2100      	movs	r1, #0
 8006952:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8006954:	2300      	movs	r3, #0
}
 8006956:	0018      	movs	r0, r3
 8006958:	46bd      	mov	sp, r7
 800695a:	b004      	add	sp, #16
 800695c:	bd80      	pop	{r7, pc}
 800695e:	46c0      	nop			; (mov r8, r8)
 8006960:	fffffcff 	.word	0xfffffcff
 8006964:	fffffbff 	.word	0xfffffbff
 8006968:	fffff7ff 	.word	0xfffff7ff
 800696c:	ffffefff 	.word	0xffffefff
 8006970:	ffffdfff 	.word	0xffffdfff
 8006974:	ffffbfff 	.word	0xffffbfff

08006978 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8006978:	b580      	push	{r7, lr}
 800697a:	b082      	sub	sp, #8
 800697c:	af00      	add	r7, sp, #0
 800697e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8006980:	46c0      	nop			; (mov r8, r8)
 8006982:	46bd      	mov	sp, r7
 8006984:	b002      	add	sp, #8
 8006986:	bd80      	pop	{r7, pc}

08006988 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8006988:	b580      	push	{r7, lr}
 800698a:	b082      	sub	sp, #8
 800698c:	af00      	add	r7, sp, #0
 800698e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8006990:	46c0      	nop			; (mov r8, r8)
 8006992:	46bd      	mov	sp, r7
 8006994:	b002      	add	sp, #8
 8006996:	bd80      	pop	{r7, pc}

08006998 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8006998:	b580      	push	{r7, lr}
 800699a:	b082      	sub	sp, #8
 800699c:	af00      	add	r7, sp, #0
 800699e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80069a0:	687b      	ldr	r3, [r7, #4]
 80069a2:	2b00      	cmp	r3, #0
 80069a4:	d101      	bne.n	80069aa <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80069a6:	2301      	movs	r3, #1
 80069a8:	e044      	b.n	8006a34 <HAL_UART_Init+0x9c>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80069aa:	687b      	ldr	r3, [r7, #4]
 80069ac:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80069ae:	2b00      	cmp	r3, #0
 80069b0:	d107      	bne.n	80069c2 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80069b2:	687b      	ldr	r3, [r7, #4]
 80069b4:	2270      	movs	r2, #112	; 0x70
 80069b6:	2100      	movs	r1, #0
 80069b8:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80069ba:	687b      	ldr	r3, [r7, #4]
 80069bc:	0018      	movs	r0, r3
 80069be:	f7fd fbd7 	bl	8004170 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80069c2:	687b      	ldr	r3, [r7, #4]
 80069c4:	2224      	movs	r2, #36	; 0x24
 80069c6:	675a      	str	r2, [r3, #116]	; 0x74

  __HAL_UART_DISABLE(huart);
 80069c8:	687b      	ldr	r3, [r7, #4]
 80069ca:	681b      	ldr	r3, [r3, #0]
 80069cc:	681a      	ldr	r2, [r3, #0]
 80069ce:	687b      	ldr	r3, [r7, #4]
 80069d0:	681b      	ldr	r3, [r3, #0]
 80069d2:	2101      	movs	r1, #1
 80069d4:	438a      	bics	r2, r1
 80069d6:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80069d8:	687b      	ldr	r3, [r7, #4]
 80069da:	0018      	movs	r0, r3
 80069dc:	f000 fa24 	bl	8006e28 <UART_SetConfig>
 80069e0:	0003      	movs	r3, r0
 80069e2:	2b01      	cmp	r3, #1
 80069e4:	d101      	bne.n	80069ea <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 80069e6:	2301      	movs	r3, #1
 80069e8:	e024      	b.n	8006a34 <HAL_UART_Init+0x9c>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80069ea:	687b      	ldr	r3, [r7, #4]
 80069ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80069ee:	2b00      	cmp	r3, #0
 80069f0:	d003      	beq.n	80069fa <HAL_UART_Init+0x62>
  {
    UART_AdvFeatureConfig(huart);
 80069f2:	687b      	ldr	r3, [r7, #4]
 80069f4:	0018      	movs	r0, r3
 80069f6:	f000 fb9d 	bl	8007134 <UART_AdvFeatureConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN (if LIN is supported) and CLKEN bits in the USART_CR2 register,
  - SCEN (if Smartcard is supported), HDSEL and IREN (if IrDA is supported)  bits in the USART_CR3 register.*/
#if defined (USART_CR2_LINEN)
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80069fa:	687b      	ldr	r3, [r7, #4]
 80069fc:	681b      	ldr	r3, [r3, #0]
 80069fe:	685a      	ldr	r2, [r3, #4]
 8006a00:	687b      	ldr	r3, [r7, #4]
 8006a02:	681b      	ldr	r3, [r3, #0]
 8006a04:	490d      	ldr	r1, [pc, #52]	; (8006a3c <HAL_UART_Init+0xa4>)
 8006a06:	400a      	ands	r2, r1
 8006a08:	605a      	str	r2, [r3, #4]
#else
  CLEAR_BIT(huart->Instance->CR2, USART_CR2_CLKEN);
#endif /* USART_CR2_LINEN */
#if defined (USART_CR3_SCEN)
#if defined (USART_CR3_IREN)
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8006a0a:	687b      	ldr	r3, [r7, #4]
 8006a0c:	681b      	ldr	r3, [r3, #0]
 8006a0e:	689a      	ldr	r2, [r3, #8]
 8006a10:	687b      	ldr	r3, [r7, #4]
 8006a12:	681b      	ldr	r3, [r3, #0]
 8006a14:	212a      	movs	r1, #42	; 0x2a
 8006a16:	438a      	bics	r2, r1
 8006a18:	609a      	str	r2, [r3, #8]
#else
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_HDSEL);
#endif /* USART_CR3_IREN*/
#endif /* USART_CR3_SCEN */

  __HAL_UART_ENABLE(huart);
 8006a1a:	687b      	ldr	r3, [r7, #4]
 8006a1c:	681b      	ldr	r3, [r3, #0]
 8006a1e:	681a      	ldr	r2, [r3, #0]
 8006a20:	687b      	ldr	r3, [r7, #4]
 8006a22:	681b      	ldr	r3, [r3, #0]
 8006a24:	2101      	movs	r1, #1
 8006a26:	430a      	orrs	r2, r1
 8006a28:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8006a2a:	687b      	ldr	r3, [r7, #4]
 8006a2c:	0018      	movs	r0, r3
 8006a2e:	f000 fc35 	bl	800729c <UART_CheckIdleState>
 8006a32:	0003      	movs	r3, r0
}
 8006a34:	0018      	movs	r0, r3
 8006a36:	46bd      	mov	sp, r7
 8006a38:	b002      	add	sp, #8
 8006a3a:	bd80      	pop	{r7, pc}
 8006a3c:	ffffb7ff 	.word	0xffffb7ff

08006a40 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006a40:	b580      	push	{r7, lr}
 8006a42:	b08a      	sub	sp, #40	; 0x28
 8006a44:	af02      	add	r7, sp, #8
 8006a46:	60f8      	str	r0, [r7, #12]
 8006a48:	60b9      	str	r1, [r7, #8]
 8006a4a:	603b      	str	r3, [r7, #0]
 8006a4c:	1dbb      	adds	r3, r7, #6
 8006a4e:	801a      	strh	r2, [r3, #0]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8006a50:	68fb      	ldr	r3, [r7, #12]
 8006a52:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006a54:	2b20      	cmp	r3, #32
 8006a56:	d000      	beq.n	8006a5a <HAL_UART_Transmit+0x1a>
 8006a58:	e095      	b.n	8006b86 <HAL_UART_Transmit+0x146>
  {
    if ((pData == NULL) || (Size == 0U))
 8006a5a:	68bb      	ldr	r3, [r7, #8]
 8006a5c:	2b00      	cmp	r3, #0
 8006a5e:	d003      	beq.n	8006a68 <HAL_UART_Transmit+0x28>
 8006a60:	1dbb      	adds	r3, r7, #6
 8006a62:	881b      	ldrh	r3, [r3, #0]
 8006a64:	2b00      	cmp	r3, #0
 8006a66:	d101      	bne.n	8006a6c <HAL_UART_Transmit+0x2c>
    {
      return  HAL_ERROR;
 8006a68:	2301      	movs	r3, #1
 8006a6a:	e08d      	b.n	8006b88 <HAL_UART_Transmit+0x148>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data to be filled into TDR will be
       handled through a u16 cast. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006a6c:	68fb      	ldr	r3, [r7, #12]
 8006a6e:	689a      	ldr	r2, [r3, #8]
 8006a70:	2380      	movs	r3, #128	; 0x80
 8006a72:	015b      	lsls	r3, r3, #5
 8006a74:	429a      	cmp	r2, r3
 8006a76:	d109      	bne.n	8006a8c <HAL_UART_Transmit+0x4c>
 8006a78:	68fb      	ldr	r3, [r7, #12]
 8006a7a:	691b      	ldr	r3, [r3, #16]
 8006a7c:	2b00      	cmp	r3, #0
 8006a7e:	d105      	bne.n	8006a8c <HAL_UART_Transmit+0x4c>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 8006a80:	68bb      	ldr	r3, [r7, #8]
 8006a82:	2201      	movs	r2, #1
 8006a84:	4013      	ands	r3, r2
 8006a86:	d001      	beq.n	8006a8c <HAL_UART_Transmit+0x4c>
      {
        return  HAL_ERROR;
 8006a88:	2301      	movs	r3, #1
 8006a8a:	e07d      	b.n	8006b88 <HAL_UART_Transmit+0x148>
      }
    }

    __HAL_LOCK(huart);
 8006a8c:	68fb      	ldr	r3, [r7, #12]
 8006a8e:	2270      	movs	r2, #112	; 0x70
 8006a90:	5c9b      	ldrb	r3, [r3, r2]
 8006a92:	2b01      	cmp	r3, #1
 8006a94:	d101      	bne.n	8006a9a <HAL_UART_Transmit+0x5a>
 8006a96:	2302      	movs	r3, #2
 8006a98:	e076      	b.n	8006b88 <HAL_UART_Transmit+0x148>
 8006a9a:	68fb      	ldr	r3, [r7, #12]
 8006a9c:	2270      	movs	r2, #112	; 0x70
 8006a9e:	2101      	movs	r1, #1
 8006aa0:	5499      	strb	r1, [r3, r2]

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006aa2:	68fb      	ldr	r3, [r7, #12]
 8006aa4:	2200      	movs	r2, #0
 8006aa6:	67da      	str	r2, [r3, #124]	; 0x7c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8006aa8:	68fb      	ldr	r3, [r7, #12]
 8006aaa:	2221      	movs	r2, #33	; 0x21
 8006aac:	675a      	str	r2, [r3, #116]	; 0x74

    /* Init tickstart for timeout managment*/
    tickstart = HAL_GetTick();
 8006aae:	f7fd fc89 	bl	80043c4 <HAL_GetTick>
 8006ab2:	0003      	movs	r3, r0
 8006ab4:	617b      	str	r3, [r7, #20]

    huart->TxXferSize  = Size;
 8006ab6:	68fb      	ldr	r3, [r7, #12]
 8006ab8:	1dba      	adds	r2, r7, #6
 8006aba:	2150      	movs	r1, #80	; 0x50
 8006abc:	8812      	ldrh	r2, [r2, #0]
 8006abe:	525a      	strh	r2, [r3, r1]
    huart->TxXferCount = Size;
 8006ac0:	68fb      	ldr	r3, [r7, #12]
 8006ac2:	1dba      	adds	r2, r7, #6
 8006ac4:	2152      	movs	r1, #82	; 0x52
 8006ac6:	8812      	ldrh	r2, [r2, #0]
 8006ac8:	525a      	strh	r2, [r3, r1]

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006aca:	68fb      	ldr	r3, [r7, #12]
 8006acc:	689a      	ldr	r2, [r3, #8]
 8006ace:	2380      	movs	r3, #128	; 0x80
 8006ad0:	015b      	lsls	r3, r3, #5
 8006ad2:	429a      	cmp	r2, r3
 8006ad4:	d108      	bne.n	8006ae8 <HAL_UART_Transmit+0xa8>
 8006ad6:	68fb      	ldr	r3, [r7, #12]
 8006ad8:	691b      	ldr	r3, [r3, #16]
 8006ada:	2b00      	cmp	r3, #0
 8006adc:	d104      	bne.n	8006ae8 <HAL_UART_Transmit+0xa8>
    {
      pdata8bits  = NULL;
 8006ade:	2300      	movs	r3, #0
 8006ae0:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8006ae2:	68bb      	ldr	r3, [r7, #8]
 8006ae4:	61bb      	str	r3, [r7, #24]
 8006ae6:	e003      	b.n	8006af0 <HAL_UART_Transmit+0xb0>
    }
    else
    {
      pdata8bits  = pData;
 8006ae8:	68bb      	ldr	r3, [r7, #8]
 8006aea:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8006aec:	2300      	movs	r3, #0
 8006aee:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8006af0:	e02d      	b.n	8006b4e <HAL_UART_Transmit+0x10e>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8006af2:	697a      	ldr	r2, [r7, #20]
 8006af4:	68f8      	ldr	r0, [r7, #12]
 8006af6:	683b      	ldr	r3, [r7, #0]
 8006af8:	9300      	str	r3, [sp, #0]
 8006afa:	0013      	movs	r3, r2
 8006afc:	2200      	movs	r2, #0
 8006afe:	2180      	movs	r1, #128	; 0x80
 8006b00:	f000 fc12 	bl	8007328 <UART_WaitOnFlagUntilTimeout>
 8006b04:	1e03      	subs	r3, r0, #0
 8006b06:	d001      	beq.n	8006b0c <HAL_UART_Transmit+0xcc>
      {
        return HAL_TIMEOUT;
 8006b08:	2303      	movs	r3, #3
 8006b0a:	e03d      	b.n	8006b88 <HAL_UART_Transmit+0x148>
      }
      if (pdata8bits == NULL)
 8006b0c:	69fb      	ldr	r3, [r7, #28]
 8006b0e:	2b00      	cmp	r3, #0
 8006b10:	d10b      	bne.n	8006b2a <HAL_UART_Transmit+0xea>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8006b12:	69bb      	ldr	r3, [r7, #24]
 8006b14:	881a      	ldrh	r2, [r3, #0]
 8006b16:	68fb      	ldr	r3, [r7, #12]
 8006b18:	681b      	ldr	r3, [r3, #0]
 8006b1a:	05d2      	lsls	r2, r2, #23
 8006b1c:	0dd2      	lsrs	r2, r2, #23
 8006b1e:	b292      	uxth	r2, r2
 8006b20:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8006b22:	69bb      	ldr	r3, [r7, #24]
 8006b24:	3302      	adds	r3, #2
 8006b26:	61bb      	str	r3, [r7, #24]
 8006b28:	e008      	b.n	8006b3c <HAL_UART_Transmit+0xfc>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8006b2a:	69fb      	ldr	r3, [r7, #28]
 8006b2c:	781a      	ldrb	r2, [r3, #0]
 8006b2e:	68fb      	ldr	r3, [r7, #12]
 8006b30:	681b      	ldr	r3, [r3, #0]
 8006b32:	b292      	uxth	r2, r2
 8006b34:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8006b36:	69fb      	ldr	r3, [r7, #28]
 8006b38:	3301      	adds	r3, #1
 8006b3a:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8006b3c:	68fb      	ldr	r3, [r7, #12]
 8006b3e:	2252      	movs	r2, #82	; 0x52
 8006b40:	5a9b      	ldrh	r3, [r3, r2]
 8006b42:	b29b      	uxth	r3, r3
 8006b44:	3b01      	subs	r3, #1
 8006b46:	b299      	uxth	r1, r3
 8006b48:	68fb      	ldr	r3, [r7, #12]
 8006b4a:	2252      	movs	r2, #82	; 0x52
 8006b4c:	5299      	strh	r1, [r3, r2]
    while (huart->TxXferCount > 0U)
 8006b4e:	68fb      	ldr	r3, [r7, #12]
 8006b50:	2252      	movs	r2, #82	; 0x52
 8006b52:	5a9b      	ldrh	r3, [r3, r2]
 8006b54:	b29b      	uxth	r3, r3
 8006b56:	2b00      	cmp	r3, #0
 8006b58:	d1cb      	bne.n	8006af2 <HAL_UART_Transmit+0xb2>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8006b5a:	697a      	ldr	r2, [r7, #20]
 8006b5c:	68f8      	ldr	r0, [r7, #12]
 8006b5e:	683b      	ldr	r3, [r7, #0]
 8006b60:	9300      	str	r3, [sp, #0]
 8006b62:	0013      	movs	r3, r2
 8006b64:	2200      	movs	r2, #0
 8006b66:	2140      	movs	r1, #64	; 0x40
 8006b68:	f000 fbde 	bl	8007328 <UART_WaitOnFlagUntilTimeout>
 8006b6c:	1e03      	subs	r3, r0, #0
 8006b6e:	d001      	beq.n	8006b74 <HAL_UART_Transmit+0x134>
    {
      return HAL_TIMEOUT;
 8006b70:	2303      	movs	r3, #3
 8006b72:	e009      	b.n	8006b88 <HAL_UART_Transmit+0x148>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8006b74:	68fb      	ldr	r3, [r7, #12]
 8006b76:	2220      	movs	r2, #32
 8006b78:	675a      	str	r2, [r3, #116]	; 0x74

    __HAL_UNLOCK(huart);
 8006b7a:	68fb      	ldr	r3, [r7, #12]
 8006b7c:	2270      	movs	r2, #112	; 0x70
 8006b7e:	2100      	movs	r1, #0
 8006b80:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8006b82:	2300      	movs	r3, #0
 8006b84:	e000      	b.n	8006b88 <HAL_UART_Transmit+0x148>
  }
  else
  {
    return HAL_BUSY;
 8006b86:	2302      	movs	r3, #2
  }
}
 8006b88:	0018      	movs	r0, r3
 8006b8a:	46bd      	mov	sp, r7
 8006b8c:	b008      	add	sp, #32
 8006b8e:	bd80      	pop	{r7, pc}

08006b90 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8006b90:	b580      	push	{r7, lr}
 8006b92:	b088      	sub	sp, #32
 8006b94:	af00      	add	r7, sp, #0
 8006b96:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8006b98:	687b      	ldr	r3, [r7, #4]
 8006b9a:	681b      	ldr	r3, [r3, #0]
 8006b9c:	69db      	ldr	r3, [r3, #28]
 8006b9e:	61fb      	str	r3, [r7, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8006ba0:	687b      	ldr	r3, [r7, #4]
 8006ba2:	681b      	ldr	r3, [r3, #0]
 8006ba4:	681b      	ldr	r3, [r3, #0]
 8006ba6:	61bb      	str	r3, [r7, #24]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8006ba8:	687b      	ldr	r3, [r7, #4]
 8006baa:	681b      	ldr	r3, [r3, #0]
 8006bac:	689b      	ldr	r3, [r3, #8]
 8006bae:	617b      	str	r3, [r7, #20]

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8006bb0:	69fb      	ldr	r3, [r7, #28]
 8006bb2:	4a93      	ldr	r2, [pc, #588]	; (8006e00 <HAL_UART_IRQHandler+0x270>)
 8006bb4:	4013      	ands	r3, r2
 8006bb6:	613b      	str	r3, [r7, #16]
  if (errorflags == 0U)
 8006bb8:	693b      	ldr	r3, [r7, #16]
 8006bba:	2b00      	cmp	r3, #0
 8006bbc:	d112      	bne.n	8006be4 <HAL_UART_IRQHandler+0x54>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE) != 0U)
 8006bbe:	69fb      	ldr	r3, [r7, #28]
 8006bc0:	2220      	movs	r2, #32
 8006bc2:	4013      	ands	r3, r2
 8006bc4:	d00e      	beq.n	8006be4 <HAL_UART_IRQHandler+0x54>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8006bc6:	69bb      	ldr	r3, [r7, #24]
 8006bc8:	2220      	movs	r2, #32
 8006bca:	4013      	ands	r3, r2
 8006bcc:	d00a      	beq.n	8006be4 <HAL_UART_IRQHandler+0x54>
    {
      if (huart->RxISR != NULL)
 8006bce:	687b      	ldr	r3, [r7, #4]
 8006bd0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006bd2:	2b00      	cmp	r3, #0
 8006bd4:	d100      	bne.n	8006bd8 <HAL_UART_IRQHandler+0x48>
 8006bd6:	e10b      	b.n	8006df0 <HAL_UART_IRQHandler+0x260>
      {
        huart->RxISR(huart);
 8006bd8:	687b      	ldr	r3, [r7, #4]
 8006bda:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006bdc:	687a      	ldr	r2, [r7, #4]
 8006bde:	0010      	movs	r0, r2
 8006be0:	4798      	blx	r3
      }
      return;
 8006be2:	e105      	b.n	8006df0 <HAL_UART_IRQHandler+0x260>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8006be4:	693b      	ldr	r3, [r7, #16]
 8006be6:	2b00      	cmp	r3, #0
 8006be8:	d100      	bne.n	8006bec <HAL_UART_IRQHandler+0x5c>
 8006bea:	e0cd      	b.n	8006d88 <HAL_UART_IRQHandler+0x1f8>
      && (((cr3its & USART_CR3_EIE) != 0U)
 8006bec:	697b      	ldr	r3, [r7, #20]
 8006bee:	2201      	movs	r2, #1
 8006bf0:	4013      	ands	r3, r2
 8006bf2:	d105      	bne.n	8006c00 <HAL_UART_IRQHandler+0x70>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != 0U)))
 8006bf4:	69ba      	ldr	r2, [r7, #24]
 8006bf6:	2390      	movs	r3, #144	; 0x90
 8006bf8:	005b      	lsls	r3, r3, #1
 8006bfa:	4013      	ands	r3, r2
 8006bfc:	d100      	bne.n	8006c00 <HAL_UART_IRQHandler+0x70>
 8006bfe:	e0c3      	b.n	8006d88 <HAL_UART_IRQHandler+0x1f8>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8006c00:	69fb      	ldr	r3, [r7, #28]
 8006c02:	2201      	movs	r2, #1
 8006c04:	4013      	ands	r3, r2
 8006c06:	d00e      	beq.n	8006c26 <HAL_UART_IRQHandler+0x96>
 8006c08:	69ba      	ldr	r2, [r7, #24]
 8006c0a:	2380      	movs	r3, #128	; 0x80
 8006c0c:	005b      	lsls	r3, r3, #1
 8006c0e:	4013      	ands	r3, r2
 8006c10:	d009      	beq.n	8006c26 <HAL_UART_IRQHandler+0x96>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8006c12:	687b      	ldr	r3, [r7, #4]
 8006c14:	681b      	ldr	r3, [r3, #0]
 8006c16:	2201      	movs	r2, #1
 8006c18:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8006c1a:	687b      	ldr	r3, [r7, #4]
 8006c1c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8006c1e:	2201      	movs	r2, #1
 8006c20:	431a      	orrs	r2, r3
 8006c22:	687b      	ldr	r3, [r7, #4]
 8006c24:	67da      	str	r2, [r3, #124]	; 0x7c
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8006c26:	69fb      	ldr	r3, [r7, #28]
 8006c28:	2202      	movs	r2, #2
 8006c2a:	4013      	ands	r3, r2
 8006c2c:	d00d      	beq.n	8006c4a <HAL_UART_IRQHandler+0xba>
 8006c2e:	697b      	ldr	r3, [r7, #20]
 8006c30:	2201      	movs	r2, #1
 8006c32:	4013      	ands	r3, r2
 8006c34:	d009      	beq.n	8006c4a <HAL_UART_IRQHandler+0xba>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8006c36:	687b      	ldr	r3, [r7, #4]
 8006c38:	681b      	ldr	r3, [r3, #0]
 8006c3a:	2202      	movs	r2, #2
 8006c3c:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8006c3e:	687b      	ldr	r3, [r7, #4]
 8006c40:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8006c42:	2204      	movs	r2, #4
 8006c44:	431a      	orrs	r2, r3
 8006c46:	687b      	ldr	r3, [r7, #4]
 8006c48:	67da      	str	r2, [r3, #124]	; 0x7c
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8006c4a:	69fb      	ldr	r3, [r7, #28]
 8006c4c:	2204      	movs	r2, #4
 8006c4e:	4013      	ands	r3, r2
 8006c50:	d00d      	beq.n	8006c6e <HAL_UART_IRQHandler+0xde>
 8006c52:	697b      	ldr	r3, [r7, #20]
 8006c54:	2201      	movs	r2, #1
 8006c56:	4013      	ands	r3, r2
 8006c58:	d009      	beq.n	8006c6e <HAL_UART_IRQHandler+0xde>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8006c5a:	687b      	ldr	r3, [r7, #4]
 8006c5c:	681b      	ldr	r3, [r3, #0]
 8006c5e:	2204      	movs	r2, #4
 8006c60:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8006c62:	687b      	ldr	r3, [r7, #4]
 8006c64:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8006c66:	2202      	movs	r2, #2
 8006c68:	431a      	orrs	r2, r3
 8006c6a:	687b      	ldr	r3, [r7, #4]
 8006c6c:	67da      	str	r2, [r3, #124]	; 0x7c
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8006c6e:	69fb      	ldr	r3, [r7, #28]
 8006c70:	2208      	movs	r2, #8
 8006c72:	4013      	ands	r3, r2
 8006c74:	d011      	beq.n	8006c9a <HAL_UART_IRQHandler+0x10a>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8006c76:	69bb      	ldr	r3, [r7, #24]
 8006c78:	2220      	movs	r2, #32
 8006c7a:	4013      	ands	r3, r2
 8006c7c:	d103      	bne.n	8006c86 <HAL_UART_IRQHandler+0xf6>
            ((cr3its & USART_CR3_EIE) != 0U)))
 8006c7e:	697b      	ldr	r3, [r7, #20]
 8006c80:	2201      	movs	r2, #1
 8006c82:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8006c84:	d009      	beq.n	8006c9a <HAL_UART_IRQHandler+0x10a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8006c86:	687b      	ldr	r3, [r7, #4]
 8006c88:	681b      	ldr	r3, [r3, #0]
 8006c8a:	2208      	movs	r2, #8
 8006c8c:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8006c8e:	687b      	ldr	r3, [r7, #4]
 8006c90:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8006c92:	2208      	movs	r2, #8
 8006c94:	431a      	orrs	r2, r3
 8006c96:	687b      	ldr	r3, [r7, #4]
 8006c98:	67da      	str	r2, [r3, #124]	; 0x7c
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8006c9a:	69fa      	ldr	r2, [r7, #28]
 8006c9c:	2380      	movs	r3, #128	; 0x80
 8006c9e:	011b      	lsls	r3, r3, #4
 8006ca0:	4013      	ands	r3, r2
 8006ca2:	d00f      	beq.n	8006cc4 <HAL_UART_IRQHandler+0x134>
 8006ca4:	69ba      	ldr	r2, [r7, #24]
 8006ca6:	2380      	movs	r3, #128	; 0x80
 8006ca8:	04db      	lsls	r3, r3, #19
 8006caa:	4013      	ands	r3, r2
 8006cac:	d00a      	beq.n	8006cc4 <HAL_UART_IRQHandler+0x134>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8006cae:	687b      	ldr	r3, [r7, #4]
 8006cb0:	681b      	ldr	r3, [r3, #0]
 8006cb2:	2280      	movs	r2, #128	; 0x80
 8006cb4:	0112      	lsls	r2, r2, #4
 8006cb6:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8006cb8:	687b      	ldr	r3, [r7, #4]
 8006cba:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8006cbc:	2220      	movs	r2, #32
 8006cbe:	431a      	orrs	r2, r3
 8006cc0:	687b      	ldr	r3, [r7, #4]
 8006cc2:	67da      	str	r2, [r3, #124]	; 0x7c
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8006cc4:	687b      	ldr	r3, [r7, #4]
 8006cc6:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8006cc8:	2b00      	cmp	r3, #0
 8006cca:	d100      	bne.n	8006cce <HAL_UART_IRQHandler+0x13e>
 8006ccc:	e092      	b.n	8006df4 <HAL_UART_IRQHandler+0x264>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE) != 0U)
 8006cce:	69fb      	ldr	r3, [r7, #28]
 8006cd0:	2220      	movs	r2, #32
 8006cd2:	4013      	ands	r3, r2
 8006cd4:	d00c      	beq.n	8006cf0 <HAL_UART_IRQHandler+0x160>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8006cd6:	69bb      	ldr	r3, [r7, #24]
 8006cd8:	2220      	movs	r2, #32
 8006cda:	4013      	ands	r3, r2
 8006cdc:	d008      	beq.n	8006cf0 <HAL_UART_IRQHandler+0x160>
      {
        if (huart->RxISR != NULL)
 8006cde:	687b      	ldr	r3, [r7, #4]
 8006ce0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006ce2:	2b00      	cmp	r3, #0
 8006ce4:	d004      	beq.n	8006cf0 <HAL_UART_IRQHandler+0x160>
        {
          huart->RxISR(huart);
 8006ce6:	687b      	ldr	r3, [r7, #4]
 8006ce8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006cea:	687a      	ldr	r2, [r7, #4]
 8006cec:	0010      	movs	r0, r2
 8006cee:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8006cf0:	687b      	ldr	r3, [r7, #4]
 8006cf2:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8006cf4:	60fb      	str	r3, [r7, #12]
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8006cf6:	687b      	ldr	r3, [r7, #4]
 8006cf8:	681b      	ldr	r3, [r3, #0]
 8006cfa:	689b      	ldr	r3, [r3, #8]
 8006cfc:	2240      	movs	r2, #64	; 0x40
 8006cfe:	4013      	ands	r3, r2
 8006d00:	2b40      	cmp	r3, #64	; 0x40
 8006d02:	d003      	beq.n	8006d0c <HAL_UART_IRQHandler+0x17c>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8006d04:	68fb      	ldr	r3, [r7, #12]
 8006d06:	2228      	movs	r2, #40	; 0x28
 8006d08:	4013      	ands	r3, r2
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8006d0a:	d033      	beq.n	8006d74 <HAL_UART_IRQHandler+0x1e4>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8006d0c:	687b      	ldr	r3, [r7, #4]
 8006d0e:	0018      	movs	r0, r3
 8006d10:	f000 fb88 	bl	8007424 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006d14:	687b      	ldr	r3, [r7, #4]
 8006d16:	681b      	ldr	r3, [r3, #0]
 8006d18:	689b      	ldr	r3, [r3, #8]
 8006d1a:	2240      	movs	r2, #64	; 0x40
 8006d1c:	4013      	ands	r3, r2
 8006d1e:	2b40      	cmp	r3, #64	; 0x40
 8006d20:	d123      	bne.n	8006d6a <HAL_UART_IRQHandler+0x1da>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8006d22:	687b      	ldr	r3, [r7, #4]
 8006d24:	681b      	ldr	r3, [r3, #0]
 8006d26:	689a      	ldr	r2, [r3, #8]
 8006d28:	687b      	ldr	r3, [r7, #4]
 8006d2a:	681b      	ldr	r3, [r3, #0]
 8006d2c:	2140      	movs	r1, #64	; 0x40
 8006d2e:	438a      	bics	r2, r1
 8006d30:	609a      	str	r2, [r3, #8]

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8006d32:	687b      	ldr	r3, [r7, #4]
 8006d34:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006d36:	2b00      	cmp	r3, #0
 8006d38:	d012      	beq.n	8006d60 <HAL_UART_IRQHandler+0x1d0>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8006d3a:	687b      	ldr	r3, [r7, #4]
 8006d3c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006d3e:	4a31      	ldr	r2, [pc, #196]	; (8006e04 <HAL_UART_IRQHandler+0x274>)
 8006d40:	635a      	str	r2, [r3, #52]	; 0x34

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8006d42:	687b      	ldr	r3, [r7, #4]
 8006d44:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006d46:	0018      	movs	r0, r3
 8006d48:	f7fe f89f 	bl	8004e8a <HAL_DMA_Abort_IT>
 8006d4c:	1e03      	subs	r3, r0, #0
 8006d4e:	d019      	beq.n	8006d84 <HAL_UART_IRQHandler+0x1f4>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8006d50:	687b      	ldr	r3, [r7, #4]
 8006d52:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006d54:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006d56:	687b      	ldr	r3, [r7, #4]
 8006d58:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006d5a:	0018      	movs	r0, r3
 8006d5c:	4790      	blx	r2
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006d5e:	e011      	b.n	8006d84 <HAL_UART_IRQHandler+0x1f4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8006d60:	687b      	ldr	r3, [r7, #4]
 8006d62:	0018      	movs	r0, r3
 8006d64:	f000 f858 	bl	8006e18 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006d68:	e00c      	b.n	8006d84 <HAL_UART_IRQHandler+0x1f4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8006d6a:	687b      	ldr	r3, [r7, #4]
 8006d6c:	0018      	movs	r0, r3
 8006d6e:	f000 f853 	bl	8006e18 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006d72:	e007      	b.n	8006d84 <HAL_UART_IRQHandler+0x1f4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8006d74:	687b      	ldr	r3, [r7, #4]
 8006d76:	0018      	movs	r0, r3
 8006d78:	f000 f84e 	bl	8006e18 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006d7c:	687b      	ldr	r3, [r7, #4]
 8006d7e:	2200      	movs	r2, #0
 8006d80:	67da      	str	r2, [r3, #124]	; 0x7c
      }
    }
    return;
 8006d82:	e037      	b.n	8006df4 <HAL_UART_IRQHandler+0x264>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006d84:	46c0      	nop			; (mov r8, r8)
    return;
 8006d86:	e035      	b.n	8006df4 <HAL_UART_IRQHandler+0x264>

  } /* End if some error occurs */
#if defined(USART_CR1_UESM)

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8006d88:	69fa      	ldr	r2, [r7, #28]
 8006d8a:	2380      	movs	r3, #128	; 0x80
 8006d8c:	035b      	lsls	r3, r3, #13
 8006d8e:	4013      	ands	r3, r2
 8006d90:	d00e      	beq.n	8006db0 <HAL_UART_IRQHandler+0x220>
 8006d92:	697a      	ldr	r2, [r7, #20]
 8006d94:	2380      	movs	r3, #128	; 0x80
 8006d96:	03db      	lsls	r3, r3, #15
 8006d98:	4013      	ands	r3, r2
 8006d9a:	d009      	beq.n	8006db0 <HAL_UART_IRQHandler+0x220>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8006d9c:	687b      	ldr	r3, [r7, #4]
 8006d9e:	681b      	ldr	r3, [r3, #0]
 8006da0:	2280      	movs	r2, #128	; 0x80
 8006da2:	0352      	lsls	r2, r2, #13
 8006da4:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8006da6:	687b      	ldr	r3, [r7, #4]
 8006da8:	0018      	movs	r0, r3
 8006daa:	f000 fb8c 	bl	80074c6 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8006dae:	e024      	b.n	8006dfa <HAL_UART_IRQHandler+0x26a>
  }
#endif /* USART_CR1_UESM */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE) != 0U)
 8006db0:	69fb      	ldr	r3, [r7, #28]
 8006db2:	2280      	movs	r2, #128	; 0x80
 8006db4:	4013      	ands	r3, r2
 8006db6:	d00d      	beq.n	8006dd4 <HAL_UART_IRQHandler+0x244>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 8006db8:	69bb      	ldr	r3, [r7, #24]
 8006dba:	2280      	movs	r2, #128	; 0x80
 8006dbc:	4013      	ands	r3, r2
 8006dbe:	d009      	beq.n	8006dd4 <HAL_UART_IRQHandler+0x244>
  {
    if (huart->TxISR != NULL)
 8006dc0:	687b      	ldr	r3, [r7, #4]
 8006dc2:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006dc4:	2b00      	cmp	r3, #0
 8006dc6:	d017      	beq.n	8006df8 <HAL_UART_IRQHandler+0x268>
    {
      huart->TxISR(huart);
 8006dc8:	687b      	ldr	r3, [r7, #4]
 8006dca:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006dcc:	687a      	ldr	r2, [r7, #4]
 8006dce:	0010      	movs	r0, r2
 8006dd0:	4798      	blx	r3
    }
    return;
 8006dd2:	e011      	b.n	8006df8 <HAL_UART_IRQHandler+0x268>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8006dd4:	69fb      	ldr	r3, [r7, #28]
 8006dd6:	2240      	movs	r2, #64	; 0x40
 8006dd8:	4013      	ands	r3, r2
 8006dda:	d00e      	beq.n	8006dfa <HAL_UART_IRQHandler+0x26a>
 8006ddc:	69bb      	ldr	r3, [r7, #24]
 8006dde:	2240      	movs	r2, #64	; 0x40
 8006de0:	4013      	ands	r3, r2
 8006de2:	d00a      	beq.n	8006dfa <HAL_UART_IRQHandler+0x26a>
  {
    UART_EndTransmit_IT(huart);
 8006de4:	687b      	ldr	r3, [r7, #4]
 8006de6:	0018      	movs	r0, r3
 8006de8:	f000 fb53 	bl	8007492 <UART_EndTransmit_IT>
    return;
 8006dec:	46c0      	nop			; (mov r8, r8)
 8006dee:	e004      	b.n	8006dfa <HAL_UART_IRQHandler+0x26a>
      return;
 8006df0:	46c0      	nop			; (mov r8, r8)
 8006df2:	e002      	b.n	8006dfa <HAL_UART_IRQHandler+0x26a>
    return;
 8006df4:	46c0      	nop			; (mov r8, r8)
 8006df6:	e000      	b.n	8006dfa <HAL_UART_IRQHandler+0x26a>
    return;
 8006df8:	46c0      	nop			; (mov r8, r8)
  }

}
 8006dfa:	46bd      	mov	sp, r7
 8006dfc:	b008      	add	sp, #32
 8006dfe:	bd80      	pop	{r7, pc}
 8006e00:	0000080f 	.word	0x0000080f
 8006e04:	08007465 	.word	0x08007465

08006e08 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8006e08:	b580      	push	{r7, lr}
 8006e0a:	b082      	sub	sp, #8
 8006e0c:	af00      	add	r7, sp, #0
 8006e0e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8006e10:	46c0      	nop			; (mov r8, r8)
 8006e12:	46bd      	mov	sp, r7
 8006e14:	b002      	add	sp, #8
 8006e16:	bd80      	pop	{r7, pc}

08006e18 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8006e18:	b580      	push	{r7, lr}
 8006e1a:	b082      	sub	sp, #8
 8006e1c:	af00      	add	r7, sp, #0
 8006e1e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8006e20:	46c0      	nop			; (mov r8, r8)
 8006e22:	46bd      	mov	sp, r7
 8006e24:	b002      	add	sp, #8
 8006e26:	bd80      	pop	{r7, pc}

08006e28 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8006e28:	b580      	push	{r7, lr}
 8006e2a:	b088      	sub	sp, #32
 8006e2c:	af00      	add	r7, sp, #0
 8006e2e:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv                   = 0x00000000U;
 8006e30:	2300      	movs	r3, #0
 8006e32:	61bb      	str	r3, [r7, #24]
  HAL_StatusTypeDef ret               = HAL_OK;
 8006e34:	2317      	movs	r3, #23
 8006e36:	18fb      	adds	r3, r7, r3
 8006e38:	2200      	movs	r2, #0
 8006e3a:	701a      	strb	r2, [r3, #0]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8006e3c:	687b      	ldr	r3, [r7, #4]
 8006e3e:	689a      	ldr	r2, [r3, #8]
 8006e40:	687b      	ldr	r3, [r7, #4]
 8006e42:	691b      	ldr	r3, [r3, #16]
 8006e44:	431a      	orrs	r2, r3
 8006e46:	687b      	ldr	r3, [r7, #4]
 8006e48:	695b      	ldr	r3, [r3, #20]
 8006e4a:	431a      	orrs	r2, r3
 8006e4c:	687b      	ldr	r3, [r7, #4]
 8006e4e:	69db      	ldr	r3, [r3, #28]
 8006e50:	4313      	orrs	r3, r2
 8006e52:	613b      	str	r3, [r7, #16]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8006e54:	687b      	ldr	r3, [r7, #4]
 8006e56:	681b      	ldr	r3, [r3, #0]
 8006e58:	681b      	ldr	r3, [r3, #0]
 8006e5a:	4aad      	ldr	r2, [pc, #692]	; (8007110 <UART_SetConfig+0x2e8>)
 8006e5c:	4013      	ands	r3, r2
 8006e5e:	0019      	movs	r1, r3
 8006e60:	687b      	ldr	r3, [r7, #4]
 8006e62:	681b      	ldr	r3, [r3, #0]
 8006e64:	693a      	ldr	r2, [r7, #16]
 8006e66:	430a      	orrs	r2, r1
 8006e68:	601a      	str	r2, [r3, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8006e6a:	687b      	ldr	r3, [r7, #4]
 8006e6c:	681b      	ldr	r3, [r3, #0]
 8006e6e:	685b      	ldr	r3, [r3, #4]
 8006e70:	4aa8      	ldr	r2, [pc, #672]	; (8007114 <UART_SetConfig+0x2ec>)
 8006e72:	4013      	ands	r3, r2
 8006e74:	0019      	movs	r1, r3
 8006e76:	687b      	ldr	r3, [r7, #4]
 8006e78:	68da      	ldr	r2, [r3, #12]
 8006e7a:	687b      	ldr	r3, [r7, #4]
 8006e7c:	681b      	ldr	r3, [r3, #0]
 8006e7e:	430a      	orrs	r2, r1
 8006e80:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8006e82:	687b      	ldr	r3, [r7, #4]
 8006e84:	699b      	ldr	r3, [r3, #24]
 8006e86:	613b      	str	r3, [r7, #16]

  tmpreg |= huart->Init.OneBitSampling;
 8006e88:	687b      	ldr	r3, [r7, #4]
 8006e8a:	6a1b      	ldr	r3, [r3, #32]
 8006e8c:	693a      	ldr	r2, [r7, #16]
 8006e8e:	4313      	orrs	r3, r2
 8006e90:	613b      	str	r3, [r7, #16]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8006e92:	687b      	ldr	r3, [r7, #4]
 8006e94:	681b      	ldr	r3, [r3, #0]
 8006e96:	689b      	ldr	r3, [r3, #8]
 8006e98:	4a9f      	ldr	r2, [pc, #636]	; (8007118 <UART_SetConfig+0x2f0>)
 8006e9a:	4013      	ands	r3, r2
 8006e9c:	0019      	movs	r1, r3
 8006e9e:	687b      	ldr	r3, [r7, #4]
 8006ea0:	681b      	ldr	r3, [r3, #0]
 8006ea2:	693a      	ldr	r2, [r7, #16]
 8006ea4:	430a      	orrs	r2, r1
 8006ea6:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8006ea8:	687b      	ldr	r3, [r7, #4]
 8006eaa:	681b      	ldr	r3, [r3, #0]
 8006eac:	4a9b      	ldr	r2, [pc, #620]	; (800711c <UART_SetConfig+0x2f4>)
 8006eae:	4293      	cmp	r3, r2
 8006eb0:	d125      	bne.n	8006efe <UART_SetConfig+0xd6>
 8006eb2:	4b9b      	ldr	r3, [pc, #620]	; (8007120 <UART_SetConfig+0x2f8>)
 8006eb4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006eb6:	2203      	movs	r2, #3
 8006eb8:	4013      	ands	r3, r2
 8006eba:	2b01      	cmp	r3, #1
 8006ebc:	d00f      	beq.n	8006ede <UART_SetConfig+0xb6>
 8006ebe:	d304      	bcc.n	8006eca <UART_SetConfig+0xa2>
 8006ec0:	2b02      	cmp	r3, #2
 8006ec2:	d011      	beq.n	8006ee8 <UART_SetConfig+0xc0>
 8006ec4:	2b03      	cmp	r3, #3
 8006ec6:	d005      	beq.n	8006ed4 <UART_SetConfig+0xac>
 8006ec8:	e013      	b.n	8006ef2 <UART_SetConfig+0xca>
 8006eca:	231f      	movs	r3, #31
 8006ecc:	18fb      	adds	r3, r7, r3
 8006ece:	2200      	movs	r2, #0
 8006ed0:	701a      	strb	r2, [r3, #0]
 8006ed2:	e022      	b.n	8006f1a <UART_SetConfig+0xf2>
 8006ed4:	231f      	movs	r3, #31
 8006ed6:	18fb      	adds	r3, r7, r3
 8006ed8:	2202      	movs	r2, #2
 8006eda:	701a      	strb	r2, [r3, #0]
 8006edc:	e01d      	b.n	8006f1a <UART_SetConfig+0xf2>
 8006ede:	231f      	movs	r3, #31
 8006ee0:	18fb      	adds	r3, r7, r3
 8006ee2:	2204      	movs	r2, #4
 8006ee4:	701a      	strb	r2, [r3, #0]
 8006ee6:	e018      	b.n	8006f1a <UART_SetConfig+0xf2>
 8006ee8:	231f      	movs	r3, #31
 8006eea:	18fb      	adds	r3, r7, r3
 8006eec:	2208      	movs	r2, #8
 8006eee:	701a      	strb	r2, [r3, #0]
 8006ef0:	e013      	b.n	8006f1a <UART_SetConfig+0xf2>
 8006ef2:	231f      	movs	r3, #31
 8006ef4:	18fb      	adds	r3, r7, r3
 8006ef6:	2210      	movs	r2, #16
 8006ef8:	701a      	strb	r2, [r3, #0]
 8006efa:	46c0      	nop			; (mov r8, r8)
 8006efc:	e00d      	b.n	8006f1a <UART_SetConfig+0xf2>
 8006efe:	687b      	ldr	r3, [r7, #4]
 8006f00:	681b      	ldr	r3, [r3, #0]
 8006f02:	4a88      	ldr	r2, [pc, #544]	; (8007124 <UART_SetConfig+0x2fc>)
 8006f04:	4293      	cmp	r3, r2
 8006f06:	d104      	bne.n	8006f12 <UART_SetConfig+0xea>
 8006f08:	231f      	movs	r3, #31
 8006f0a:	18fb      	adds	r3, r7, r3
 8006f0c:	2200      	movs	r2, #0
 8006f0e:	701a      	strb	r2, [r3, #0]
 8006f10:	e003      	b.n	8006f1a <UART_SetConfig+0xf2>
 8006f12:	231f      	movs	r3, #31
 8006f14:	18fb      	adds	r3, r7, r3
 8006f16:	2210      	movs	r2, #16
 8006f18:	701a      	strb	r2, [r3, #0]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8006f1a:	687b      	ldr	r3, [r7, #4]
 8006f1c:	69da      	ldr	r2, [r3, #28]
 8006f1e:	2380      	movs	r3, #128	; 0x80
 8006f20:	021b      	lsls	r3, r3, #8
 8006f22:	429a      	cmp	r2, r3
 8006f24:	d000      	beq.n	8006f28 <UART_SetConfig+0x100>
 8006f26:	e07d      	b.n	8007024 <UART_SetConfig+0x1fc>
  {
    switch (clocksource)
 8006f28:	231f      	movs	r3, #31
 8006f2a:	18fb      	adds	r3, r7, r3
 8006f2c:	781b      	ldrb	r3, [r3, #0]
 8006f2e:	2b02      	cmp	r3, #2
 8006f30:	d01c      	beq.n	8006f6c <UART_SetConfig+0x144>
 8006f32:	dc02      	bgt.n	8006f3a <UART_SetConfig+0x112>
 8006f34:	2b00      	cmp	r3, #0
 8006f36:	d005      	beq.n	8006f44 <UART_SetConfig+0x11c>
 8006f38:	e04b      	b.n	8006fd2 <UART_SetConfig+0x1aa>
 8006f3a:	2b04      	cmp	r3, #4
 8006f3c:	d025      	beq.n	8006f8a <UART_SetConfig+0x162>
 8006f3e:	2b08      	cmp	r3, #8
 8006f40:	d037      	beq.n	8006fb2 <UART_SetConfig+0x18a>
 8006f42:	e046      	b.n	8006fd2 <UART_SetConfig+0x1aa>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006f44:	f7fe fdea 	bl	8005b1c <HAL_RCC_GetPCLK1Freq>
 8006f48:	0003      	movs	r3, r0
 8006f4a:	60fb      	str	r3, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8006f4c:	68fb      	ldr	r3, [r7, #12]
 8006f4e:	005a      	lsls	r2, r3, #1
 8006f50:	687b      	ldr	r3, [r7, #4]
 8006f52:	685b      	ldr	r3, [r3, #4]
 8006f54:	085b      	lsrs	r3, r3, #1
 8006f56:	18d2      	adds	r2, r2, r3
 8006f58:	687b      	ldr	r3, [r7, #4]
 8006f5a:	685b      	ldr	r3, [r3, #4]
 8006f5c:	0019      	movs	r1, r3
 8006f5e:	0010      	movs	r0, r2
 8006f60:	f7f9 f8d2 	bl	8000108 <__udivsi3>
 8006f64:	0003      	movs	r3, r0
 8006f66:	b29b      	uxth	r3, r3
 8006f68:	61bb      	str	r3, [r7, #24]
        break;
 8006f6a:	e037      	b.n	8006fdc <UART_SetConfig+0x1b4>
      case UART_CLOCKSOURCE_HSI:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate));
 8006f6c:	687b      	ldr	r3, [r7, #4]
 8006f6e:	685b      	ldr	r3, [r3, #4]
 8006f70:	085b      	lsrs	r3, r3, #1
 8006f72:	4a6d      	ldr	r2, [pc, #436]	; (8007128 <UART_SetConfig+0x300>)
 8006f74:	189a      	adds	r2, r3, r2
 8006f76:	687b      	ldr	r3, [r7, #4]
 8006f78:	685b      	ldr	r3, [r3, #4]
 8006f7a:	0019      	movs	r1, r3
 8006f7c:	0010      	movs	r0, r2
 8006f7e:	f7f9 f8c3 	bl	8000108 <__udivsi3>
 8006f82:	0003      	movs	r3, r0
 8006f84:	b29b      	uxth	r3, r3
 8006f86:	61bb      	str	r3, [r7, #24]
        break;
 8006f88:	e028      	b.n	8006fdc <UART_SetConfig+0x1b4>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8006f8a:	f7fe fd59 	bl	8005a40 <HAL_RCC_GetSysClockFreq>
 8006f8e:	0003      	movs	r3, r0
 8006f90:	60fb      	str	r3, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8006f92:	68fb      	ldr	r3, [r7, #12]
 8006f94:	005a      	lsls	r2, r3, #1
 8006f96:	687b      	ldr	r3, [r7, #4]
 8006f98:	685b      	ldr	r3, [r3, #4]
 8006f9a:	085b      	lsrs	r3, r3, #1
 8006f9c:	18d2      	adds	r2, r2, r3
 8006f9e:	687b      	ldr	r3, [r7, #4]
 8006fa0:	685b      	ldr	r3, [r3, #4]
 8006fa2:	0019      	movs	r1, r3
 8006fa4:	0010      	movs	r0, r2
 8006fa6:	f7f9 f8af 	bl	8000108 <__udivsi3>
 8006faa:	0003      	movs	r3, r0
 8006fac:	b29b      	uxth	r3, r3
 8006fae:	61bb      	str	r3, [r7, #24]
        break;
 8006fb0:	e014      	b.n	8006fdc <UART_SetConfig+0x1b4>
      case UART_CLOCKSOURCE_LSE:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(LSE_VALUE, huart->Init.BaudRate));
 8006fb2:	687b      	ldr	r3, [r7, #4]
 8006fb4:	685b      	ldr	r3, [r3, #4]
 8006fb6:	085b      	lsrs	r3, r3, #1
 8006fb8:	2280      	movs	r2, #128	; 0x80
 8006fba:	0252      	lsls	r2, r2, #9
 8006fbc:	189a      	adds	r2, r3, r2
 8006fbe:	687b      	ldr	r3, [r7, #4]
 8006fc0:	685b      	ldr	r3, [r3, #4]
 8006fc2:	0019      	movs	r1, r3
 8006fc4:	0010      	movs	r0, r2
 8006fc6:	f7f9 f89f 	bl	8000108 <__udivsi3>
 8006fca:	0003      	movs	r3, r0
 8006fcc:	b29b      	uxth	r3, r3
 8006fce:	61bb      	str	r3, [r7, #24]
        break;
 8006fd0:	e004      	b.n	8006fdc <UART_SetConfig+0x1b4>
      default:
        ret = HAL_ERROR;
 8006fd2:	2317      	movs	r3, #23
 8006fd4:	18fb      	adds	r3, r7, r3
 8006fd6:	2201      	movs	r2, #1
 8006fd8:	701a      	strb	r2, [r3, #0]
        break;
 8006fda:	46c0      	nop			; (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8006fdc:	69bb      	ldr	r3, [r7, #24]
 8006fde:	2b0f      	cmp	r3, #15
 8006fe0:	d91b      	bls.n	800701a <UART_SetConfig+0x1f2>
 8006fe2:	69bb      	ldr	r3, [r7, #24]
 8006fe4:	4a51      	ldr	r2, [pc, #324]	; (800712c <UART_SetConfig+0x304>)
 8006fe6:	4293      	cmp	r3, r2
 8006fe8:	d817      	bhi.n	800701a <UART_SetConfig+0x1f2>
    {
      brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8006fea:	69bb      	ldr	r3, [r7, #24]
 8006fec:	b29a      	uxth	r2, r3
 8006fee:	200a      	movs	r0, #10
 8006ff0:	183b      	adds	r3, r7, r0
 8006ff2:	210f      	movs	r1, #15
 8006ff4:	438a      	bics	r2, r1
 8006ff6:	801a      	strh	r2, [r3, #0]
      brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8006ff8:	69bb      	ldr	r3, [r7, #24]
 8006ffa:	085b      	lsrs	r3, r3, #1
 8006ffc:	b29b      	uxth	r3, r3
 8006ffe:	2207      	movs	r2, #7
 8007000:	4013      	ands	r3, r2
 8007002:	b299      	uxth	r1, r3
 8007004:	183b      	adds	r3, r7, r0
 8007006:	183a      	adds	r2, r7, r0
 8007008:	8812      	ldrh	r2, [r2, #0]
 800700a:	430a      	orrs	r2, r1
 800700c:	801a      	strh	r2, [r3, #0]
      huart->Instance->BRR = brrtemp;
 800700e:	687b      	ldr	r3, [r7, #4]
 8007010:	681b      	ldr	r3, [r3, #0]
 8007012:	183a      	adds	r2, r7, r0
 8007014:	8812      	ldrh	r2, [r2, #0]
 8007016:	60da      	str	r2, [r3, #12]
 8007018:	e06c      	b.n	80070f4 <UART_SetConfig+0x2cc>
    }
    else
    {
      ret = HAL_ERROR;
 800701a:	2317      	movs	r3, #23
 800701c:	18fb      	adds	r3, r7, r3
 800701e:	2201      	movs	r2, #1
 8007020:	701a      	strb	r2, [r3, #0]
 8007022:	e067      	b.n	80070f4 <UART_SetConfig+0x2cc>
    }
  }
  else
  {
    switch (clocksource)
 8007024:	231f      	movs	r3, #31
 8007026:	18fb      	adds	r3, r7, r3
 8007028:	781b      	ldrb	r3, [r3, #0]
 800702a:	2b02      	cmp	r3, #2
 800702c:	d01b      	beq.n	8007066 <UART_SetConfig+0x23e>
 800702e:	dc02      	bgt.n	8007036 <UART_SetConfig+0x20e>
 8007030:	2b00      	cmp	r3, #0
 8007032:	d005      	beq.n	8007040 <UART_SetConfig+0x218>
 8007034:	e049      	b.n	80070ca <UART_SetConfig+0x2a2>
 8007036:	2b04      	cmp	r3, #4
 8007038:	d024      	beq.n	8007084 <UART_SetConfig+0x25c>
 800703a:	2b08      	cmp	r3, #8
 800703c:	d035      	beq.n	80070aa <UART_SetConfig+0x282>
 800703e:	e044      	b.n	80070ca <UART_SetConfig+0x2a2>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8007040:	f7fe fd6c 	bl	8005b1c <HAL_RCC_GetPCLK1Freq>
 8007044:	0003      	movs	r3, r0
 8007046:	60fb      	str	r3, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8007048:	687b      	ldr	r3, [r7, #4]
 800704a:	685b      	ldr	r3, [r3, #4]
 800704c:	085a      	lsrs	r2, r3, #1
 800704e:	68fb      	ldr	r3, [r7, #12]
 8007050:	18d2      	adds	r2, r2, r3
 8007052:	687b      	ldr	r3, [r7, #4]
 8007054:	685b      	ldr	r3, [r3, #4]
 8007056:	0019      	movs	r1, r3
 8007058:	0010      	movs	r0, r2
 800705a:	f7f9 f855 	bl	8000108 <__udivsi3>
 800705e:	0003      	movs	r3, r0
 8007060:	b29b      	uxth	r3, r3
 8007062:	61bb      	str	r3, [r7, #24]
        break;
 8007064:	e036      	b.n	80070d4 <UART_SetConfig+0x2ac>
      case UART_CLOCKSOURCE_HSI:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate));
 8007066:	687b      	ldr	r3, [r7, #4]
 8007068:	685b      	ldr	r3, [r3, #4]
 800706a:	085b      	lsrs	r3, r3, #1
 800706c:	4a30      	ldr	r2, [pc, #192]	; (8007130 <UART_SetConfig+0x308>)
 800706e:	189a      	adds	r2, r3, r2
 8007070:	687b      	ldr	r3, [r7, #4]
 8007072:	685b      	ldr	r3, [r3, #4]
 8007074:	0019      	movs	r1, r3
 8007076:	0010      	movs	r0, r2
 8007078:	f7f9 f846 	bl	8000108 <__udivsi3>
 800707c:	0003      	movs	r3, r0
 800707e:	b29b      	uxth	r3, r3
 8007080:	61bb      	str	r3, [r7, #24]
        break;
 8007082:	e027      	b.n	80070d4 <UART_SetConfig+0x2ac>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8007084:	f7fe fcdc 	bl	8005a40 <HAL_RCC_GetSysClockFreq>
 8007088:	0003      	movs	r3, r0
 800708a:	60fb      	str	r3, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 800708c:	687b      	ldr	r3, [r7, #4]
 800708e:	685b      	ldr	r3, [r3, #4]
 8007090:	085a      	lsrs	r2, r3, #1
 8007092:	68fb      	ldr	r3, [r7, #12]
 8007094:	18d2      	adds	r2, r2, r3
 8007096:	687b      	ldr	r3, [r7, #4]
 8007098:	685b      	ldr	r3, [r3, #4]
 800709a:	0019      	movs	r1, r3
 800709c:	0010      	movs	r0, r2
 800709e:	f7f9 f833 	bl	8000108 <__udivsi3>
 80070a2:	0003      	movs	r3, r0
 80070a4:	b29b      	uxth	r3, r3
 80070a6:	61bb      	str	r3, [r7, #24]
        break;
 80070a8:	e014      	b.n	80070d4 <UART_SetConfig+0x2ac>
      case UART_CLOCKSOURCE_LSE:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(LSE_VALUE, huart->Init.BaudRate));
 80070aa:	687b      	ldr	r3, [r7, #4]
 80070ac:	685b      	ldr	r3, [r3, #4]
 80070ae:	085b      	lsrs	r3, r3, #1
 80070b0:	2280      	movs	r2, #128	; 0x80
 80070b2:	0212      	lsls	r2, r2, #8
 80070b4:	189a      	adds	r2, r3, r2
 80070b6:	687b      	ldr	r3, [r7, #4]
 80070b8:	685b      	ldr	r3, [r3, #4]
 80070ba:	0019      	movs	r1, r3
 80070bc:	0010      	movs	r0, r2
 80070be:	f7f9 f823 	bl	8000108 <__udivsi3>
 80070c2:	0003      	movs	r3, r0
 80070c4:	b29b      	uxth	r3, r3
 80070c6:	61bb      	str	r3, [r7, #24]
        break;
 80070c8:	e004      	b.n	80070d4 <UART_SetConfig+0x2ac>
      default:
        ret = HAL_ERROR;
 80070ca:	2317      	movs	r3, #23
 80070cc:	18fb      	adds	r3, r7, r3
 80070ce:	2201      	movs	r2, #1
 80070d0:	701a      	strb	r2, [r3, #0]
        break;
 80070d2:	46c0      	nop			; (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80070d4:	69bb      	ldr	r3, [r7, #24]
 80070d6:	2b0f      	cmp	r3, #15
 80070d8:	d908      	bls.n	80070ec <UART_SetConfig+0x2c4>
 80070da:	69bb      	ldr	r3, [r7, #24]
 80070dc:	4a13      	ldr	r2, [pc, #76]	; (800712c <UART_SetConfig+0x304>)
 80070de:	4293      	cmp	r3, r2
 80070e0:	d804      	bhi.n	80070ec <UART_SetConfig+0x2c4>
    {
      huart->Instance->BRR = usartdiv;
 80070e2:	687b      	ldr	r3, [r7, #4]
 80070e4:	681b      	ldr	r3, [r3, #0]
 80070e6:	69ba      	ldr	r2, [r7, #24]
 80070e8:	60da      	str	r2, [r3, #12]
 80070ea:	e003      	b.n	80070f4 <UART_SetConfig+0x2cc>
    }
    else
    {
      ret = HAL_ERROR;
 80070ec:	2317      	movs	r3, #23
 80070ee:	18fb      	adds	r3, r7, r3
 80070f0:	2201      	movs	r2, #1
 80070f2:	701a      	strb	r2, [r3, #0]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80070f4:	687b      	ldr	r3, [r7, #4]
 80070f6:	2200      	movs	r2, #0
 80070f8:	661a      	str	r2, [r3, #96]	; 0x60
  huart->TxISR = NULL;
 80070fa:	687b      	ldr	r3, [r7, #4]
 80070fc:	2200      	movs	r2, #0
 80070fe:	665a      	str	r2, [r3, #100]	; 0x64

  return ret;
 8007100:	2317      	movs	r3, #23
 8007102:	18fb      	adds	r3, r7, r3
 8007104:	781b      	ldrb	r3, [r3, #0]
}
 8007106:	0018      	movs	r0, r3
 8007108:	46bd      	mov	sp, r7
 800710a:	b008      	add	sp, #32
 800710c:	bd80      	pop	{r7, pc}
 800710e:	46c0      	nop			; (mov r8, r8)
 8007110:	ffff69f3 	.word	0xffff69f3
 8007114:	ffffcfff 	.word	0xffffcfff
 8007118:	fffff4ff 	.word	0xfffff4ff
 800711c:	40013800 	.word	0x40013800
 8007120:	40021000 	.word	0x40021000
 8007124:	40004400 	.word	0x40004400
 8007128:	00f42400 	.word	0x00f42400
 800712c:	0000ffff 	.word	0x0000ffff
 8007130:	007a1200 	.word	0x007a1200

08007134 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8007134:	b580      	push	{r7, lr}
 8007136:	b082      	sub	sp, #8
 8007138:	af00      	add	r7, sp, #0
 800713a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800713c:	687b      	ldr	r3, [r7, #4]
 800713e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007140:	2201      	movs	r2, #1
 8007142:	4013      	ands	r3, r2
 8007144:	d00b      	beq.n	800715e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8007146:	687b      	ldr	r3, [r7, #4]
 8007148:	681b      	ldr	r3, [r3, #0]
 800714a:	685b      	ldr	r3, [r3, #4]
 800714c:	4a4a      	ldr	r2, [pc, #296]	; (8007278 <UART_AdvFeatureConfig+0x144>)
 800714e:	4013      	ands	r3, r2
 8007150:	0019      	movs	r1, r3
 8007152:	687b      	ldr	r3, [r7, #4]
 8007154:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8007156:	687b      	ldr	r3, [r7, #4]
 8007158:	681b      	ldr	r3, [r3, #0]
 800715a:	430a      	orrs	r2, r1
 800715c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800715e:	687b      	ldr	r3, [r7, #4]
 8007160:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007162:	2202      	movs	r2, #2
 8007164:	4013      	ands	r3, r2
 8007166:	d00b      	beq.n	8007180 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8007168:	687b      	ldr	r3, [r7, #4]
 800716a:	681b      	ldr	r3, [r3, #0]
 800716c:	685b      	ldr	r3, [r3, #4]
 800716e:	4a43      	ldr	r2, [pc, #268]	; (800727c <UART_AdvFeatureConfig+0x148>)
 8007170:	4013      	ands	r3, r2
 8007172:	0019      	movs	r1, r3
 8007174:	687b      	ldr	r3, [r7, #4]
 8007176:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007178:	687b      	ldr	r3, [r7, #4]
 800717a:	681b      	ldr	r3, [r3, #0]
 800717c:	430a      	orrs	r2, r1
 800717e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8007180:	687b      	ldr	r3, [r7, #4]
 8007182:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007184:	2204      	movs	r2, #4
 8007186:	4013      	ands	r3, r2
 8007188:	d00b      	beq.n	80071a2 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800718a:	687b      	ldr	r3, [r7, #4]
 800718c:	681b      	ldr	r3, [r3, #0]
 800718e:	685b      	ldr	r3, [r3, #4]
 8007190:	4a3b      	ldr	r2, [pc, #236]	; (8007280 <UART_AdvFeatureConfig+0x14c>)
 8007192:	4013      	ands	r3, r2
 8007194:	0019      	movs	r1, r3
 8007196:	687b      	ldr	r3, [r7, #4]
 8007198:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800719a:	687b      	ldr	r3, [r7, #4]
 800719c:	681b      	ldr	r3, [r3, #0]
 800719e:	430a      	orrs	r2, r1
 80071a0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80071a2:	687b      	ldr	r3, [r7, #4]
 80071a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80071a6:	2208      	movs	r2, #8
 80071a8:	4013      	ands	r3, r2
 80071aa:	d00b      	beq.n	80071c4 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80071ac:	687b      	ldr	r3, [r7, #4]
 80071ae:	681b      	ldr	r3, [r3, #0]
 80071b0:	685b      	ldr	r3, [r3, #4]
 80071b2:	4a34      	ldr	r2, [pc, #208]	; (8007284 <UART_AdvFeatureConfig+0x150>)
 80071b4:	4013      	ands	r3, r2
 80071b6:	0019      	movs	r1, r3
 80071b8:	687b      	ldr	r3, [r7, #4]
 80071ba:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80071bc:	687b      	ldr	r3, [r7, #4]
 80071be:	681b      	ldr	r3, [r3, #0]
 80071c0:	430a      	orrs	r2, r1
 80071c2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80071c4:	687b      	ldr	r3, [r7, #4]
 80071c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80071c8:	2210      	movs	r2, #16
 80071ca:	4013      	ands	r3, r2
 80071cc:	d00b      	beq.n	80071e6 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80071ce:	687b      	ldr	r3, [r7, #4]
 80071d0:	681b      	ldr	r3, [r3, #0]
 80071d2:	689b      	ldr	r3, [r3, #8]
 80071d4:	4a2c      	ldr	r2, [pc, #176]	; (8007288 <UART_AdvFeatureConfig+0x154>)
 80071d6:	4013      	ands	r3, r2
 80071d8:	0019      	movs	r1, r3
 80071da:	687b      	ldr	r3, [r7, #4]
 80071dc:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80071de:	687b      	ldr	r3, [r7, #4]
 80071e0:	681b      	ldr	r3, [r3, #0]
 80071e2:	430a      	orrs	r2, r1
 80071e4:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80071e6:	687b      	ldr	r3, [r7, #4]
 80071e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80071ea:	2220      	movs	r2, #32
 80071ec:	4013      	ands	r3, r2
 80071ee:	d00b      	beq.n	8007208 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80071f0:	687b      	ldr	r3, [r7, #4]
 80071f2:	681b      	ldr	r3, [r3, #0]
 80071f4:	689b      	ldr	r3, [r3, #8]
 80071f6:	4a25      	ldr	r2, [pc, #148]	; (800728c <UART_AdvFeatureConfig+0x158>)
 80071f8:	4013      	ands	r3, r2
 80071fa:	0019      	movs	r1, r3
 80071fc:	687b      	ldr	r3, [r7, #4]
 80071fe:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8007200:	687b      	ldr	r3, [r7, #4]
 8007202:	681b      	ldr	r3, [r3, #0]
 8007204:	430a      	orrs	r2, r1
 8007206:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8007208:	687b      	ldr	r3, [r7, #4]
 800720a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800720c:	2240      	movs	r2, #64	; 0x40
 800720e:	4013      	ands	r3, r2
 8007210:	d01d      	beq.n	800724e <UART_AdvFeatureConfig+0x11a>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8007212:	687b      	ldr	r3, [r7, #4]
 8007214:	681b      	ldr	r3, [r3, #0]
 8007216:	685b      	ldr	r3, [r3, #4]
 8007218:	4a1d      	ldr	r2, [pc, #116]	; (8007290 <UART_AdvFeatureConfig+0x15c>)
 800721a:	4013      	ands	r3, r2
 800721c:	0019      	movs	r1, r3
 800721e:	687b      	ldr	r3, [r7, #4]
 8007220:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8007222:	687b      	ldr	r3, [r7, #4]
 8007224:	681b      	ldr	r3, [r3, #0]
 8007226:	430a      	orrs	r2, r1
 8007228:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800722a:	687b      	ldr	r3, [r7, #4]
 800722c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800722e:	2380      	movs	r3, #128	; 0x80
 8007230:	035b      	lsls	r3, r3, #13
 8007232:	429a      	cmp	r2, r3
 8007234:	d10b      	bne.n	800724e <UART_AdvFeatureConfig+0x11a>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8007236:	687b      	ldr	r3, [r7, #4]
 8007238:	681b      	ldr	r3, [r3, #0]
 800723a:	685b      	ldr	r3, [r3, #4]
 800723c:	4a15      	ldr	r2, [pc, #84]	; (8007294 <UART_AdvFeatureConfig+0x160>)
 800723e:	4013      	ands	r3, r2
 8007240:	0019      	movs	r1, r3
 8007242:	687b      	ldr	r3, [r7, #4]
 8007244:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8007246:	687b      	ldr	r3, [r7, #4]
 8007248:	681b      	ldr	r3, [r3, #0]
 800724a:	430a      	orrs	r2, r1
 800724c:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800724e:	687b      	ldr	r3, [r7, #4]
 8007250:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007252:	2280      	movs	r2, #128	; 0x80
 8007254:	4013      	ands	r3, r2
 8007256:	d00b      	beq.n	8007270 <UART_AdvFeatureConfig+0x13c>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8007258:	687b      	ldr	r3, [r7, #4]
 800725a:	681b      	ldr	r3, [r3, #0]
 800725c:	685b      	ldr	r3, [r3, #4]
 800725e:	4a0e      	ldr	r2, [pc, #56]	; (8007298 <UART_AdvFeatureConfig+0x164>)
 8007260:	4013      	ands	r3, r2
 8007262:	0019      	movs	r1, r3
 8007264:	687b      	ldr	r3, [r7, #4]
 8007266:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8007268:	687b      	ldr	r3, [r7, #4]
 800726a:	681b      	ldr	r3, [r3, #0]
 800726c:	430a      	orrs	r2, r1
 800726e:	605a      	str	r2, [r3, #4]
  }
}
 8007270:	46c0      	nop			; (mov r8, r8)
 8007272:	46bd      	mov	sp, r7
 8007274:	b002      	add	sp, #8
 8007276:	bd80      	pop	{r7, pc}
 8007278:	fffdffff 	.word	0xfffdffff
 800727c:	fffeffff 	.word	0xfffeffff
 8007280:	fffbffff 	.word	0xfffbffff
 8007284:	ffff7fff 	.word	0xffff7fff
 8007288:	ffffefff 	.word	0xffffefff
 800728c:	ffffdfff 	.word	0xffffdfff
 8007290:	ffefffff 	.word	0xffefffff
 8007294:	ff9fffff 	.word	0xff9fffff
 8007298:	fff7ffff 	.word	0xfff7ffff

0800729c <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800729c:	b580      	push	{r7, lr}
 800729e:	b086      	sub	sp, #24
 80072a0:	af02      	add	r7, sp, #8
 80072a2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80072a4:	687b      	ldr	r3, [r7, #4]
 80072a6:	2200      	movs	r2, #0
 80072a8:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Init tickstart for timeout managment*/
  tickstart = HAL_GetTick();
 80072aa:	f7fd f88b 	bl	80043c4 <HAL_GetTick>
 80072ae:	0003      	movs	r3, r0
 80072b0:	60fb      	str	r3, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80072b2:	687b      	ldr	r3, [r7, #4]
 80072b4:	681b      	ldr	r3, [r3, #0]
 80072b6:	681b      	ldr	r3, [r3, #0]
 80072b8:	2208      	movs	r2, #8
 80072ba:	4013      	ands	r3, r2
 80072bc:	2b08      	cmp	r3, #8
 80072be:	d10d      	bne.n	80072dc <UART_CheckIdleState+0x40>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80072c0:	68fa      	ldr	r2, [r7, #12]
 80072c2:	2380      	movs	r3, #128	; 0x80
 80072c4:	0399      	lsls	r1, r3, #14
 80072c6:	6878      	ldr	r0, [r7, #4]
 80072c8:	4b16      	ldr	r3, [pc, #88]	; (8007324 <UART_CheckIdleState+0x88>)
 80072ca:	9300      	str	r3, [sp, #0]
 80072cc:	0013      	movs	r3, r2
 80072ce:	2200      	movs	r2, #0
 80072d0:	f000 f82a 	bl	8007328 <UART_WaitOnFlagUntilTimeout>
 80072d4:	1e03      	subs	r3, r0, #0
 80072d6:	d001      	beq.n	80072dc <UART_CheckIdleState+0x40>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80072d8:	2303      	movs	r3, #3
 80072da:	e01f      	b.n	800731c <UART_CheckIdleState+0x80>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80072dc:	687b      	ldr	r3, [r7, #4]
 80072de:	681b      	ldr	r3, [r3, #0]
 80072e0:	681b      	ldr	r3, [r3, #0]
 80072e2:	2204      	movs	r2, #4
 80072e4:	4013      	ands	r3, r2
 80072e6:	2b04      	cmp	r3, #4
 80072e8:	d10d      	bne.n	8007306 <UART_CheckIdleState+0x6a>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80072ea:	68fa      	ldr	r2, [r7, #12]
 80072ec:	2380      	movs	r3, #128	; 0x80
 80072ee:	03d9      	lsls	r1, r3, #15
 80072f0:	6878      	ldr	r0, [r7, #4]
 80072f2:	4b0c      	ldr	r3, [pc, #48]	; (8007324 <UART_CheckIdleState+0x88>)
 80072f4:	9300      	str	r3, [sp, #0]
 80072f6:	0013      	movs	r3, r2
 80072f8:	2200      	movs	r2, #0
 80072fa:	f000 f815 	bl	8007328 <UART_WaitOnFlagUntilTimeout>
 80072fe:	1e03      	subs	r3, r0, #0
 8007300:	d001      	beq.n	8007306 <UART_CheckIdleState+0x6a>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8007302:	2303      	movs	r3, #3
 8007304:	e00a      	b.n	800731c <UART_CheckIdleState+0x80>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8007306:	687b      	ldr	r3, [r7, #4]
 8007308:	2220      	movs	r2, #32
 800730a:	675a      	str	r2, [r3, #116]	; 0x74
  huart->RxState = HAL_UART_STATE_READY;
 800730c:	687b      	ldr	r3, [r7, #4]
 800730e:	2220      	movs	r2, #32
 8007310:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UNLOCK(huart);
 8007312:	687b      	ldr	r3, [r7, #4]
 8007314:	2270      	movs	r2, #112	; 0x70
 8007316:	2100      	movs	r1, #0
 8007318:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800731a:	2300      	movs	r3, #0
}
 800731c:	0018      	movs	r0, r3
 800731e:	46bd      	mov	sp, r7
 8007320:	b004      	add	sp, #16
 8007322:	bd80      	pop	{r7, pc}
 8007324:	01ffffff 	.word	0x01ffffff

08007328 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8007328:	b580      	push	{r7, lr}
 800732a:	b084      	sub	sp, #16
 800732c:	af00      	add	r7, sp, #0
 800732e:	60f8      	str	r0, [r7, #12]
 8007330:	60b9      	str	r1, [r7, #8]
 8007332:	603b      	str	r3, [r7, #0]
 8007334:	1dfb      	adds	r3, r7, #7
 8007336:	701a      	strb	r2, [r3, #0]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007338:	e05d      	b.n	80073f6 <UART_WaitOnFlagUntilTimeout+0xce>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800733a:	69bb      	ldr	r3, [r7, #24]
 800733c:	3301      	adds	r3, #1
 800733e:	d05a      	beq.n	80073f6 <UART_WaitOnFlagUntilTimeout+0xce>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007340:	f7fd f840 	bl	80043c4 <HAL_GetTick>
 8007344:	0002      	movs	r2, r0
 8007346:	683b      	ldr	r3, [r7, #0]
 8007348:	1ad3      	subs	r3, r2, r3
 800734a:	69ba      	ldr	r2, [r7, #24]
 800734c:	429a      	cmp	r2, r3
 800734e:	d302      	bcc.n	8007356 <UART_WaitOnFlagUntilTimeout+0x2e>
 8007350:	69bb      	ldr	r3, [r7, #24]
 8007352:	2b00      	cmp	r3, #0
 8007354:	d11b      	bne.n	800738e <UART_WaitOnFlagUntilTimeout+0x66>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8007356:	68fb      	ldr	r3, [r7, #12]
 8007358:	681b      	ldr	r3, [r3, #0]
 800735a:	681a      	ldr	r2, [r3, #0]
 800735c:	68fb      	ldr	r3, [r7, #12]
 800735e:	681b      	ldr	r3, [r3, #0]
 8007360:	492f      	ldr	r1, [pc, #188]	; (8007420 <UART_WaitOnFlagUntilTimeout+0xf8>)
 8007362:	400a      	ands	r2, r1
 8007364:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007366:	68fb      	ldr	r3, [r7, #12]
 8007368:	681b      	ldr	r3, [r3, #0]
 800736a:	689a      	ldr	r2, [r3, #8]
 800736c:	68fb      	ldr	r3, [r7, #12]
 800736e:	681b      	ldr	r3, [r3, #0]
 8007370:	2101      	movs	r1, #1
 8007372:	438a      	bics	r2, r1
 8007374:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 8007376:	68fb      	ldr	r3, [r7, #12]
 8007378:	2220      	movs	r2, #32
 800737a:	675a      	str	r2, [r3, #116]	; 0x74
        huart->RxState = HAL_UART_STATE_READY;
 800737c:	68fb      	ldr	r3, [r7, #12]
 800737e:	2220      	movs	r2, #32
 8007380:	679a      	str	r2, [r3, #120]	; 0x78

        __HAL_UNLOCK(huart);
 8007382:	68fb      	ldr	r3, [r7, #12]
 8007384:	2270      	movs	r2, #112	; 0x70
 8007386:	2100      	movs	r1, #0
 8007388:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 800738a:	2303      	movs	r3, #3
 800738c:	e043      	b.n	8007416 <UART_WaitOnFlagUntilTimeout+0xee>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800738e:	68fb      	ldr	r3, [r7, #12]
 8007390:	681b      	ldr	r3, [r3, #0]
 8007392:	681b      	ldr	r3, [r3, #0]
 8007394:	2204      	movs	r2, #4
 8007396:	4013      	ands	r3, r2
 8007398:	d02d      	beq.n	80073f6 <UART_WaitOnFlagUntilTimeout+0xce>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800739a:	68fb      	ldr	r3, [r7, #12]
 800739c:	681b      	ldr	r3, [r3, #0]
 800739e:	69da      	ldr	r2, [r3, #28]
 80073a0:	2380      	movs	r3, #128	; 0x80
 80073a2:	011b      	lsls	r3, r3, #4
 80073a4:	401a      	ands	r2, r3
 80073a6:	2380      	movs	r3, #128	; 0x80
 80073a8:	011b      	lsls	r3, r3, #4
 80073aa:	429a      	cmp	r2, r3
 80073ac:	d123      	bne.n	80073f6 <UART_WaitOnFlagUntilTimeout+0xce>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80073ae:	68fb      	ldr	r3, [r7, #12]
 80073b0:	681b      	ldr	r3, [r3, #0]
 80073b2:	2280      	movs	r2, #128	; 0x80
 80073b4:	0112      	lsls	r2, r2, #4
 80073b6:	621a      	str	r2, [r3, #32]
          
          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80073b8:	68fb      	ldr	r3, [r7, #12]
 80073ba:	681b      	ldr	r3, [r3, #0]
 80073bc:	681a      	ldr	r2, [r3, #0]
 80073be:	68fb      	ldr	r3, [r7, #12]
 80073c0:	681b      	ldr	r3, [r3, #0]
 80073c2:	4917      	ldr	r1, [pc, #92]	; (8007420 <UART_WaitOnFlagUntilTimeout+0xf8>)
 80073c4:	400a      	ands	r2, r1
 80073c6:	601a      	str	r2, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80073c8:	68fb      	ldr	r3, [r7, #12]
 80073ca:	681b      	ldr	r3, [r3, #0]
 80073cc:	689a      	ldr	r2, [r3, #8]
 80073ce:	68fb      	ldr	r3, [r7, #12]
 80073d0:	681b      	ldr	r3, [r3, #0]
 80073d2:	2101      	movs	r1, #1
 80073d4:	438a      	bics	r2, r1
 80073d6:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 80073d8:	68fb      	ldr	r3, [r7, #12]
 80073da:	2220      	movs	r2, #32
 80073dc:	675a      	str	r2, [r3, #116]	; 0x74
          huart->RxState = HAL_UART_STATE_READY;
 80073de:	68fb      	ldr	r3, [r7, #12]
 80073e0:	2220      	movs	r2, #32
 80073e2:	679a      	str	r2, [r3, #120]	; 0x78
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80073e4:	68fb      	ldr	r3, [r7, #12]
 80073e6:	2220      	movs	r2, #32
 80073e8:	67da      	str	r2, [r3, #124]	; 0x7c
          
          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80073ea:	68fb      	ldr	r3, [r7, #12]
 80073ec:	2270      	movs	r2, #112	; 0x70
 80073ee:	2100      	movs	r1, #0
 80073f0:	5499      	strb	r1, [r3, r2]
          
          return HAL_TIMEOUT;
 80073f2:	2303      	movs	r3, #3
 80073f4:	e00f      	b.n	8007416 <UART_WaitOnFlagUntilTimeout+0xee>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80073f6:	68fb      	ldr	r3, [r7, #12]
 80073f8:	681b      	ldr	r3, [r3, #0]
 80073fa:	69db      	ldr	r3, [r3, #28]
 80073fc:	68ba      	ldr	r2, [r7, #8]
 80073fe:	4013      	ands	r3, r2
 8007400:	68ba      	ldr	r2, [r7, #8]
 8007402:	1ad3      	subs	r3, r2, r3
 8007404:	425a      	negs	r2, r3
 8007406:	4153      	adcs	r3, r2
 8007408:	b2db      	uxtb	r3, r3
 800740a:	001a      	movs	r2, r3
 800740c:	1dfb      	adds	r3, r7, #7
 800740e:	781b      	ldrb	r3, [r3, #0]
 8007410:	429a      	cmp	r2, r3
 8007412:	d092      	beq.n	800733a <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8007414:	2300      	movs	r3, #0
}
 8007416:	0018      	movs	r0, r3
 8007418:	46bd      	mov	sp, r7
 800741a:	b004      	add	sp, #16
 800741c:	bd80      	pop	{r7, pc}
 800741e:	46c0      	nop			; (mov r8, r8)
 8007420:	fffffe5f 	.word	0xfffffe5f

08007424 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8007424:	b580      	push	{r7, lr}
 8007426:	b082      	sub	sp, #8
 8007428:	af00      	add	r7, sp, #0
 800742a:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800742c:	687b      	ldr	r3, [r7, #4]
 800742e:	681b      	ldr	r3, [r3, #0]
 8007430:	681a      	ldr	r2, [r3, #0]
 8007432:	687b      	ldr	r3, [r7, #4]
 8007434:	681b      	ldr	r3, [r3, #0]
 8007436:	490a      	ldr	r1, [pc, #40]	; (8007460 <UART_EndRxTransfer+0x3c>)
 8007438:	400a      	ands	r2, r1
 800743a:	601a      	str	r2, [r3, #0]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800743c:	687b      	ldr	r3, [r7, #4]
 800743e:	681b      	ldr	r3, [r3, #0]
 8007440:	689a      	ldr	r2, [r3, #8]
 8007442:	687b      	ldr	r3, [r7, #4]
 8007444:	681b      	ldr	r3, [r3, #0]
 8007446:	2101      	movs	r1, #1
 8007448:	438a      	bics	r2, r1
 800744a:	609a      	str	r2, [r3, #8]

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800744c:	687b      	ldr	r3, [r7, #4]
 800744e:	2220      	movs	r2, #32
 8007450:	679a      	str	r2, [r3, #120]	; 0x78

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8007452:	687b      	ldr	r3, [r7, #4]
 8007454:	2200      	movs	r2, #0
 8007456:	661a      	str	r2, [r3, #96]	; 0x60
}
 8007458:	46c0      	nop			; (mov r8, r8)
 800745a:	46bd      	mov	sp, r7
 800745c:	b002      	add	sp, #8
 800745e:	bd80      	pop	{r7, pc}
 8007460:	fffffedf 	.word	0xfffffedf

08007464 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8007464:	b580      	push	{r7, lr}
 8007466:	b084      	sub	sp, #16
 8007468:	af00      	add	r7, sp, #0
 800746a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800746c:	687b      	ldr	r3, [r7, #4]
 800746e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007470:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8007472:	68fb      	ldr	r3, [r7, #12]
 8007474:	225a      	movs	r2, #90	; 0x5a
 8007476:	2100      	movs	r1, #0
 8007478:	5299      	strh	r1, [r3, r2]
  huart->TxXferCount = 0U;
 800747a:	68fb      	ldr	r3, [r7, #12]
 800747c:	2252      	movs	r2, #82	; 0x52
 800747e:	2100      	movs	r1, #0
 8007480:	5299      	strh	r1, [r3, r2]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8007482:	68fb      	ldr	r3, [r7, #12]
 8007484:	0018      	movs	r0, r3
 8007486:	f7ff fcc7 	bl	8006e18 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800748a:	46c0      	nop			; (mov r8, r8)
 800748c:	46bd      	mov	sp, r7
 800748e:	b004      	add	sp, #16
 8007490:	bd80      	pop	{r7, pc}

08007492 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8007492:	b580      	push	{r7, lr}
 8007494:	b082      	sub	sp, #8
 8007496:	af00      	add	r7, sp, #0
 8007498:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800749a:	687b      	ldr	r3, [r7, #4]
 800749c:	681b      	ldr	r3, [r3, #0]
 800749e:	681a      	ldr	r2, [r3, #0]
 80074a0:	687b      	ldr	r3, [r7, #4]
 80074a2:	681b      	ldr	r3, [r3, #0]
 80074a4:	2140      	movs	r1, #64	; 0x40
 80074a6:	438a      	bics	r2, r1
 80074a8:	601a      	str	r2, [r3, #0]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80074aa:	687b      	ldr	r3, [r7, #4]
 80074ac:	2220      	movs	r2, #32
 80074ae:	675a      	str	r2, [r3, #116]	; 0x74

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 80074b0:	687b      	ldr	r3, [r7, #4]
 80074b2:	2200      	movs	r2, #0
 80074b4:	665a      	str	r2, [r3, #100]	; 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80074b6:	687b      	ldr	r3, [r7, #4]
 80074b8:	0018      	movs	r0, r3
 80074ba:	f7ff fca5 	bl	8006e08 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80074be:	46c0      	nop			; (mov r8, r8)
 80074c0:	46bd      	mov	sp, r7
 80074c2:	b002      	add	sp, #8
 80074c4:	bd80      	pop	{r7, pc}

080074c6 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 80074c6:	b580      	push	{r7, lr}
 80074c8:	b082      	sub	sp, #8
 80074ca:	af00      	add	r7, sp, #0
 80074cc:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 80074ce:	46c0      	nop			; (mov r8, r8)
 80074d0:	46bd      	mov	sp, r7
 80074d2:	b002      	add	sp, #8
 80074d4:	bd80      	pop	{r7, pc}

080074d6 <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 80074d6:	b580      	push	{r7, lr}
 80074d8:	b084      	sub	sp, #16
 80074da:	af00      	add	r7, sp, #0
 80074dc:	0002      	movs	r2, r0
 80074de:	1dbb      	adds	r3, r7, #6
 80074e0:	801a      	strh	r2, [r3, #0]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 80074e2:	2300      	movs	r3, #0
 80074e4:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 80074e6:	1dbb      	adds	r3, r7, #6
 80074e8:	2200      	movs	r2, #0
 80074ea:	5e9b      	ldrsh	r3, [r3, r2]
 80074ec:	2b84      	cmp	r3, #132	; 0x84
 80074ee:	d006      	beq.n	80074fe <makeFreeRtosPriority+0x28>
    fpriority += (priority - osPriorityIdle);
 80074f0:	1dbb      	adds	r3, r7, #6
 80074f2:	2200      	movs	r2, #0
 80074f4:	5e9a      	ldrsh	r2, [r3, r2]
 80074f6:	68fb      	ldr	r3, [r7, #12]
 80074f8:	18d3      	adds	r3, r2, r3
 80074fa:	3303      	adds	r3, #3
 80074fc:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 80074fe:	68fb      	ldr	r3, [r7, #12]
}
 8007500:	0018      	movs	r0, r3
 8007502:	46bd      	mov	sp, r7
 8007504:	b004      	add	sp, #16
 8007506:	bd80      	pop	{r7, pc}

08007508 <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 8007508:	b580      	push	{r7, lr}
 800750a:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 800750c:	f000 faa2 	bl	8007a54 <vTaskStartScheduler>
  
  return osOK;
 8007510:	2300      	movs	r3, #0
}
 8007512:	0018      	movs	r0, r3
 8007514:	46bd      	mov	sp, r7
 8007516:	bd80      	pop	{r7, pc}

08007518 <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 8007518:	b5f0      	push	{r4, r5, r6, r7, lr}
 800751a:	b089      	sub	sp, #36	; 0x24
 800751c:	af04      	add	r7, sp, #16
 800751e:	6078      	str	r0, [r7, #4]
 8007520:	6039      	str	r1, [r7, #0]
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 8007522:	687b      	ldr	r3, [r7, #4]
 8007524:	695b      	ldr	r3, [r3, #20]
 8007526:	2b00      	cmp	r3, #0
 8007528:	d020      	beq.n	800756c <osThreadCreate+0x54>
 800752a:	687b      	ldr	r3, [r7, #4]
 800752c:	699b      	ldr	r3, [r3, #24]
 800752e:	2b00      	cmp	r3, #0
 8007530:	d01c      	beq.n	800756c <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8007532:	687b      	ldr	r3, [r7, #4]
 8007534:	685c      	ldr	r4, [r3, #4]
 8007536:	687b      	ldr	r3, [r7, #4]
 8007538:	681d      	ldr	r5, [r3, #0]
 800753a:	687b      	ldr	r3, [r7, #4]
 800753c:	691e      	ldr	r6, [r3, #16]
 800753e:	687b      	ldr	r3, [r7, #4]
 8007540:	2208      	movs	r2, #8
 8007542:	5e9b      	ldrsh	r3, [r3, r2]
 8007544:	0018      	movs	r0, r3
 8007546:	f7ff ffc6 	bl	80074d6 <makeFreeRtosPriority>
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
              thread_def->buffer, thread_def->controlblock);
 800754a:	687b      	ldr	r3, [r7, #4]
 800754c:	695a      	ldr	r2, [r3, #20]
 800754e:	687b      	ldr	r3, [r7, #4]
 8007550:	699b      	ldr	r3, [r3, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8007552:	6839      	ldr	r1, [r7, #0]
 8007554:	9302      	str	r3, [sp, #8]
 8007556:	9201      	str	r2, [sp, #4]
 8007558:	9000      	str	r0, [sp, #0]
 800755a:	000b      	movs	r3, r1
 800755c:	0032      	movs	r2, r6
 800755e:	0029      	movs	r1, r5
 8007560:	0020      	movs	r0, r4
 8007562:	f000 f8e3 	bl	800772c <xTaskCreateStatic>
 8007566:	0003      	movs	r3, r0
 8007568:	60fb      	str	r3, [r7, #12]
 800756a:	e01d      	b.n	80075a8 <osThreadCreate+0x90>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800756c:	687b      	ldr	r3, [r7, #4]
 800756e:	685c      	ldr	r4, [r3, #4]
 8007570:	687b      	ldr	r3, [r7, #4]
 8007572:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8007574:	687b      	ldr	r3, [r7, #4]
 8007576:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8007578:	b29e      	uxth	r6, r3
 800757a:	687b      	ldr	r3, [r7, #4]
 800757c:	2208      	movs	r2, #8
 800757e:	5e9b      	ldrsh	r3, [r3, r2]
 8007580:	0018      	movs	r0, r3
 8007582:	f7ff ffa8 	bl	80074d6 <makeFreeRtosPriority>
 8007586:	0001      	movs	r1, r0
 8007588:	683a      	ldr	r2, [r7, #0]
 800758a:	230c      	movs	r3, #12
 800758c:	18fb      	adds	r3, r7, r3
 800758e:	9301      	str	r3, [sp, #4]
 8007590:	9100      	str	r1, [sp, #0]
 8007592:	0013      	movs	r3, r2
 8007594:	0032      	movs	r2, r6
 8007596:	0029      	movs	r1, r5
 8007598:	0020      	movs	r0, r4
 800759a:	f000 f90a 	bl	80077b2 <xTaskCreate>
 800759e:	0003      	movs	r3, r0
 80075a0:	2b01      	cmp	r3, #1
 80075a2:	d001      	beq.n	80075a8 <osThreadCreate+0x90>
              &handle) != pdPASS)  {
      return NULL;
 80075a4:	2300      	movs	r3, #0
 80075a6:	e000      	b.n	80075aa <osThreadCreate+0x92>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 80075a8:	68fb      	ldr	r3, [r7, #12]
}
 80075aa:	0018      	movs	r0, r3
 80075ac:	46bd      	mov	sp, r7
 80075ae:	b005      	add	sp, #20
 80075b0:	bdf0      	pop	{r4, r5, r6, r7, pc}

080075b2 <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 80075b2:	b580      	push	{r7, lr}
 80075b4:	b084      	sub	sp, #16
 80075b6:	af00      	add	r7, sp, #0
 80075b8:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 80075ba:	687b      	ldr	r3, [r7, #4]
 80075bc:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 80075be:	68fb      	ldr	r3, [r7, #12]
 80075c0:	2b00      	cmp	r3, #0
 80075c2:	d001      	beq.n	80075c8 <osDelay+0x16>
 80075c4:	68fb      	ldr	r3, [r7, #12]
 80075c6:	e000      	b.n	80075ca <osDelay+0x18>
 80075c8:	2301      	movs	r3, #1
 80075ca:	0018      	movs	r0, r3
 80075cc:	f000 fa1c 	bl	8007a08 <vTaskDelay>
  
  return osOK;
 80075d0:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 80075d2:	0018      	movs	r0, r3
 80075d4:	46bd      	mov	sp, r7
 80075d6:	b004      	add	sp, #16
 80075d8:	bd80      	pop	{r7, pc}

080075da <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 80075da:	b580      	push	{r7, lr}
 80075dc:	b082      	sub	sp, #8
 80075de:	af00      	add	r7, sp, #0
 80075e0:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80075e2:	687b      	ldr	r3, [r7, #4]
 80075e4:	3308      	adds	r3, #8
 80075e6:	001a      	movs	r2, r3
 80075e8:	687b      	ldr	r3, [r7, #4]
 80075ea:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 80075ec:	687b      	ldr	r3, [r7, #4]
 80075ee:	2201      	movs	r2, #1
 80075f0:	4252      	negs	r2, r2
 80075f2:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80075f4:	687b      	ldr	r3, [r7, #4]
 80075f6:	3308      	adds	r3, #8
 80075f8:	001a      	movs	r2, r3
 80075fa:	687b      	ldr	r3, [r7, #4]
 80075fc:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80075fe:	687b      	ldr	r3, [r7, #4]
 8007600:	3308      	adds	r3, #8
 8007602:	001a      	movs	r2, r3
 8007604:	687b      	ldr	r3, [r7, #4]
 8007606:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8007608:	687b      	ldr	r3, [r7, #4]
 800760a:	2200      	movs	r2, #0
 800760c:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 800760e:	46c0      	nop			; (mov r8, r8)
 8007610:	46bd      	mov	sp, r7
 8007612:	b002      	add	sp, #8
 8007614:	bd80      	pop	{r7, pc}

08007616 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8007616:	b580      	push	{r7, lr}
 8007618:	b082      	sub	sp, #8
 800761a:	af00      	add	r7, sp, #0
 800761c:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
 800761e:	687b      	ldr	r3, [r7, #4]
 8007620:	2200      	movs	r2, #0
 8007622:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8007624:	46c0      	nop			; (mov r8, r8)
 8007626:	46bd      	mov	sp, r7
 8007628:	b002      	add	sp, #8
 800762a:	bd80      	pop	{r7, pc}

0800762c <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800762c:	b580      	push	{r7, lr}
 800762e:	b084      	sub	sp, #16
 8007630:	af00      	add	r7, sp, #0
 8007632:	6078      	str	r0, [r7, #4]
 8007634:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8007636:	687b      	ldr	r3, [r7, #4]
 8007638:	685b      	ldr	r3, [r3, #4]
 800763a:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800763c:	683b      	ldr	r3, [r7, #0]
 800763e:	68fa      	ldr	r2, [r7, #12]
 8007640:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8007642:	68fb      	ldr	r3, [r7, #12]
 8007644:	689a      	ldr	r2, [r3, #8]
 8007646:	683b      	ldr	r3, [r7, #0]
 8007648:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 800764a:	68fb      	ldr	r3, [r7, #12]
 800764c:	689b      	ldr	r3, [r3, #8]
 800764e:	683a      	ldr	r2, [r7, #0]
 8007650:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8007652:	68fb      	ldr	r3, [r7, #12]
 8007654:	683a      	ldr	r2, [r7, #0]
 8007656:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 8007658:	683b      	ldr	r3, [r7, #0]
 800765a:	687a      	ldr	r2, [r7, #4]
 800765c:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800765e:	687b      	ldr	r3, [r7, #4]
 8007660:	681b      	ldr	r3, [r3, #0]
 8007662:	1c5a      	adds	r2, r3, #1
 8007664:	687b      	ldr	r3, [r7, #4]
 8007666:	601a      	str	r2, [r3, #0]
}
 8007668:	46c0      	nop			; (mov r8, r8)
 800766a:	46bd      	mov	sp, r7
 800766c:	b004      	add	sp, #16
 800766e:	bd80      	pop	{r7, pc}

08007670 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8007670:	b580      	push	{r7, lr}
 8007672:	b084      	sub	sp, #16
 8007674:	af00      	add	r7, sp, #0
 8007676:	6078      	str	r0, [r7, #4]
 8007678:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800767a:	683b      	ldr	r3, [r7, #0]
 800767c:	681b      	ldr	r3, [r3, #0]
 800767e:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCB's which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8007680:	68bb      	ldr	r3, [r7, #8]
 8007682:	3301      	adds	r3, #1
 8007684:	d103      	bne.n	800768e <vListInsert+0x1e>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8007686:	687b      	ldr	r3, [r7, #4]
 8007688:	691b      	ldr	r3, [r3, #16]
 800768a:	60fb      	str	r3, [r7, #12]
 800768c:	e00c      	b.n	80076a8 <vListInsert+0x38>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800768e:	687b      	ldr	r3, [r7, #4]
 8007690:	3308      	adds	r3, #8
 8007692:	60fb      	str	r3, [r7, #12]
 8007694:	e002      	b.n	800769c <vListInsert+0x2c>
 8007696:	68fb      	ldr	r3, [r7, #12]
 8007698:	685b      	ldr	r3, [r3, #4]
 800769a:	60fb      	str	r3, [r7, #12]
 800769c:	68fb      	ldr	r3, [r7, #12]
 800769e:	685b      	ldr	r3, [r3, #4]
 80076a0:	681b      	ldr	r3, [r3, #0]
 80076a2:	68ba      	ldr	r2, [r7, #8]
 80076a4:	429a      	cmp	r2, r3
 80076a6:	d2f6      	bcs.n	8007696 <vListInsert+0x26>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 80076a8:	68fb      	ldr	r3, [r7, #12]
 80076aa:	685a      	ldr	r2, [r3, #4]
 80076ac:	683b      	ldr	r3, [r7, #0]
 80076ae:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 80076b0:	683b      	ldr	r3, [r7, #0]
 80076b2:	685b      	ldr	r3, [r3, #4]
 80076b4:	683a      	ldr	r2, [r7, #0]
 80076b6:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 80076b8:	683b      	ldr	r3, [r7, #0]
 80076ba:	68fa      	ldr	r2, [r7, #12]
 80076bc:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 80076be:	68fb      	ldr	r3, [r7, #12]
 80076c0:	683a      	ldr	r2, [r7, #0]
 80076c2:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 80076c4:	683b      	ldr	r3, [r7, #0]
 80076c6:	687a      	ldr	r2, [r7, #4]
 80076c8:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80076ca:	687b      	ldr	r3, [r7, #4]
 80076cc:	681b      	ldr	r3, [r3, #0]
 80076ce:	1c5a      	adds	r2, r3, #1
 80076d0:	687b      	ldr	r3, [r7, #4]
 80076d2:	601a      	str	r2, [r3, #0]
}
 80076d4:	46c0      	nop			; (mov r8, r8)
 80076d6:	46bd      	mov	sp, r7
 80076d8:	b004      	add	sp, #16
 80076da:	bd80      	pop	{r7, pc}

080076dc <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 80076dc:	b580      	push	{r7, lr}
 80076de:	b084      	sub	sp, #16
 80076e0:	af00      	add	r7, sp, #0
 80076e2:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;
 80076e4:	687b      	ldr	r3, [r7, #4]
 80076e6:	691b      	ldr	r3, [r3, #16]
 80076e8:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 80076ea:	687b      	ldr	r3, [r7, #4]
 80076ec:	685b      	ldr	r3, [r3, #4]
 80076ee:	687a      	ldr	r2, [r7, #4]
 80076f0:	6892      	ldr	r2, [r2, #8]
 80076f2:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 80076f4:	687b      	ldr	r3, [r7, #4]
 80076f6:	689b      	ldr	r3, [r3, #8]
 80076f8:	687a      	ldr	r2, [r7, #4]
 80076fa:	6852      	ldr	r2, [r2, #4]
 80076fc:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 80076fe:	68fb      	ldr	r3, [r7, #12]
 8007700:	685b      	ldr	r3, [r3, #4]
 8007702:	687a      	ldr	r2, [r7, #4]
 8007704:	429a      	cmp	r2, r3
 8007706:	d103      	bne.n	8007710 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8007708:	687b      	ldr	r3, [r7, #4]
 800770a:	689a      	ldr	r2, [r3, #8]
 800770c:	68fb      	ldr	r3, [r7, #12]
 800770e:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pvContainer = NULL;
 8007710:	687b      	ldr	r3, [r7, #4]
 8007712:	2200      	movs	r2, #0
 8007714:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8007716:	68fb      	ldr	r3, [r7, #12]
 8007718:	681b      	ldr	r3, [r3, #0]
 800771a:	1e5a      	subs	r2, r3, #1
 800771c:	68fb      	ldr	r3, [r7, #12]
 800771e:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8007720:	68fb      	ldr	r3, [r7, #12]
 8007722:	681b      	ldr	r3, [r3, #0]
}
 8007724:	0018      	movs	r0, r3
 8007726:	46bd      	mov	sp, r7
 8007728:	b004      	add	sp, #16
 800772a:	bd80      	pop	{r7, pc}

0800772c <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 800772c:	b590      	push	{r4, r7, lr}
 800772e:	b08d      	sub	sp, #52	; 0x34
 8007730:	af04      	add	r7, sp, #16
 8007732:	60f8      	str	r0, [r7, #12]
 8007734:	60b9      	str	r1, [r7, #8]
 8007736:	607a      	str	r2, [r7, #4]
 8007738:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 800773a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800773c:	2b00      	cmp	r3, #0
 800773e:	d101      	bne.n	8007744 <xTaskCreateStatic+0x18>
 8007740:	b672      	cpsid	i
 8007742:	e7fe      	b.n	8007742 <xTaskCreateStatic+0x16>
		configASSERT( pxTaskBuffer != NULL );
 8007744:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007746:	2b00      	cmp	r3, #0
 8007748:	d101      	bne.n	800774e <xTaskCreateStatic+0x22>
 800774a:	b672      	cpsid	i
 800774c:	e7fe      	b.n	800774c <xTaskCreateStatic+0x20>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 800774e:	2354      	movs	r3, #84	; 0x54
 8007750:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( TCB_t ) );
 8007752:	697b      	ldr	r3, [r7, #20]
 8007754:	2b54      	cmp	r3, #84	; 0x54
 8007756:	d001      	beq.n	800775c <xTaskCreateStatic+0x30>
 8007758:	b672      	cpsid	i
 800775a:	e7fe      	b.n	800775a <xTaskCreateStatic+0x2e>
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 800775c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800775e:	2b00      	cmp	r3, #0
 8007760:	d020      	beq.n	80077a4 <xTaskCreateStatic+0x78>
 8007762:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007764:	2b00      	cmp	r3, #0
 8007766:	d01d      	beq.n	80077a4 <xTaskCreateStatic+0x78>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8007768:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800776a:	61fb      	str	r3, [r7, #28]
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800776c:	69fb      	ldr	r3, [r7, #28]
 800776e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8007770:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8007772:	69fb      	ldr	r3, [r7, #28]
 8007774:	2251      	movs	r2, #81	; 0x51
 8007776:	2102      	movs	r1, #2
 8007778:	5499      	strb	r1, [r3, r2]
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800777a:	683c      	ldr	r4, [r7, #0]
 800777c:	687a      	ldr	r2, [r7, #4]
 800777e:	68b9      	ldr	r1, [r7, #8]
 8007780:	68f8      	ldr	r0, [r7, #12]
 8007782:	2300      	movs	r3, #0
 8007784:	9303      	str	r3, [sp, #12]
 8007786:	69fb      	ldr	r3, [r7, #28]
 8007788:	9302      	str	r3, [sp, #8]
 800778a:	2318      	movs	r3, #24
 800778c:	18fb      	adds	r3, r7, r3
 800778e:	9301      	str	r3, [sp, #4]
 8007790:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007792:	9300      	str	r3, [sp, #0]
 8007794:	0023      	movs	r3, r4
 8007796:	f000 f859 	bl	800784c <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800779a:	69fb      	ldr	r3, [r7, #28]
 800779c:	0018      	movs	r0, r3
 800779e:	f000 f8cf 	bl	8007940 <prvAddNewTaskToReadyList>
 80077a2:	e001      	b.n	80077a8 <xTaskCreateStatic+0x7c>
		}
		else
		{
			xReturn = NULL;
 80077a4:	2300      	movs	r3, #0
 80077a6:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 80077a8:	69bb      	ldr	r3, [r7, #24]
	}
 80077aa:	0018      	movs	r0, r3
 80077ac:	46bd      	mov	sp, r7
 80077ae:	b009      	add	sp, #36	; 0x24
 80077b0:	bd90      	pop	{r4, r7, pc}

080077b2 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 80077b2:	b590      	push	{r4, r7, lr}
 80077b4:	b08d      	sub	sp, #52	; 0x34
 80077b6:	af04      	add	r7, sp, #16
 80077b8:	60f8      	str	r0, [r7, #12]
 80077ba:	60b9      	str	r1, [r7, #8]
 80077bc:	603b      	str	r3, [r7, #0]
 80077be:	1dbb      	adds	r3, r7, #6
 80077c0:	801a      	strh	r2, [r3, #0]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = ( StackType_t * ) pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80077c2:	1dbb      	adds	r3, r7, #6
 80077c4:	881b      	ldrh	r3, [r3, #0]
 80077c6:	009b      	lsls	r3, r3, #2
 80077c8:	0018      	movs	r0, r3
 80077ca:	f000 fd81 	bl	80082d0 <pvPortMalloc>
 80077ce:	0003      	movs	r3, r0
 80077d0:	617b      	str	r3, [r7, #20]

			if( pxStack != NULL )
 80077d2:	697b      	ldr	r3, [r7, #20]
 80077d4:	2b00      	cmp	r3, #0
 80077d6:	d010      	beq.n	80077fa <xTaskCreate+0x48>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e961 MISRA exception as the casts are only redundant for some paths. */
 80077d8:	2054      	movs	r0, #84	; 0x54
 80077da:	f000 fd79 	bl	80082d0 <pvPortMalloc>
 80077de:	0003      	movs	r3, r0
 80077e0:	61fb      	str	r3, [r7, #28]

				if( pxNewTCB != NULL )
 80077e2:	69fb      	ldr	r3, [r7, #28]
 80077e4:	2b00      	cmp	r3, #0
 80077e6:	d003      	beq.n	80077f0 <xTaskCreate+0x3e>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 80077e8:	69fb      	ldr	r3, [r7, #28]
 80077ea:	697a      	ldr	r2, [r7, #20]
 80077ec:	631a      	str	r2, [r3, #48]	; 0x30
 80077ee:	e006      	b.n	80077fe <xTaskCreate+0x4c>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 80077f0:	697b      	ldr	r3, [r7, #20]
 80077f2:	0018      	movs	r0, r3
 80077f4:	f000 fe12 	bl	800841c <vPortFree>
 80077f8:	e001      	b.n	80077fe <xTaskCreate+0x4c>
				}
			}
			else
			{
				pxNewTCB = NULL;
 80077fa:	2300      	movs	r3, #0
 80077fc:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 80077fe:	69fb      	ldr	r3, [r7, #28]
 8007800:	2b00      	cmp	r3, #0
 8007802:	d01a      	beq.n	800783a <xTaskCreate+0x88>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8007804:	69fb      	ldr	r3, [r7, #28]
 8007806:	2251      	movs	r2, #81	; 0x51
 8007808:	2100      	movs	r1, #0
 800780a:	5499      	strb	r1, [r3, r2]
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800780c:	1dbb      	adds	r3, r7, #6
 800780e:	881a      	ldrh	r2, [r3, #0]
 8007810:	683c      	ldr	r4, [r7, #0]
 8007812:	68b9      	ldr	r1, [r7, #8]
 8007814:	68f8      	ldr	r0, [r7, #12]
 8007816:	2300      	movs	r3, #0
 8007818:	9303      	str	r3, [sp, #12]
 800781a:	69fb      	ldr	r3, [r7, #28]
 800781c:	9302      	str	r3, [sp, #8]
 800781e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007820:	9301      	str	r3, [sp, #4]
 8007822:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007824:	9300      	str	r3, [sp, #0]
 8007826:	0023      	movs	r3, r4
 8007828:	f000 f810 	bl	800784c <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800782c:	69fb      	ldr	r3, [r7, #28]
 800782e:	0018      	movs	r0, r3
 8007830:	f000 f886 	bl	8007940 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8007834:	2301      	movs	r3, #1
 8007836:	61bb      	str	r3, [r7, #24]
 8007838:	e002      	b.n	8007840 <xTaskCreate+0x8e>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800783a:	2301      	movs	r3, #1
 800783c:	425b      	negs	r3, r3
 800783e:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8007840:	69bb      	ldr	r3, [r7, #24]
	}
 8007842:	0018      	movs	r0, r3
 8007844:	46bd      	mov	sp, r7
 8007846:	b009      	add	sp, #36	; 0x24
 8007848:	bd90      	pop	{r4, r7, pc}
	...

0800784c <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 800784c:	b580      	push	{r7, lr}
 800784e:	b086      	sub	sp, #24
 8007850:	af00      	add	r7, sp, #0
 8007852:	60f8      	str	r0, [r7, #12]
 8007854:	60b9      	str	r1, [r7, #8]
 8007856:	607a      	str	r2, [r7, #4]
 8007858:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
 800785a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800785c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800785e:	687b      	ldr	r3, [r7, #4]
 8007860:	4936      	ldr	r1, [pc, #216]	; (800793c <prvInitialiseNewTask+0xf0>)
 8007862:	468c      	mov	ip, r1
 8007864:	4463      	add	r3, ip
 8007866:	009b      	lsls	r3, r3, #2
 8007868:	18d3      	adds	r3, r2, r3
 800786a:	613b      	str	r3, [r7, #16]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type. */
 800786c:	693b      	ldr	r3, [r7, #16]
 800786e:	2207      	movs	r2, #7
 8007870:	4393      	bics	r3, r2
 8007872:	613b      	str	r3, [r7, #16]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8007874:	693b      	ldr	r3, [r7, #16]
 8007876:	2207      	movs	r2, #7
 8007878:	4013      	ands	r3, r2
 800787a:	d001      	beq.n	8007880 <prvInitialiseNewTask+0x34>
 800787c:	b672      	cpsid	i
 800787e:	e7fe      	b.n	800787e <prvInitialiseNewTask+0x32>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8007880:	2300      	movs	r3, #0
 8007882:	617b      	str	r3, [r7, #20]
 8007884:	e013      	b.n	80078ae <prvInitialiseNewTask+0x62>
	{
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8007886:	68ba      	ldr	r2, [r7, #8]
 8007888:	697b      	ldr	r3, [r7, #20]
 800788a:	18d3      	adds	r3, r2, r3
 800788c:	7818      	ldrb	r0, [r3, #0]
 800788e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8007890:	2134      	movs	r1, #52	; 0x34
 8007892:	697b      	ldr	r3, [r7, #20]
 8007894:	18d3      	adds	r3, r2, r3
 8007896:	185b      	adds	r3, r3, r1
 8007898:	1c02      	adds	r2, r0, #0
 800789a:	701a      	strb	r2, [r3, #0]

		/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
		configMAX_TASK_NAME_LEN characters just in case the memory after the
		string is not accessible (extremely unlikely). */
		if( pcName[ x ] == 0x00 )
 800789c:	68ba      	ldr	r2, [r7, #8]
 800789e:	697b      	ldr	r3, [r7, #20]
 80078a0:	18d3      	adds	r3, r2, r3
 80078a2:	781b      	ldrb	r3, [r3, #0]
 80078a4:	2b00      	cmp	r3, #0
 80078a6:	d006      	beq.n	80078b6 <prvInitialiseNewTask+0x6a>
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80078a8:	697b      	ldr	r3, [r7, #20]
 80078aa:	3301      	adds	r3, #1
 80078ac:	617b      	str	r3, [r7, #20]
 80078ae:	697b      	ldr	r3, [r7, #20]
 80078b0:	2b0f      	cmp	r3, #15
 80078b2:	d9e8      	bls.n	8007886 <prvInitialiseNewTask+0x3a>
 80078b4:	e000      	b.n	80078b8 <prvInitialiseNewTask+0x6c>
		{
			break;
 80078b6:	46c0      	nop			; (mov r8, r8)
		}
	}

	/* Ensure the name string is terminated in the case that the string length
	was greater or equal to configMAX_TASK_NAME_LEN. */
	pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 80078b8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80078ba:	2243      	movs	r2, #67	; 0x43
 80078bc:	2100      	movs	r1, #0
 80078be:	5499      	strb	r1, [r3, r2]

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 80078c0:	6a3b      	ldr	r3, [r7, #32]
 80078c2:	2b06      	cmp	r3, #6
 80078c4:	d901      	bls.n	80078ca <prvInitialiseNewTask+0x7e>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 80078c6:	2306      	movs	r3, #6
 80078c8:	623b      	str	r3, [r7, #32]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 80078ca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80078cc:	6a3a      	ldr	r2, [r7, #32]
 80078ce:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 80078d0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80078d2:	6a3a      	ldr	r2, [r7, #32]
 80078d4:	645a      	str	r2, [r3, #68]	; 0x44
		pxNewTCB->uxMutexesHeld = 0;
 80078d6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80078d8:	2200      	movs	r2, #0
 80078da:	649a      	str	r2, [r3, #72]	; 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 80078dc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80078de:	3304      	adds	r3, #4
 80078e0:	0018      	movs	r0, r3
 80078e2:	f7ff fe98 	bl	8007616 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 80078e6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80078e8:	3318      	adds	r3, #24
 80078ea:	0018      	movs	r0, r3
 80078ec:	f7ff fe93 	bl	8007616 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 80078f0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80078f2:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80078f4:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80078f6:	6a3b      	ldr	r3, [r7, #32]
 80078f8:	2207      	movs	r2, #7
 80078fa:	1ad2      	subs	r2, r2, r3
 80078fc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80078fe:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8007900:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007902:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8007904:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8007906:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007908:	2200      	movs	r2, #0
 800790a:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800790c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800790e:	2250      	movs	r2, #80	; 0x50
 8007910:	2100      	movs	r1, #0
 8007912:	5499      	strb	r1, [r3, r2]
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters, xRunPrivileged );
	}
	#else /* portUSING_MPU_WRAPPERS */
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8007914:	683a      	ldr	r2, [r7, #0]
 8007916:	68f9      	ldr	r1, [r7, #12]
 8007918:	693b      	ldr	r3, [r7, #16]
 800791a:	0018      	movs	r0, r3
 800791c:	f000 fba8 	bl	8008070 <pxPortInitialiseStack>
 8007920:	0002      	movs	r2, r0
 8007922:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007924:	601a      	str	r2, [r3, #0]
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( ( void * ) pxCreatedTask != NULL )
 8007926:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007928:	2b00      	cmp	r3, #0
 800792a:	d002      	beq.n	8007932 <prvInitialiseNewTask+0xe6>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800792c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800792e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8007930:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8007932:	46c0      	nop			; (mov r8, r8)
 8007934:	46bd      	mov	sp, r7
 8007936:	b006      	add	sp, #24
 8007938:	bd80      	pop	{r7, pc}
 800793a:	46c0      	nop			; (mov r8, r8)
 800793c:	3fffffff 	.word	0x3fffffff

08007940 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8007940:	b580      	push	{r7, lr}
 8007942:	b082      	sub	sp, #8
 8007944:	af00      	add	r7, sp, #0
 8007946:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8007948:	f000 fc2a 	bl	80081a0 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 800794c:	4b28      	ldr	r3, [pc, #160]	; (80079f0 <prvAddNewTaskToReadyList+0xb0>)
 800794e:	681b      	ldr	r3, [r3, #0]
 8007950:	1c5a      	adds	r2, r3, #1
 8007952:	4b27      	ldr	r3, [pc, #156]	; (80079f0 <prvAddNewTaskToReadyList+0xb0>)
 8007954:	601a      	str	r2, [r3, #0]
		if( pxCurrentTCB == NULL )
 8007956:	4b27      	ldr	r3, [pc, #156]	; (80079f4 <prvAddNewTaskToReadyList+0xb4>)
 8007958:	681b      	ldr	r3, [r3, #0]
 800795a:	2b00      	cmp	r3, #0
 800795c:	d109      	bne.n	8007972 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800795e:	4b25      	ldr	r3, [pc, #148]	; (80079f4 <prvAddNewTaskToReadyList+0xb4>)
 8007960:	687a      	ldr	r2, [r7, #4]
 8007962:	601a      	str	r2, [r3, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8007964:	4b22      	ldr	r3, [pc, #136]	; (80079f0 <prvAddNewTaskToReadyList+0xb0>)
 8007966:	681b      	ldr	r3, [r3, #0]
 8007968:	2b01      	cmp	r3, #1
 800796a:	d110      	bne.n	800798e <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 800796c:	f000 fa6e 	bl	8007e4c <prvInitialiseTaskLists>
 8007970:	e00d      	b.n	800798e <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8007972:	4b21      	ldr	r3, [pc, #132]	; (80079f8 <prvAddNewTaskToReadyList+0xb8>)
 8007974:	681b      	ldr	r3, [r3, #0]
 8007976:	2b00      	cmp	r3, #0
 8007978:	d109      	bne.n	800798e <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800797a:	4b1e      	ldr	r3, [pc, #120]	; (80079f4 <prvAddNewTaskToReadyList+0xb4>)
 800797c:	681b      	ldr	r3, [r3, #0]
 800797e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007980:	687b      	ldr	r3, [r7, #4]
 8007982:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007984:	429a      	cmp	r2, r3
 8007986:	d802      	bhi.n	800798e <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8007988:	4b1a      	ldr	r3, [pc, #104]	; (80079f4 <prvAddNewTaskToReadyList+0xb4>)
 800798a:	687a      	ldr	r2, [r7, #4]
 800798c:	601a      	str	r2, [r3, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800798e:	4b1b      	ldr	r3, [pc, #108]	; (80079fc <prvAddNewTaskToReadyList+0xbc>)
 8007990:	681b      	ldr	r3, [r3, #0]
 8007992:	1c5a      	adds	r2, r3, #1
 8007994:	4b19      	ldr	r3, [pc, #100]	; (80079fc <prvAddNewTaskToReadyList+0xbc>)
 8007996:	601a      	str	r2, [r3, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8007998:	687b      	ldr	r3, [r7, #4]
 800799a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800799c:	4b18      	ldr	r3, [pc, #96]	; (8007a00 <prvAddNewTaskToReadyList+0xc0>)
 800799e:	681b      	ldr	r3, [r3, #0]
 80079a0:	429a      	cmp	r2, r3
 80079a2:	d903      	bls.n	80079ac <prvAddNewTaskToReadyList+0x6c>
 80079a4:	687b      	ldr	r3, [r7, #4]
 80079a6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80079a8:	4b15      	ldr	r3, [pc, #84]	; (8007a00 <prvAddNewTaskToReadyList+0xc0>)
 80079aa:	601a      	str	r2, [r3, #0]
 80079ac:	687b      	ldr	r3, [r7, #4]
 80079ae:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80079b0:	0013      	movs	r3, r2
 80079b2:	009b      	lsls	r3, r3, #2
 80079b4:	189b      	adds	r3, r3, r2
 80079b6:	009b      	lsls	r3, r3, #2
 80079b8:	4a12      	ldr	r2, [pc, #72]	; (8007a04 <prvAddNewTaskToReadyList+0xc4>)
 80079ba:	189a      	adds	r2, r3, r2
 80079bc:	687b      	ldr	r3, [r7, #4]
 80079be:	3304      	adds	r3, #4
 80079c0:	0019      	movs	r1, r3
 80079c2:	0010      	movs	r0, r2
 80079c4:	f7ff fe32 	bl	800762c <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 80079c8:	f000 fbfc 	bl	80081c4 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 80079cc:	4b0a      	ldr	r3, [pc, #40]	; (80079f8 <prvAddNewTaskToReadyList+0xb8>)
 80079ce:	681b      	ldr	r3, [r3, #0]
 80079d0:	2b00      	cmp	r3, #0
 80079d2:	d008      	beq.n	80079e6 <prvAddNewTaskToReadyList+0xa6>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 80079d4:	4b07      	ldr	r3, [pc, #28]	; (80079f4 <prvAddNewTaskToReadyList+0xb4>)
 80079d6:	681b      	ldr	r3, [r3, #0]
 80079d8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80079da:	687b      	ldr	r3, [r7, #4]
 80079dc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80079de:	429a      	cmp	r2, r3
 80079e0:	d201      	bcs.n	80079e6 <prvAddNewTaskToReadyList+0xa6>
		{
			taskYIELD_IF_USING_PREEMPTION();
 80079e2:	f000 fbcd 	bl	8008180 <vPortYield>
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80079e6:	46c0      	nop			; (mov r8, r8)
 80079e8:	46bd      	mov	sp, r7
 80079ea:	b002      	add	sp, #8
 80079ec:	bd80      	pop	{r7, pc}
 80079ee:	46c0      	nop			; (mov r8, r8)
 80079f0:	200003fc 	.word	0x200003fc
 80079f4:	200002fc 	.word	0x200002fc
 80079f8:	20000408 	.word	0x20000408
 80079fc:	20000418 	.word	0x20000418
 8007a00:	20000404 	.word	0x20000404
 8007a04:	20000300 	.word	0x20000300

08007a08 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8007a08:	b580      	push	{r7, lr}
 8007a0a:	b084      	sub	sp, #16
 8007a0c:	af00      	add	r7, sp, #0
 8007a0e:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8007a10:	2300      	movs	r3, #0
 8007a12:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8007a14:	687b      	ldr	r3, [r7, #4]
 8007a16:	2b00      	cmp	r3, #0
 8007a18:	d010      	beq.n	8007a3c <vTaskDelay+0x34>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8007a1a:	4b0d      	ldr	r3, [pc, #52]	; (8007a50 <vTaskDelay+0x48>)
 8007a1c:	681b      	ldr	r3, [r3, #0]
 8007a1e:	2b00      	cmp	r3, #0
 8007a20:	d001      	beq.n	8007a26 <vTaskDelay+0x1e>
 8007a22:	b672      	cpsid	i
 8007a24:	e7fe      	b.n	8007a24 <vTaskDelay+0x1c>
			vTaskSuspendAll();
 8007a26:	f000 f863 	bl	8007af0 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8007a2a:	687b      	ldr	r3, [r7, #4]
 8007a2c:	2100      	movs	r1, #0
 8007a2e:	0018      	movs	r0, r3
 8007a30:	f000 faca 	bl	8007fc8 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8007a34:	f000 f868 	bl	8007b08 <xTaskResumeAll>
 8007a38:	0003      	movs	r3, r0
 8007a3a:	60fb      	str	r3, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8007a3c:	68fb      	ldr	r3, [r7, #12]
 8007a3e:	2b00      	cmp	r3, #0
 8007a40:	d101      	bne.n	8007a46 <vTaskDelay+0x3e>
		{
			portYIELD_WITHIN_API();
 8007a42:	f000 fb9d 	bl	8008180 <vPortYield>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8007a46:	46c0      	nop			; (mov r8, r8)
 8007a48:	46bd      	mov	sp, r7
 8007a4a:	b004      	add	sp, #16
 8007a4c:	bd80      	pop	{r7, pc}
 8007a4e:	46c0      	nop			; (mov r8, r8)
 8007a50:	20000424 	.word	0x20000424

08007a54 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8007a54:	b590      	push	{r4, r7, lr}
 8007a56:	b089      	sub	sp, #36	; 0x24
 8007a58:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8007a5a:	2300      	movs	r3, #0
 8007a5c:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8007a5e:	2300      	movs	r3, #0
 8007a60:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8007a62:	003a      	movs	r2, r7
 8007a64:	1d39      	adds	r1, r7, #4
 8007a66:	2308      	movs	r3, #8
 8007a68:	18fb      	adds	r3, r7, r3
 8007a6a:	0018      	movs	r0, r3
 8007a6c:	f7fb f97c 	bl	8002d68 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8007a70:	683c      	ldr	r4, [r7, #0]
 8007a72:	687b      	ldr	r3, [r7, #4]
 8007a74:	68ba      	ldr	r2, [r7, #8]
 8007a76:	4918      	ldr	r1, [pc, #96]	; (8007ad8 <vTaskStartScheduler+0x84>)
 8007a78:	4818      	ldr	r0, [pc, #96]	; (8007adc <vTaskStartScheduler+0x88>)
 8007a7a:	9202      	str	r2, [sp, #8]
 8007a7c:	9301      	str	r3, [sp, #4]
 8007a7e:	2300      	movs	r3, #0
 8007a80:	9300      	str	r3, [sp, #0]
 8007a82:	2300      	movs	r3, #0
 8007a84:	0022      	movs	r2, r4
 8007a86:	f7ff fe51 	bl	800772c <xTaskCreateStatic>
 8007a8a:	0002      	movs	r2, r0
 8007a8c:	4b14      	ldr	r3, [pc, #80]	; (8007ae0 <vTaskStartScheduler+0x8c>)
 8007a8e:	601a      	str	r2, [r3, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												( tskIDLE_PRIORITY | portPRIVILEGE_BIT ),
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8007a90:	4b13      	ldr	r3, [pc, #76]	; (8007ae0 <vTaskStartScheduler+0x8c>)
 8007a92:	681b      	ldr	r3, [r3, #0]
 8007a94:	2b00      	cmp	r3, #0
 8007a96:	d002      	beq.n	8007a9e <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8007a98:	2301      	movs	r3, #1
 8007a9a:	60fb      	str	r3, [r7, #12]
 8007a9c:	e001      	b.n	8007aa2 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8007a9e:	2300      	movs	r3, #0
 8007aa0:	60fb      	str	r3, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8007aa2:	68fb      	ldr	r3, [r7, #12]
 8007aa4:	2b01      	cmp	r3, #1
 8007aa6:	d10d      	bne.n	8007ac4 <vTaskStartScheduler+0x70>
		/* Interrupts are turned off here, to ensure a tick does not occur
		before or during the call to xPortStartScheduler().  The stacks of
		the created tasks contain a status word with interrupts switched on
		so interrupts will automatically get re-enabled when the first task
		starts to run. */
		portDISABLE_INTERRUPTS();
 8007aa8:	b672      	cpsid	i
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8007aaa:	4b0e      	ldr	r3, [pc, #56]	; (8007ae4 <vTaskStartScheduler+0x90>)
 8007aac:	2201      	movs	r2, #1
 8007aae:	4252      	negs	r2, r2
 8007ab0:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8007ab2:	4b0d      	ldr	r3, [pc, #52]	; (8007ae8 <vTaskStartScheduler+0x94>)
 8007ab4:	2201      	movs	r2, #1
 8007ab6:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) 0U;
 8007ab8:	4b0c      	ldr	r3, [pc, #48]	; (8007aec <vTaskStartScheduler+0x98>)
 8007aba:	2200      	movs	r2, #0
 8007abc:	601a      	str	r2, [r3, #0]
		FreeRTOSConfig.h file. */
		portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8007abe:	f000 fb3b 	bl	8008138 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8007ac2:	e004      	b.n	8007ace <vTaskStartScheduler+0x7a>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8007ac4:	68fb      	ldr	r3, [r7, #12]
 8007ac6:	3301      	adds	r3, #1
 8007ac8:	d101      	bne.n	8007ace <vTaskStartScheduler+0x7a>
 8007aca:	b672      	cpsid	i
 8007acc:	e7fe      	b.n	8007acc <vTaskStartScheduler+0x78>
}
 8007ace:	46c0      	nop			; (mov r8, r8)
 8007ad0:	46bd      	mov	sp, r7
 8007ad2:	b005      	add	sp, #20
 8007ad4:	bd90      	pop	{r4, r7, pc}
 8007ad6:	46c0      	nop			; (mov r8, r8)
 8007ad8:	0800942c 	.word	0x0800942c
 8007adc:	08007e2d 	.word	0x08007e2d
 8007ae0:	20000420 	.word	0x20000420
 8007ae4:	2000041c 	.word	0x2000041c
 8007ae8:	20000408 	.word	0x20000408
 8007aec:	20000400 	.word	0x20000400

08007af0 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8007af0:	b580      	push	{r7, lr}
 8007af2:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 8007af4:	4b03      	ldr	r3, [pc, #12]	; (8007b04 <vTaskSuspendAll+0x14>)
 8007af6:	681b      	ldr	r3, [r3, #0]
 8007af8:	1c5a      	adds	r2, r3, #1
 8007afa:	4b02      	ldr	r3, [pc, #8]	; (8007b04 <vTaskSuspendAll+0x14>)
 8007afc:	601a      	str	r2, [r3, #0]
}
 8007afe:	46c0      	nop			; (mov r8, r8)
 8007b00:	46bd      	mov	sp, r7
 8007b02:	bd80      	pop	{r7, pc}
 8007b04:	20000424 	.word	0x20000424

08007b08 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8007b08:	b580      	push	{r7, lr}
 8007b0a:	b084      	sub	sp, #16
 8007b0c:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8007b0e:	2300      	movs	r3, #0
 8007b10:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8007b12:	2300      	movs	r3, #0
 8007b14:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8007b16:	4b3a      	ldr	r3, [pc, #232]	; (8007c00 <xTaskResumeAll+0xf8>)
 8007b18:	681b      	ldr	r3, [r3, #0]
 8007b1a:	2b00      	cmp	r3, #0
 8007b1c:	d101      	bne.n	8007b22 <xTaskResumeAll+0x1a>
 8007b1e:	b672      	cpsid	i
 8007b20:	e7fe      	b.n	8007b20 <xTaskResumeAll+0x18>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8007b22:	f000 fb3d 	bl	80081a0 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8007b26:	4b36      	ldr	r3, [pc, #216]	; (8007c00 <xTaskResumeAll+0xf8>)
 8007b28:	681b      	ldr	r3, [r3, #0]
 8007b2a:	1e5a      	subs	r2, r3, #1
 8007b2c:	4b34      	ldr	r3, [pc, #208]	; (8007c00 <xTaskResumeAll+0xf8>)
 8007b2e:	601a      	str	r2, [r3, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8007b30:	4b33      	ldr	r3, [pc, #204]	; (8007c00 <xTaskResumeAll+0xf8>)
 8007b32:	681b      	ldr	r3, [r3, #0]
 8007b34:	2b00      	cmp	r3, #0
 8007b36:	d15b      	bne.n	8007bf0 <xTaskResumeAll+0xe8>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8007b38:	4b32      	ldr	r3, [pc, #200]	; (8007c04 <xTaskResumeAll+0xfc>)
 8007b3a:	681b      	ldr	r3, [r3, #0]
 8007b3c:	2b00      	cmp	r3, #0
 8007b3e:	d057      	beq.n	8007bf0 <xTaskResumeAll+0xe8>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8007b40:	e02f      	b.n	8007ba2 <xTaskResumeAll+0x9a>
				{
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
 8007b42:	4b31      	ldr	r3, [pc, #196]	; (8007c08 <xTaskResumeAll+0x100>)
 8007b44:	68db      	ldr	r3, [r3, #12]
 8007b46:	68db      	ldr	r3, [r3, #12]
 8007b48:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8007b4a:	68fb      	ldr	r3, [r7, #12]
 8007b4c:	3318      	adds	r3, #24
 8007b4e:	0018      	movs	r0, r3
 8007b50:	f7ff fdc4 	bl	80076dc <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8007b54:	68fb      	ldr	r3, [r7, #12]
 8007b56:	3304      	adds	r3, #4
 8007b58:	0018      	movs	r0, r3
 8007b5a:	f7ff fdbf 	bl	80076dc <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8007b5e:	68fb      	ldr	r3, [r7, #12]
 8007b60:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007b62:	4b2a      	ldr	r3, [pc, #168]	; (8007c0c <xTaskResumeAll+0x104>)
 8007b64:	681b      	ldr	r3, [r3, #0]
 8007b66:	429a      	cmp	r2, r3
 8007b68:	d903      	bls.n	8007b72 <xTaskResumeAll+0x6a>
 8007b6a:	68fb      	ldr	r3, [r7, #12]
 8007b6c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007b6e:	4b27      	ldr	r3, [pc, #156]	; (8007c0c <xTaskResumeAll+0x104>)
 8007b70:	601a      	str	r2, [r3, #0]
 8007b72:	68fb      	ldr	r3, [r7, #12]
 8007b74:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007b76:	0013      	movs	r3, r2
 8007b78:	009b      	lsls	r3, r3, #2
 8007b7a:	189b      	adds	r3, r3, r2
 8007b7c:	009b      	lsls	r3, r3, #2
 8007b7e:	4a24      	ldr	r2, [pc, #144]	; (8007c10 <xTaskResumeAll+0x108>)
 8007b80:	189a      	adds	r2, r3, r2
 8007b82:	68fb      	ldr	r3, [r7, #12]
 8007b84:	3304      	adds	r3, #4
 8007b86:	0019      	movs	r1, r3
 8007b88:	0010      	movs	r0, r2
 8007b8a:	f7ff fd4f 	bl	800762c <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8007b8e:	68fb      	ldr	r3, [r7, #12]
 8007b90:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007b92:	4b20      	ldr	r3, [pc, #128]	; (8007c14 <xTaskResumeAll+0x10c>)
 8007b94:	681b      	ldr	r3, [r3, #0]
 8007b96:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007b98:	429a      	cmp	r2, r3
 8007b9a:	d302      	bcc.n	8007ba2 <xTaskResumeAll+0x9a>
					{
						xYieldPending = pdTRUE;
 8007b9c:	4b1e      	ldr	r3, [pc, #120]	; (8007c18 <xTaskResumeAll+0x110>)
 8007b9e:	2201      	movs	r2, #1
 8007ba0:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8007ba2:	4b19      	ldr	r3, [pc, #100]	; (8007c08 <xTaskResumeAll+0x100>)
 8007ba4:	681b      	ldr	r3, [r3, #0]
 8007ba6:	2b00      	cmp	r3, #0
 8007ba8:	d1cb      	bne.n	8007b42 <xTaskResumeAll+0x3a>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8007baa:	68fb      	ldr	r3, [r7, #12]
 8007bac:	2b00      	cmp	r3, #0
 8007bae:	d001      	beq.n	8007bb4 <xTaskResumeAll+0xac>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8007bb0:	f000 f9e6 	bl	8007f80 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 8007bb4:	4b19      	ldr	r3, [pc, #100]	; (8007c1c <xTaskResumeAll+0x114>)
 8007bb6:	681b      	ldr	r3, [r3, #0]
 8007bb8:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 8007bba:	687b      	ldr	r3, [r7, #4]
 8007bbc:	2b00      	cmp	r3, #0
 8007bbe:	d00f      	beq.n	8007be0 <xTaskResumeAll+0xd8>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8007bc0:	f000 f82e 	bl	8007c20 <xTaskIncrementTick>
 8007bc4:	1e03      	subs	r3, r0, #0
 8007bc6:	d002      	beq.n	8007bce <xTaskResumeAll+0xc6>
							{
								xYieldPending = pdTRUE;
 8007bc8:	4b13      	ldr	r3, [pc, #76]	; (8007c18 <xTaskResumeAll+0x110>)
 8007bca:	2201      	movs	r2, #1
 8007bcc:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 8007bce:	687b      	ldr	r3, [r7, #4]
 8007bd0:	3b01      	subs	r3, #1
 8007bd2:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 8007bd4:	687b      	ldr	r3, [r7, #4]
 8007bd6:	2b00      	cmp	r3, #0
 8007bd8:	d1f2      	bne.n	8007bc0 <xTaskResumeAll+0xb8>

						uxPendedTicks = 0;
 8007bda:	4b10      	ldr	r3, [pc, #64]	; (8007c1c <xTaskResumeAll+0x114>)
 8007bdc:	2200      	movs	r2, #0
 8007bde:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8007be0:	4b0d      	ldr	r3, [pc, #52]	; (8007c18 <xTaskResumeAll+0x110>)
 8007be2:	681b      	ldr	r3, [r3, #0]
 8007be4:	2b00      	cmp	r3, #0
 8007be6:	d003      	beq.n	8007bf0 <xTaskResumeAll+0xe8>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8007be8:	2301      	movs	r3, #1
 8007bea:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8007bec:	f000 fac8 	bl	8008180 <vPortYield>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8007bf0:	f000 fae8 	bl	80081c4 <vPortExitCritical>

	return xAlreadyYielded;
 8007bf4:	68bb      	ldr	r3, [r7, #8]
}
 8007bf6:	0018      	movs	r0, r3
 8007bf8:	46bd      	mov	sp, r7
 8007bfa:	b004      	add	sp, #16
 8007bfc:	bd80      	pop	{r7, pc}
 8007bfe:	46c0      	nop			; (mov r8, r8)
 8007c00:	20000424 	.word	0x20000424
 8007c04:	200003fc 	.word	0x200003fc
 8007c08:	200003bc 	.word	0x200003bc
 8007c0c:	20000404 	.word	0x20000404
 8007c10:	20000300 	.word	0x20000300
 8007c14:	200002fc 	.word	0x200002fc
 8007c18:	20000410 	.word	0x20000410
 8007c1c:	2000040c 	.word	0x2000040c

08007c20 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8007c20:	b580      	push	{r7, lr}
 8007c22:	b086      	sub	sp, #24
 8007c24:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8007c26:	2300      	movs	r3, #0
 8007c28:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8007c2a:	4b4c      	ldr	r3, [pc, #304]	; (8007d5c <xTaskIncrementTick+0x13c>)
 8007c2c:	681b      	ldr	r3, [r3, #0]
 8007c2e:	2b00      	cmp	r3, #0
 8007c30:	d000      	beq.n	8007c34 <xTaskIncrementTick+0x14>
 8007c32:	e083      	b.n	8007d3c <xTaskIncrementTick+0x11c>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8007c34:	4b4a      	ldr	r3, [pc, #296]	; (8007d60 <xTaskIncrementTick+0x140>)
 8007c36:	681b      	ldr	r3, [r3, #0]
 8007c38:	3301      	adds	r3, #1
 8007c3a:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8007c3c:	4b48      	ldr	r3, [pc, #288]	; (8007d60 <xTaskIncrementTick+0x140>)
 8007c3e:	693a      	ldr	r2, [r7, #16]
 8007c40:	601a      	str	r2, [r3, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8007c42:	693b      	ldr	r3, [r7, #16]
 8007c44:	2b00      	cmp	r3, #0
 8007c46:	d117      	bne.n	8007c78 <xTaskIncrementTick+0x58>
		{
			taskSWITCH_DELAYED_LISTS();
 8007c48:	4b46      	ldr	r3, [pc, #280]	; (8007d64 <xTaskIncrementTick+0x144>)
 8007c4a:	681b      	ldr	r3, [r3, #0]
 8007c4c:	681b      	ldr	r3, [r3, #0]
 8007c4e:	2b00      	cmp	r3, #0
 8007c50:	d001      	beq.n	8007c56 <xTaskIncrementTick+0x36>
 8007c52:	b672      	cpsid	i
 8007c54:	e7fe      	b.n	8007c54 <xTaskIncrementTick+0x34>
 8007c56:	4b43      	ldr	r3, [pc, #268]	; (8007d64 <xTaskIncrementTick+0x144>)
 8007c58:	681b      	ldr	r3, [r3, #0]
 8007c5a:	60fb      	str	r3, [r7, #12]
 8007c5c:	4b42      	ldr	r3, [pc, #264]	; (8007d68 <xTaskIncrementTick+0x148>)
 8007c5e:	681a      	ldr	r2, [r3, #0]
 8007c60:	4b40      	ldr	r3, [pc, #256]	; (8007d64 <xTaskIncrementTick+0x144>)
 8007c62:	601a      	str	r2, [r3, #0]
 8007c64:	4b40      	ldr	r3, [pc, #256]	; (8007d68 <xTaskIncrementTick+0x148>)
 8007c66:	68fa      	ldr	r2, [r7, #12]
 8007c68:	601a      	str	r2, [r3, #0]
 8007c6a:	4b40      	ldr	r3, [pc, #256]	; (8007d6c <xTaskIncrementTick+0x14c>)
 8007c6c:	681b      	ldr	r3, [r3, #0]
 8007c6e:	1c5a      	adds	r2, r3, #1
 8007c70:	4b3e      	ldr	r3, [pc, #248]	; (8007d6c <xTaskIncrementTick+0x14c>)
 8007c72:	601a      	str	r2, [r3, #0]
 8007c74:	f000 f984 	bl	8007f80 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8007c78:	4b3d      	ldr	r3, [pc, #244]	; (8007d70 <xTaskIncrementTick+0x150>)
 8007c7a:	681b      	ldr	r3, [r3, #0]
 8007c7c:	693a      	ldr	r2, [r7, #16]
 8007c7e:	429a      	cmp	r2, r3
 8007c80:	d34e      	bcc.n	8007d20 <xTaskIncrementTick+0x100>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8007c82:	4b38      	ldr	r3, [pc, #224]	; (8007d64 <xTaskIncrementTick+0x144>)
 8007c84:	681b      	ldr	r3, [r3, #0]
 8007c86:	681b      	ldr	r3, [r3, #0]
 8007c88:	2b00      	cmp	r3, #0
 8007c8a:	d101      	bne.n	8007c90 <xTaskIncrementTick+0x70>
 8007c8c:	2301      	movs	r3, #1
 8007c8e:	e000      	b.n	8007c92 <xTaskIncrementTick+0x72>
 8007c90:	2300      	movs	r3, #0
 8007c92:	2b00      	cmp	r3, #0
 8007c94:	d004      	beq.n	8007ca0 <xTaskIncrementTick+0x80>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007c96:	4b36      	ldr	r3, [pc, #216]	; (8007d70 <xTaskIncrementTick+0x150>)
 8007c98:	2201      	movs	r2, #1
 8007c9a:	4252      	negs	r2, r2
 8007c9c:	601a      	str	r2, [r3, #0]
					break;
 8007c9e:	e03f      	b.n	8007d20 <xTaskIncrementTick+0x100>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 8007ca0:	4b30      	ldr	r3, [pc, #192]	; (8007d64 <xTaskIncrementTick+0x144>)
 8007ca2:	681b      	ldr	r3, [r3, #0]
 8007ca4:	68db      	ldr	r3, [r3, #12]
 8007ca6:	68db      	ldr	r3, [r3, #12]
 8007ca8:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8007caa:	68bb      	ldr	r3, [r7, #8]
 8007cac:	685b      	ldr	r3, [r3, #4]
 8007cae:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8007cb0:	693a      	ldr	r2, [r7, #16]
 8007cb2:	687b      	ldr	r3, [r7, #4]
 8007cb4:	429a      	cmp	r2, r3
 8007cb6:	d203      	bcs.n	8007cc0 <xTaskIncrementTick+0xa0>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8007cb8:	4b2d      	ldr	r3, [pc, #180]	; (8007d70 <xTaskIncrementTick+0x150>)
 8007cba:	687a      	ldr	r2, [r7, #4]
 8007cbc:	601a      	str	r2, [r3, #0]
						break;
 8007cbe:	e02f      	b.n	8007d20 <xTaskIncrementTick+0x100>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8007cc0:	68bb      	ldr	r3, [r7, #8]
 8007cc2:	3304      	adds	r3, #4
 8007cc4:	0018      	movs	r0, r3
 8007cc6:	f7ff fd09 	bl	80076dc <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8007cca:	68bb      	ldr	r3, [r7, #8]
 8007ccc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007cce:	2b00      	cmp	r3, #0
 8007cd0:	d004      	beq.n	8007cdc <xTaskIncrementTick+0xbc>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8007cd2:	68bb      	ldr	r3, [r7, #8]
 8007cd4:	3318      	adds	r3, #24
 8007cd6:	0018      	movs	r0, r3
 8007cd8:	f7ff fd00 	bl	80076dc <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8007cdc:	68bb      	ldr	r3, [r7, #8]
 8007cde:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007ce0:	4b24      	ldr	r3, [pc, #144]	; (8007d74 <xTaskIncrementTick+0x154>)
 8007ce2:	681b      	ldr	r3, [r3, #0]
 8007ce4:	429a      	cmp	r2, r3
 8007ce6:	d903      	bls.n	8007cf0 <xTaskIncrementTick+0xd0>
 8007ce8:	68bb      	ldr	r3, [r7, #8]
 8007cea:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007cec:	4b21      	ldr	r3, [pc, #132]	; (8007d74 <xTaskIncrementTick+0x154>)
 8007cee:	601a      	str	r2, [r3, #0]
 8007cf0:	68bb      	ldr	r3, [r7, #8]
 8007cf2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007cf4:	0013      	movs	r3, r2
 8007cf6:	009b      	lsls	r3, r3, #2
 8007cf8:	189b      	adds	r3, r3, r2
 8007cfa:	009b      	lsls	r3, r3, #2
 8007cfc:	4a1e      	ldr	r2, [pc, #120]	; (8007d78 <xTaskIncrementTick+0x158>)
 8007cfe:	189a      	adds	r2, r3, r2
 8007d00:	68bb      	ldr	r3, [r7, #8]
 8007d02:	3304      	adds	r3, #4
 8007d04:	0019      	movs	r1, r3
 8007d06:	0010      	movs	r0, r2
 8007d08:	f7ff fc90 	bl	800762c <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8007d0c:	68bb      	ldr	r3, [r7, #8]
 8007d0e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007d10:	4b1a      	ldr	r3, [pc, #104]	; (8007d7c <xTaskIncrementTick+0x15c>)
 8007d12:	681b      	ldr	r3, [r3, #0]
 8007d14:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007d16:	429a      	cmp	r2, r3
 8007d18:	d3b3      	bcc.n	8007c82 <xTaskIncrementTick+0x62>
						{
							xSwitchRequired = pdTRUE;
 8007d1a:	2301      	movs	r3, #1
 8007d1c:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8007d1e:	e7b0      	b.n	8007c82 <xTaskIncrementTick+0x62>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8007d20:	4b16      	ldr	r3, [pc, #88]	; (8007d7c <xTaskIncrementTick+0x15c>)
 8007d22:	681b      	ldr	r3, [r3, #0]
 8007d24:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007d26:	4914      	ldr	r1, [pc, #80]	; (8007d78 <xTaskIncrementTick+0x158>)
 8007d28:	0013      	movs	r3, r2
 8007d2a:	009b      	lsls	r3, r3, #2
 8007d2c:	189b      	adds	r3, r3, r2
 8007d2e:	009b      	lsls	r3, r3, #2
 8007d30:	585b      	ldr	r3, [r3, r1]
 8007d32:	2b01      	cmp	r3, #1
 8007d34:	d907      	bls.n	8007d46 <xTaskIncrementTick+0x126>
			{
				xSwitchRequired = pdTRUE;
 8007d36:	2301      	movs	r3, #1
 8007d38:	617b      	str	r3, [r7, #20]
 8007d3a:	e004      	b.n	8007d46 <xTaskIncrementTick+0x126>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 8007d3c:	4b10      	ldr	r3, [pc, #64]	; (8007d80 <xTaskIncrementTick+0x160>)
 8007d3e:	681b      	ldr	r3, [r3, #0]
 8007d40:	1c5a      	adds	r2, r3, #1
 8007d42:	4b0f      	ldr	r3, [pc, #60]	; (8007d80 <xTaskIncrementTick+0x160>)
 8007d44:	601a      	str	r2, [r3, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 8007d46:	4b0f      	ldr	r3, [pc, #60]	; (8007d84 <xTaskIncrementTick+0x164>)
 8007d48:	681b      	ldr	r3, [r3, #0]
 8007d4a:	2b00      	cmp	r3, #0
 8007d4c:	d001      	beq.n	8007d52 <xTaskIncrementTick+0x132>
		{
			xSwitchRequired = pdTRUE;
 8007d4e:	2301      	movs	r3, #1
 8007d50:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 8007d52:	697b      	ldr	r3, [r7, #20]
}
 8007d54:	0018      	movs	r0, r3
 8007d56:	46bd      	mov	sp, r7
 8007d58:	b006      	add	sp, #24
 8007d5a:	bd80      	pop	{r7, pc}
 8007d5c:	20000424 	.word	0x20000424
 8007d60:	20000400 	.word	0x20000400
 8007d64:	200003b4 	.word	0x200003b4
 8007d68:	200003b8 	.word	0x200003b8
 8007d6c:	20000414 	.word	0x20000414
 8007d70:	2000041c 	.word	0x2000041c
 8007d74:	20000404 	.word	0x20000404
 8007d78:	20000300 	.word	0x20000300
 8007d7c:	200002fc 	.word	0x200002fc
 8007d80:	2000040c 	.word	0x2000040c
 8007d84:	20000410 	.word	0x20000410

08007d88 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8007d88:	b580      	push	{r7, lr}
 8007d8a:	b082      	sub	sp, #8
 8007d8c:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8007d8e:	4b22      	ldr	r3, [pc, #136]	; (8007e18 <vTaskSwitchContext+0x90>)
 8007d90:	681b      	ldr	r3, [r3, #0]
 8007d92:	2b00      	cmp	r3, #0
 8007d94:	d003      	beq.n	8007d9e <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8007d96:	4b21      	ldr	r3, [pc, #132]	; (8007e1c <vTaskSwitchContext+0x94>)
 8007d98:	2201      	movs	r2, #1
 8007d9a:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8007d9c:	e037      	b.n	8007e0e <vTaskSwitchContext+0x86>
		xYieldPending = pdFALSE;
 8007d9e:	4b1f      	ldr	r3, [pc, #124]	; (8007e1c <vTaskSwitchContext+0x94>)
 8007da0:	2200      	movs	r2, #0
 8007da2:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK();
 8007da4:	4b1e      	ldr	r3, [pc, #120]	; (8007e20 <vTaskSwitchContext+0x98>)
 8007da6:	681b      	ldr	r3, [r3, #0]
 8007da8:	607b      	str	r3, [r7, #4]
 8007daa:	e007      	b.n	8007dbc <vTaskSwitchContext+0x34>
 8007dac:	687b      	ldr	r3, [r7, #4]
 8007dae:	2b00      	cmp	r3, #0
 8007db0:	d101      	bne.n	8007db6 <vTaskSwitchContext+0x2e>
 8007db2:	b672      	cpsid	i
 8007db4:	e7fe      	b.n	8007db4 <vTaskSwitchContext+0x2c>
 8007db6:	687b      	ldr	r3, [r7, #4]
 8007db8:	3b01      	subs	r3, #1
 8007dba:	607b      	str	r3, [r7, #4]
 8007dbc:	4919      	ldr	r1, [pc, #100]	; (8007e24 <vTaskSwitchContext+0x9c>)
 8007dbe:	687a      	ldr	r2, [r7, #4]
 8007dc0:	0013      	movs	r3, r2
 8007dc2:	009b      	lsls	r3, r3, #2
 8007dc4:	189b      	adds	r3, r3, r2
 8007dc6:	009b      	lsls	r3, r3, #2
 8007dc8:	585b      	ldr	r3, [r3, r1]
 8007dca:	2b00      	cmp	r3, #0
 8007dcc:	d0ee      	beq.n	8007dac <vTaskSwitchContext+0x24>
 8007dce:	687a      	ldr	r2, [r7, #4]
 8007dd0:	0013      	movs	r3, r2
 8007dd2:	009b      	lsls	r3, r3, #2
 8007dd4:	189b      	adds	r3, r3, r2
 8007dd6:	009b      	lsls	r3, r3, #2
 8007dd8:	4a12      	ldr	r2, [pc, #72]	; (8007e24 <vTaskSwitchContext+0x9c>)
 8007dda:	189b      	adds	r3, r3, r2
 8007ddc:	603b      	str	r3, [r7, #0]
 8007dde:	683b      	ldr	r3, [r7, #0]
 8007de0:	685b      	ldr	r3, [r3, #4]
 8007de2:	685a      	ldr	r2, [r3, #4]
 8007de4:	683b      	ldr	r3, [r7, #0]
 8007de6:	605a      	str	r2, [r3, #4]
 8007de8:	683b      	ldr	r3, [r7, #0]
 8007dea:	685a      	ldr	r2, [r3, #4]
 8007dec:	683b      	ldr	r3, [r7, #0]
 8007dee:	3308      	adds	r3, #8
 8007df0:	429a      	cmp	r2, r3
 8007df2:	d104      	bne.n	8007dfe <vTaskSwitchContext+0x76>
 8007df4:	683b      	ldr	r3, [r7, #0]
 8007df6:	685b      	ldr	r3, [r3, #4]
 8007df8:	685a      	ldr	r2, [r3, #4]
 8007dfa:	683b      	ldr	r3, [r7, #0]
 8007dfc:	605a      	str	r2, [r3, #4]
 8007dfe:	683b      	ldr	r3, [r7, #0]
 8007e00:	685b      	ldr	r3, [r3, #4]
 8007e02:	68da      	ldr	r2, [r3, #12]
 8007e04:	4b08      	ldr	r3, [pc, #32]	; (8007e28 <vTaskSwitchContext+0xa0>)
 8007e06:	601a      	str	r2, [r3, #0]
 8007e08:	4b05      	ldr	r3, [pc, #20]	; (8007e20 <vTaskSwitchContext+0x98>)
 8007e0a:	687a      	ldr	r2, [r7, #4]
 8007e0c:	601a      	str	r2, [r3, #0]
}
 8007e0e:	46c0      	nop			; (mov r8, r8)
 8007e10:	46bd      	mov	sp, r7
 8007e12:	b002      	add	sp, #8
 8007e14:	bd80      	pop	{r7, pc}
 8007e16:	46c0      	nop			; (mov r8, r8)
 8007e18:	20000424 	.word	0x20000424
 8007e1c:	20000410 	.word	0x20000410
 8007e20:	20000404 	.word	0x20000404
 8007e24:	20000300 	.word	0x20000300
 8007e28:	200002fc 	.word	0x200002fc

08007e2c <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8007e2c:	b580      	push	{r7, lr}
 8007e2e:	b082      	sub	sp, #8
 8007e30:	af00      	add	r7, sp, #0
 8007e32:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8007e34:	f000 f84e 	bl	8007ed4 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8007e38:	4b03      	ldr	r3, [pc, #12]	; (8007e48 <prvIdleTask+0x1c>)
 8007e3a:	681b      	ldr	r3, [r3, #0]
 8007e3c:	2b01      	cmp	r3, #1
 8007e3e:	d9f9      	bls.n	8007e34 <prvIdleTask+0x8>
			{
				taskYIELD();
 8007e40:	f000 f99e 	bl	8008180 <vPortYield>
		prvCheckTasksWaitingTermination();
 8007e44:	e7f6      	b.n	8007e34 <prvIdleTask+0x8>
 8007e46:	46c0      	nop			; (mov r8, r8)
 8007e48:	20000300 	.word	0x20000300

08007e4c <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8007e4c:	b580      	push	{r7, lr}
 8007e4e:	b082      	sub	sp, #8
 8007e50:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8007e52:	2300      	movs	r3, #0
 8007e54:	607b      	str	r3, [r7, #4]
 8007e56:	e00c      	b.n	8007e72 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8007e58:	687a      	ldr	r2, [r7, #4]
 8007e5a:	0013      	movs	r3, r2
 8007e5c:	009b      	lsls	r3, r3, #2
 8007e5e:	189b      	adds	r3, r3, r2
 8007e60:	009b      	lsls	r3, r3, #2
 8007e62:	4a14      	ldr	r2, [pc, #80]	; (8007eb4 <prvInitialiseTaskLists+0x68>)
 8007e64:	189b      	adds	r3, r3, r2
 8007e66:	0018      	movs	r0, r3
 8007e68:	f7ff fbb7 	bl	80075da <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8007e6c:	687b      	ldr	r3, [r7, #4]
 8007e6e:	3301      	adds	r3, #1
 8007e70:	607b      	str	r3, [r7, #4]
 8007e72:	687b      	ldr	r3, [r7, #4]
 8007e74:	2b06      	cmp	r3, #6
 8007e76:	d9ef      	bls.n	8007e58 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8007e78:	4b0f      	ldr	r3, [pc, #60]	; (8007eb8 <prvInitialiseTaskLists+0x6c>)
 8007e7a:	0018      	movs	r0, r3
 8007e7c:	f7ff fbad 	bl	80075da <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8007e80:	4b0e      	ldr	r3, [pc, #56]	; (8007ebc <prvInitialiseTaskLists+0x70>)
 8007e82:	0018      	movs	r0, r3
 8007e84:	f7ff fba9 	bl	80075da <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8007e88:	4b0d      	ldr	r3, [pc, #52]	; (8007ec0 <prvInitialiseTaskLists+0x74>)
 8007e8a:	0018      	movs	r0, r3
 8007e8c:	f7ff fba5 	bl	80075da <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8007e90:	4b0c      	ldr	r3, [pc, #48]	; (8007ec4 <prvInitialiseTaskLists+0x78>)
 8007e92:	0018      	movs	r0, r3
 8007e94:	f7ff fba1 	bl	80075da <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8007e98:	4b0b      	ldr	r3, [pc, #44]	; (8007ec8 <prvInitialiseTaskLists+0x7c>)
 8007e9a:	0018      	movs	r0, r3
 8007e9c:	f7ff fb9d 	bl	80075da <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8007ea0:	4b0a      	ldr	r3, [pc, #40]	; (8007ecc <prvInitialiseTaskLists+0x80>)
 8007ea2:	4a05      	ldr	r2, [pc, #20]	; (8007eb8 <prvInitialiseTaskLists+0x6c>)
 8007ea4:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8007ea6:	4b0a      	ldr	r3, [pc, #40]	; (8007ed0 <prvInitialiseTaskLists+0x84>)
 8007ea8:	4a04      	ldr	r2, [pc, #16]	; (8007ebc <prvInitialiseTaskLists+0x70>)
 8007eaa:	601a      	str	r2, [r3, #0]
}
 8007eac:	46c0      	nop			; (mov r8, r8)
 8007eae:	46bd      	mov	sp, r7
 8007eb0:	b002      	add	sp, #8
 8007eb2:	bd80      	pop	{r7, pc}
 8007eb4:	20000300 	.word	0x20000300
 8007eb8:	2000038c 	.word	0x2000038c
 8007ebc:	200003a0 	.word	0x200003a0
 8007ec0:	200003bc 	.word	0x200003bc
 8007ec4:	200003d0 	.word	0x200003d0
 8007ec8:	200003e8 	.word	0x200003e8
 8007ecc:	200003b4 	.word	0x200003b4
 8007ed0:	200003b8 	.word	0x200003b8

08007ed4 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8007ed4:	b580      	push	{r7, lr}
 8007ed6:	b082      	sub	sp, #8
 8007ed8:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent vTaskSuspendAll()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8007eda:	e01a      	b.n	8007f12 <prvCheckTasksWaitingTermination+0x3e>
		{
			taskENTER_CRITICAL();
 8007edc:	f000 f960 	bl	80081a0 <vPortEnterCritical>
			{
				pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) );
 8007ee0:	4b10      	ldr	r3, [pc, #64]	; (8007f24 <prvCheckTasksWaitingTermination+0x50>)
 8007ee2:	68db      	ldr	r3, [r3, #12]
 8007ee4:	68db      	ldr	r3, [r3, #12]
 8007ee6:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8007ee8:	687b      	ldr	r3, [r7, #4]
 8007eea:	3304      	adds	r3, #4
 8007eec:	0018      	movs	r0, r3
 8007eee:	f7ff fbf5 	bl	80076dc <uxListRemove>
				--uxCurrentNumberOfTasks;
 8007ef2:	4b0d      	ldr	r3, [pc, #52]	; (8007f28 <prvCheckTasksWaitingTermination+0x54>)
 8007ef4:	681b      	ldr	r3, [r3, #0]
 8007ef6:	1e5a      	subs	r2, r3, #1
 8007ef8:	4b0b      	ldr	r3, [pc, #44]	; (8007f28 <prvCheckTasksWaitingTermination+0x54>)
 8007efa:	601a      	str	r2, [r3, #0]
				--uxDeletedTasksWaitingCleanUp;
 8007efc:	4b0b      	ldr	r3, [pc, #44]	; (8007f2c <prvCheckTasksWaitingTermination+0x58>)
 8007efe:	681b      	ldr	r3, [r3, #0]
 8007f00:	1e5a      	subs	r2, r3, #1
 8007f02:	4b0a      	ldr	r3, [pc, #40]	; (8007f2c <prvCheckTasksWaitingTermination+0x58>)
 8007f04:	601a      	str	r2, [r3, #0]
			}
			taskEXIT_CRITICAL();
 8007f06:	f000 f95d 	bl	80081c4 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8007f0a:	687b      	ldr	r3, [r7, #4]
 8007f0c:	0018      	movs	r0, r3
 8007f0e:	f000 f80f 	bl	8007f30 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8007f12:	4b06      	ldr	r3, [pc, #24]	; (8007f2c <prvCheckTasksWaitingTermination+0x58>)
 8007f14:	681b      	ldr	r3, [r3, #0]
 8007f16:	2b00      	cmp	r3, #0
 8007f18:	d1e0      	bne.n	8007edc <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8007f1a:	46c0      	nop			; (mov r8, r8)
 8007f1c:	46bd      	mov	sp, r7
 8007f1e:	b002      	add	sp, #8
 8007f20:	bd80      	pop	{r7, pc}
 8007f22:	46c0      	nop			; (mov r8, r8)
 8007f24:	200003d0 	.word	0x200003d0
 8007f28:	200003fc 	.word	0x200003fc
 8007f2c:	200003e4 	.word	0x200003e4

08007f30 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8007f30:	b580      	push	{r7, lr}
 8007f32:	b082      	sub	sp, #8
 8007f34:	af00      	add	r7, sp, #0
 8007f36:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8007f38:	687b      	ldr	r3, [r7, #4]
 8007f3a:	2251      	movs	r2, #81	; 0x51
 8007f3c:	5c9b      	ldrb	r3, [r3, r2]
 8007f3e:	2b00      	cmp	r3, #0
 8007f40:	d109      	bne.n	8007f56 <prvDeleteTCB+0x26>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8007f42:	687b      	ldr	r3, [r7, #4]
 8007f44:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007f46:	0018      	movs	r0, r3
 8007f48:	f000 fa68 	bl	800841c <vPortFree>
				vPortFree( pxTCB );
 8007f4c:	687b      	ldr	r3, [r7, #4]
 8007f4e:	0018      	movs	r0, r3
 8007f50:	f000 fa64 	bl	800841c <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8007f54:	e010      	b.n	8007f78 <prvDeleteTCB+0x48>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8007f56:	687b      	ldr	r3, [r7, #4]
 8007f58:	2251      	movs	r2, #81	; 0x51
 8007f5a:	5c9b      	ldrb	r3, [r3, r2]
 8007f5c:	2b01      	cmp	r3, #1
 8007f5e:	d104      	bne.n	8007f6a <prvDeleteTCB+0x3a>
				vPortFree( pxTCB );
 8007f60:	687b      	ldr	r3, [r7, #4]
 8007f62:	0018      	movs	r0, r3
 8007f64:	f000 fa5a 	bl	800841c <vPortFree>
	}
 8007f68:	e006      	b.n	8007f78 <prvDeleteTCB+0x48>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8007f6a:	687b      	ldr	r3, [r7, #4]
 8007f6c:	2251      	movs	r2, #81	; 0x51
 8007f6e:	5c9b      	ldrb	r3, [r3, r2]
 8007f70:	2b02      	cmp	r3, #2
 8007f72:	d001      	beq.n	8007f78 <prvDeleteTCB+0x48>
 8007f74:	b672      	cpsid	i
 8007f76:	e7fe      	b.n	8007f76 <prvDeleteTCB+0x46>
	}
 8007f78:	46c0      	nop			; (mov r8, r8)
 8007f7a:	46bd      	mov	sp, r7
 8007f7c:	b002      	add	sp, #8
 8007f7e:	bd80      	pop	{r7, pc}

08007f80 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8007f80:	b580      	push	{r7, lr}
 8007f82:	b082      	sub	sp, #8
 8007f84:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8007f86:	4b0e      	ldr	r3, [pc, #56]	; (8007fc0 <prvResetNextTaskUnblockTime+0x40>)
 8007f88:	681b      	ldr	r3, [r3, #0]
 8007f8a:	681b      	ldr	r3, [r3, #0]
 8007f8c:	2b00      	cmp	r3, #0
 8007f8e:	d101      	bne.n	8007f94 <prvResetNextTaskUnblockTime+0x14>
 8007f90:	2301      	movs	r3, #1
 8007f92:	e000      	b.n	8007f96 <prvResetNextTaskUnblockTime+0x16>
 8007f94:	2300      	movs	r3, #0
 8007f96:	2b00      	cmp	r3, #0
 8007f98:	d004      	beq.n	8007fa4 <prvResetNextTaskUnblockTime+0x24>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8007f9a:	4b0a      	ldr	r3, [pc, #40]	; (8007fc4 <prvResetNextTaskUnblockTime+0x44>)
 8007f9c:	2201      	movs	r2, #1
 8007f9e:	4252      	negs	r2, r2
 8007fa0:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8007fa2:	e008      	b.n	8007fb6 <prvResetNextTaskUnblockTime+0x36>
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 8007fa4:	4b06      	ldr	r3, [pc, #24]	; (8007fc0 <prvResetNextTaskUnblockTime+0x40>)
 8007fa6:	681b      	ldr	r3, [r3, #0]
 8007fa8:	68db      	ldr	r3, [r3, #12]
 8007faa:	68db      	ldr	r3, [r3, #12]
 8007fac:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8007fae:	687b      	ldr	r3, [r7, #4]
 8007fb0:	685a      	ldr	r2, [r3, #4]
 8007fb2:	4b04      	ldr	r3, [pc, #16]	; (8007fc4 <prvResetNextTaskUnblockTime+0x44>)
 8007fb4:	601a      	str	r2, [r3, #0]
}
 8007fb6:	46c0      	nop			; (mov r8, r8)
 8007fb8:	46bd      	mov	sp, r7
 8007fba:	b002      	add	sp, #8
 8007fbc:	bd80      	pop	{r7, pc}
 8007fbe:	46c0      	nop			; (mov r8, r8)
 8007fc0:	200003b4 	.word	0x200003b4
 8007fc4:	2000041c 	.word	0x2000041c

08007fc8 <prvAddCurrentTaskToDelayedList>:
#endif /* configUSE_TASK_NOTIFICATIONS */
/*-----------------------------------------------------------*/


static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8007fc8:	b580      	push	{r7, lr}
 8007fca:	b084      	sub	sp, #16
 8007fcc:	af00      	add	r7, sp, #0
 8007fce:	6078      	str	r0, [r7, #4]
 8007fd0:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8007fd2:	4b21      	ldr	r3, [pc, #132]	; (8008058 <prvAddCurrentTaskToDelayedList+0x90>)
 8007fd4:	681b      	ldr	r3, [r3, #0]
 8007fd6:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8007fd8:	4b20      	ldr	r3, [pc, #128]	; (800805c <prvAddCurrentTaskToDelayedList+0x94>)
 8007fda:	681b      	ldr	r3, [r3, #0]
 8007fdc:	3304      	adds	r3, #4
 8007fde:	0018      	movs	r0, r3
 8007fe0:	f7ff fb7c 	bl	80076dc <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8007fe4:	687b      	ldr	r3, [r7, #4]
 8007fe6:	3301      	adds	r3, #1
 8007fe8:	d10b      	bne.n	8008002 <prvAddCurrentTaskToDelayedList+0x3a>
 8007fea:	683b      	ldr	r3, [r7, #0]
 8007fec:	2b00      	cmp	r3, #0
 8007fee:	d008      	beq.n	8008002 <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8007ff0:	4b1a      	ldr	r3, [pc, #104]	; (800805c <prvAddCurrentTaskToDelayedList+0x94>)
 8007ff2:	681b      	ldr	r3, [r3, #0]
 8007ff4:	1d1a      	adds	r2, r3, #4
 8007ff6:	4b1a      	ldr	r3, [pc, #104]	; (8008060 <prvAddCurrentTaskToDelayedList+0x98>)
 8007ff8:	0011      	movs	r1, r2
 8007ffa:	0018      	movs	r0, r3
 8007ffc:	f7ff fb16 	bl	800762c <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8008000:	e026      	b.n	8008050 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8008002:	68fa      	ldr	r2, [r7, #12]
 8008004:	687b      	ldr	r3, [r7, #4]
 8008006:	18d3      	adds	r3, r2, r3
 8008008:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800800a:	4b14      	ldr	r3, [pc, #80]	; (800805c <prvAddCurrentTaskToDelayedList+0x94>)
 800800c:	681b      	ldr	r3, [r3, #0]
 800800e:	68ba      	ldr	r2, [r7, #8]
 8008010:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8008012:	68ba      	ldr	r2, [r7, #8]
 8008014:	68fb      	ldr	r3, [r7, #12]
 8008016:	429a      	cmp	r2, r3
 8008018:	d209      	bcs.n	800802e <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800801a:	4b12      	ldr	r3, [pc, #72]	; (8008064 <prvAddCurrentTaskToDelayedList+0x9c>)
 800801c:	681a      	ldr	r2, [r3, #0]
 800801e:	4b0f      	ldr	r3, [pc, #60]	; (800805c <prvAddCurrentTaskToDelayedList+0x94>)
 8008020:	681b      	ldr	r3, [r3, #0]
 8008022:	3304      	adds	r3, #4
 8008024:	0019      	movs	r1, r3
 8008026:	0010      	movs	r0, r2
 8008028:	f7ff fb22 	bl	8007670 <vListInsert>
}
 800802c:	e010      	b.n	8008050 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800802e:	4b0e      	ldr	r3, [pc, #56]	; (8008068 <prvAddCurrentTaskToDelayedList+0xa0>)
 8008030:	681a      	ldr	r2, [r3, #0]
 8008032:	4b0a      	ldr	r3, [pc, #40]	; (800805c <prvAddCurrentTaskToDelayedList+0x94>)
 8008034:	681b      	ldr	r3, [r3, #0]
 8008036:	3304      	adds	r3, #4
 8008038:	0019      	movs	r1, r3
 800803a:	0010      	movs	r0, r2
 800803c:	f7ff fb18 	bl	8007670 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8008040:	4b0a      	ldr	r3, [pc, #40]	; (800806c <prvAddCurrentTaskToDelayedList+0xa4>)
 8008042:	681b      	ldr	r3, [r3, #0]
 8008044:	68ba      	ldr	r2, [r7, #8]
 8008046:	429a      	cmp	r2, r3
 8008048:	d202      	bcs.n	8008050 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 800804a:	4b08      	ldr	r3, [pc, #32]	; (800806c <prvAddCurrentTaskToDelayedList+0xa4>)
 800804c:	68ba      	ldr	r2, [r7, #8]
 800804e:	601a      	str	r2, [r3, #0]
}
 8008050:	46c0      	nop			; (mov r8, r8)
 8008052:	46bd      	mov	sp, r7
 8008054:	b004      	add	sp, #16
 8008056:	bd80      	pop	{r7, pc}
 8008058:	20000400 	.word	0x20000400
 800805c:	200002fc 	.word	0x200002fc
 8008060:	200003e8 	.word	0x200003e8
 8008064:	200003b8 	.word	0x200003b8
 8008068:	200003b4 	.word	0x200003b4
 800806c:	2000041c 	.word	0x2000041c

08008070 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8008070:	b580      	push	{r7, lr}
 8008072:	b084      	sub	sp, #16
 8008074:	af00      	add	r7, sp, #0
 8008076:	60f8      	str	r0, [r7, #12]
 8008078:	60b9      	str	r1, [r7, #8]
 800807a:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */
	pxTopOfStack--; /* Offset added to account for the way the MCU uses the stack on entry/exit of interrupts. */
 800807c:	68fb      	ldr	r3, [r7, #12]
 800807e:	3b04      	subs	r3, #4
 8008080:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8008082:	68fb      	ldr	r3, [r7, #12]
 8008084:	2280      	movs	r2, #128	; 0x80
 8008086:	0452      	lsls	r2, r2, #17
 8008088:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800808a:	68fb      	ldr	r3, [r7, #12]
 800808c:	3b04      	subs	r3, #4
 800808e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pxCode;	/* PC */
 8008090:	68ba      	ldr	r2, [r7, #8]
 8008092:	68fb      	ldr	r3, [r7, #12]
 8008094:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8008096:	68fb      	ldr	r3, [r7, #12]
 8008098:	3b04      	subs	r3, #4
 800809a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800809c:	4a08      	ldr	r2, [pc, #32]	; (80080c0 <pxPortInitialiseStack+0x50>)
 800809e:	68fb      	ldr	r3, [r7, #12]
 80080a0:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 80080a2:	68fb      	ldr	r3, [r7, #12]
 80080a4:	3b14      	subs	r3, #20
 80080a6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 80080a8:	687a      	ldr	r2, [r7, #4]
 80080aa:	68fb      	ldr	r3, [r7, #12]
 80080ac:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 8; /* R11..R4. */
 80080ae:	68fb      	ldr	r3, [r7, #12]
 80080b0:	3b20      	subs	r3, #32
 80080b2:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 80080b4:	68fb      	ldr	r3, [r7, #12]
}
 80080b6:	0018      	movs	r0, r3
 80080b8:	46bd      	mov	sp, r7
 80080ba:	b004      	add	sp, #16
 80080bc:	bd80      	pop	{r7, pc}
 80080be:	46c0      	nop			; (mov r8, r8)
 80080c0:	080080c5 	.word	0x080080c5

080080c4 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 80080c4:	b580      	push	{r7, lr}
 80080c6:	b082      	sub	sp, #8
 80080c8:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0UL;
 80080ca:	2300      	movs	r3, #0
 80080cc:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 80080ce:	4b07      	ldr	r3, [pc, #28]	; (80080ec <prvTaskExitError+0x28>)
 80080d0:	681b      	ldr	r3, [r3, #0]
 80080d2:	3301      	adds	r3, #1
 80080d4:	d001      	beq.n	80080da <prvTaskExitError+0x16>
 80080d6:	b672      	cpsid	i
 80080d8:	e7fe      	b.n	80080d8 <prvTaskExitError+0x14>
	portDISABLE_INTERRUPTS();
 80080da:	b672      	cpsid	i
	while( ulDummy == 0 )
 80080dc:	46c0      	nop			; (mov r8, r8)
 80080de:	687b      	ldr	r3, [r7, #4]
 80080e0:	2b00      	cmp	r3, #0
 80080e2:	d0fc      	beq.n	80080de <prvTaskExitError+0x1a>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 80080e4:	46c0      	nop			; (mov r8, r8)
 80080e6:	46bd      	mov	sp, r7
 80080e8:	b002      	add	sp, #8
 80080ea:	bd80      	pop	{r7, pc}
 80080ec:	2000000c 	.word	0x2000000c

080080f0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
 80080f0:	b580      	push	{r7, lr}
 80080f2:	af00      	add	r7, sp, #0
	/* This function is no longer used, but retained for backward
	compatibility. */
}
 80080f4:	46c0      	nop			; (mov r8, r8)
 80080f6:	46bd      	mov	sp, r7
 80080f8:	bd80      	pop	{r7, pc}
 80080fa:	0000      	movs	r0, r0
 80080fc:	0000      	movs	r0, r0
	...

08008100 <vPortStartFirstTask>:
void vPortStartFirstTask( void )
{
	/* The MSP stack is not reset as, unlike on M3/4 parts, there is no vector
	table offset register that can be used to locate the initial stack value.
	Not all M0 parts have the application vector table at address 0. */
	__asm volatile(
 8008100:	4a0b      	ldr	r2, [pc, #44]	; (8008130 <pxCurrentTCBConst2>)
 8008102:	6813      	ldr	r3, [r2, #0]
 8008104:	6818      	ldr	r0, [r3, #0]
 8008106:	3020      	adds	r0, #32
 8008108:	f380 8809 	msr	PSP, r0
 800810c:	2002      	movs	r0, #2
 800810e:	f380 8814 	msr	CONTROL, r0
 8008112:	f3bf 8f6f 	isb	sy
 8008116:	bc3f      	pop	{r0, r1, r2, r3, r4, r5}
 8008118:	46ae      	mov	lr, r5
 800811a:	bc08      	pop	{r3}
 800811c:	bc04      	pop	{r2}
 800811e:	b662      	cpsie	i
 8008120:	4718      	bx	r3
 8008122:	46c0      	nop			; (mov r8, r8)
 8008124:	46c0      	nop			; (mov r8, r8)
 8008126:	46c0      	nop			; (mov r8, r8)
 8008128:	46c0      	nop			; (mov r8, r8)
 800812a:	46c0      	nop			; (mov r8, r8)
 800812c:	46c0      	nop			; (mov r8, r8)
 800812e:	46c0      	nop			; (mov r8, r8)

08008130 <pxCurrentTCBConst2>:
 8008130:	200002fc 	.word	0x200002fc
	"	bx   r3						\n" /* Finally, jump to the user defined task code. */
	"								\n"
	"	.align 4					\n"
	"pxCurrentTCBConst2: .word pxCurrentTCB	  "
				  );
}
 8008134:	46c0      	nop			; (mov r8, r8)
 8008136:	46c0      	nop			; (mov r8, r8)

08008138 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8008138:	b580      	push	{r7, lr}
 800813a:	af00      	add	r7, sp, #0
	/* Make PendSV, CallSV and SysTick the same priroity as the kernel. */
	*(portNVIC_SYSPRI2) |= portNVIC_PENDSV_PRI;
 800813c:	4b0e      	ldr	r3, [pc, #56]	; (8008178 <xPortStartScheduler+0x40>)
 800813e:	681a      	ldr	r2, [r3, #0]
 8008140:	4b0d      	ldr	r3, [pc, #52]	; (8008178 <xPortStartScheduler+0x40>)
 8008142:	21ff      	movs	r1, #255	; 0xff
 8008144:	0409      	lsls	r1, r1, #16
 8008146:	430a      	orrs	r2, r1
 8008148:	601a      	str	r2, [r3, #0]
	*(portNVIC_SYSPRI2) |= portNVIC_SYSTICK_PRI;
 800814a:	4b0b      	ldr	r3, [pc, #44]	; (8008178 <xPortStartScheduler+0x40>)
 800814c:	681a      	ldr	r2, [r3, #0]
 800814e:	4b0a      	ldr	r3, [pc, #40]	; (8008178 <xPortStartScheduler+0x40>)
 8008150:	21ff      	movs	r1, #255	; 0xff
 8008152:	0609      	lsls	r1, r1, #24
 8008154:	430a      	orrs	r2, r1
 8008156:	601a      	str	r2, [r3, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	prvSetupTimerInterrupt();
 8008158:	f000 f898 	bl	800828c <prvSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800815c:	4b07      	ldr	r3, [pc, #28]	; (800817c <xPortStartScheduler+0x44>)
 800815e:	2200      	movs	r2, #0
 8008160:	601a      	str	r2, [r3, #0]

	/* Start the first task. */
	vPortStartFirstTask();
 8008162:	f7ff ffcd 	bl	8008100 <vPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8008166:	f7ff fe0f 	bl	8007d88 <vTaskSwitchContext>
	prvTaskExitError();
 800816a:	f7ff ffab 	bl	80080c4 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800816e:	2300      	movs	r3, #0
}
 8008170:	0018      	movs	r0, r3
 8008172:	46bd      	mov	sp, r7
 8008174:	bd80      	pop	{r7, pc}
 8008176:	46c0      	nop			; (mov r8, r8)
 8008178:	e000ed20 	.word	0xe000ed20
 800817c:	2000000c 	.word	0x2000000c

08008180 <vPortYield>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortYield( void )
{
 8008180:	b580      	push	{r7, lr}
 8008182:	af00      	add	r7, sp, #0
	/* Set a PendSV to request a context switch. */
	*( portNVIC_INT_CTRL ) = portNVIC_PENDSVSET;
 8008184:	4b05      	ldr	r3, [pc, #20]	; (800819c <vPortYield+0x1c>)
 8008186:	2280      	movs	r2, #128	; 0x80
 8008188:	0552      	lsls	r2, r2, #21
 800818a:	601a      	str	r2, [r3, #0]

	/* Barriers are normally not required but do ensure the code is completely
	within the specified behaviour for the architecture. */
	__asm volatile( "dsb" ::: "memory" );
 800818c:	f3bf 8f4f 	dsb	sy
	__asm volatile( "isb" );
 8008190:	f3bf 8f6f 	isb	sy
}
 8008194:	46c0      	nop			; (mov r8, r8)
 8008196:	46bd      	mov	sp, r7
 8008198:	bd80      	pop	{r7, pc}
 800819a:	46c0      	nop			; (mov r8, r8)
 800819c:	e000ed04 	.word	0xe000ed04

080081a0 <vPortEnterCritical>:
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 80081a0:	b580      	push	{r7, lr}
 80081a2:	af00      	add	r7, sp, #0
    portDISABLE_INTERRUPTS();
 80081a4:	b672      	cpsid	i
    uxCriticalNesting++;
 80081a6:	4b06      	ldr	r3, [pc, #24]	; (80081c0 <vPortEnterCritical+0x20>)
 80081a8:	681b      	ldr	r3, [r3, #0]
 80081aa:	1c5a      	adds	r2, r3, #1
 80081ac:	4b04      	ldr	r3, [pc, #16]	; (80081c0 <vPortEnterCritical+0x20>)
 80081ae:	601a      	str	r2, [r3, #0]
	__asm volatile( "dsb" ::: "memory" );
 80081b0:	f3bf 8f4f 	dsb	sy
	__asm volatile( "isb" );
 80081b4:	f3bf 8f6f 	isb	sy
}
 80081b8:	46c0      	nop			; (mov r8, r8)
 80081ba:	46bd      	mov	sp, r7
 80081bc:	bd80      	pop	{r7, pc}
 80081be:	46c0      	nop			; (mov r8, r8)
 80081c0:	2000000c 	.word	0x2000000c

080081c4 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 80081c4:	b580      	push	{r7, lr}
 80081c6:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 80081c8:	4b09      	ldr	r3, [pc, #36]	; (80081f0 <vPortExitCritical+0x2c>)
 80081ca:	681b      	ldr	r3, [r3, #0]
 80081cc:	2b00      	cmp	r3, #0
 80081ce:	d101      	bne.n	80081d4 <vPortExitCritical+0x10>
 80081d0:	b672      	cpsid	i
 80081d2:	e7fe      	b.n	80081d2 <vPortExitCritical+0xe>
    uxCriticalNesting--;
 80081d4:	4b06      	ldr	r3, [pc, #24]	; (80081f0 <vPortExitCritical+0x2c>)
 80081d6:	681b      	ldr	r3, [r3, #0]
 80081d8:	1e5a      	subs	r2, r3, #1
 80081da:	4b05      	ldr	r3, [pc, #20]	; (80081f0 <vPortExitCritical+0x2c>)
 80081dc:	601a      	str	r2, [r3, #0]
    if( uxCriticalNesting == 0 )
 80081de:	4b04      	ldr	r3, [pc, #16]	; (80081f0 <vPortExitCritical+0x2c>)
 80081e0:	681b      	ldr	r3, [r3, #0]
 80081e2:	2b00      	cmp	r3, #0
 80081e4:	d100      	bne.n	80081e8 <vPortExitCritical+0x24>
    {
        portENABLE_INTERRUPTS();
 80081e6:	b662      	cpsie	i
    }
}
 80081e8:	46c0      	nop			; (mov r8, r8)
 80081ea:	46bd      	mov	sp, r7
 80081ec:	bd80      	pop	{r7, pc}
 80081ee:	46c0      	nop			; (mov r8, r8)
 80081f0:	2000000c 	.word	0x2000000c

080081f4 <ulSetInterruptMaskFromISR>:
/*-----------------------------------------------------------*/

uint32_t ulSetInterruptMaskFromISR( void )
{
	__asm volatile(
 80081f4:	f3ef 8010 	mrs	r0, PRIMASK
 80081f8:	b672      	cpsid	i
 80081fa:	4770      	bx	lr
	/* To avoid compiler warnings.  The return statement will nevere be reached,
	but some compilers warn if it is not included, while others won't compile if
	it is. */
	return 0;
#endif
}
 80081fc:	46c0      	nop			; (mov r8, r8)
 80081fe:	0018      	movs	r0, r3

08008200 <vClearInterruptMaskFromISR>:
/*-----------------------------------------------------------*/

void vClearInterruptMaskFromISR( __attribute__( ( unused ) ) uint32_t ulMask )
{
	__asm volatile(
 8008200:	f380 8810 	msr	PRIMASK, r0
 8008204:	4770      	bx	lr
	/* Just to avoid compiler warning.  ulMask is used from the asm code but
	the compiler can't see that.  Some compilers generate warnings without the
	following line, while others generate warnings if the line is included. */
	( void ) ulMask;
#endif
}
 8008206:	46c0      	nop			; (mov r8, r8)
	...

08008210 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8008210:	f3ef 8009 	mrs	r0, PSP
 8008214:	4b0e      	ldr	r3, [pc, #56]	; (8008250 <pxCurrentTCBConst>)
 8008216:	681a      	ldr	r2, [r3, #0]
 8008218:	3820      	subs	r0, #32
 800821a:	6010      	str	r0, [r2, #0]
 800821c:	c0f0      	stmia	r0!, {r4, r5, r6, r7}
 800821e:	4644      	mov	r4, r8
 8008220:	464d      	mov	r5, r9
 8008222:	4656      	mov	r6, sl
 8008224:	465f      	mov	r7, fp
 8008226:	c0f0      	stmia	r0!, {r4, r5, r6, r7}
 8008228:	b508      	push	{r3, lr}
 800822a:	b672      	cpsid	i
 800822c:	f7ff fdac 	bl	8007d88 <vTaskSwitchContext>
 8008230:	b662      	cpsie	i
 8008232:	bc0c      	pop	{r2, r3}
 8008234:	6811      	ldr	r1, [r2, #0]
 8008236:	6808      	ldr	r0, [r1, #0]
 8008238:	3010      	adds	r0, #16
 800823a:	c8f0      	ldmia	r0!, {r4, r5, r6, r7}
 800823c:	46a0      	mov	r8, r4
 800823e:	46a9      	mov	r9, r5
 8008240:	46b2      	mov	sl, r6
 8008242:	46bb      	mov	fp, r7
 8008244:	f380 8809 	msr	PSP, r0
 8008248:	3820      	subs	r0, #32
 800824a:	c8f0      	ldmia	r0!, {r4, r5, r6, r7}
 800824c:	4718      	bx	r3
 800824e:	46c0      	nop			; (mov r8, r8)

08008250 <pxCurrentTCBConst>:
 8008250:	200002fc 	.word	0x200002fc
	"	bx r3								\n"
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	  "
	);
}
 8008254:	46c0      	nop			; (mov r8, r8)
 8008256:	46c0      	nop			; (mov r8, r8)

08008258 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8008258:	b580      	push	{r7, lr}
 800825a:	b082      	sub	sp, #8
 800825c:	af00      	add	r7, sp, #0
uint32_t ulPreviousMask;

	ulPreviousMask = portSET_INTERRUPT_MASK_FROM_ISR();
 800825e:	f7ff ffc9 	bl	80081f4 <ulSetInterruptMaskFromISR>
 8008262:	0003      	movs	r3, r0
 8008264:	607b      	str	r3, [r7, #4]
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8008266:	f7ff fcdb 	bl	8007c20 <xTaskIncrementTick>
 800826a:	1e03      	subs	r3, r0, #0
 800826c:	d003      	beq.n	8008276 <SysTick_Handler+0x1e>
		{
			/* Pend a context switch. */
			*(portNVIC_INT_CTRL) = portNVIC_PENDSVSET;
 800826e:	4b06      	ldr	r3, [pc, #24]	; (8008288 <SysTick_Handler+0x30>)
 8008270:	2280      	movs	r2, #128	; 0x80
 8008272:	0552      	lsls	r2, r2, #21
 8008274:	601a      	str	r2, [r3, #0]
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( ulPreviousMask );
 8008276:	687b      	ldr	r3, [r7, #4]
 8008278:	0018      	movs	r0, r3
 800827a:	f7ff ffc1 	bl	8008200 <vClearInterruptMaskFromISR>
}
 800827e:	46c0      	nop			; (mov r8, r8)
 8008280:	46bd      	mov	sp, r7
 8008282:	b002      	add	sp, #8
 8008284:	bd80      	pop	{r7, pc}
 8008286:	46c0      	nop			; (mov r8, r8)
 8008288:	e000ed04 	.word	0xe000ed04

0800828c <prvSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
void prvSetupTimerInterrupt( void )
{
 800828c:	b580      	push	{r7, lr}
 800828e:	af00      	add	r7, sp, #0
   ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
 }
 #endif /* configUSE_TICKLESS_IDLE */

/* Stop and reset the SysTick. */
	portNVIC_SYSTICK_CTRL = 0UL;
 8008290:	4b0b      	ldr	r3, [pc, #44]	; (80082c0 <prvSetupTimerInterrupt+0x34>)
 8008292:	2200      	movs	r2, #0
 8008294:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE = 0UL;
 8008296:	4b0b      	ldr	r3, [pc, #44]	; (80082c4 <prvSetupTimerInterrupt+0x38>)
 8008298:	2200      	movs	r2, #0
 800829a:	601a      	str	r2, [r3, #0]

 /* Configure SysTick to interrupt at the requested rate. */
 portNVIC_SYSTICK_LOAD = ( configCPU_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800829c:	4b0a      	ldr	r3, [pc, #40]	; (80082c8 <prvSetupTimerInterrupt+0x3c>)
 800829e:	681a      	ldr	r2, [r3, #0]
 80082a0:	23fa      	movs	r3, #250	; 0xfa
 80082a2:	0099      	lsls	r1, r3, #2
 80082a4:	0010      	movs	r0, r2
 80082a6:	f7f7 ff2f 	bl	8000108 <__udivsi3>
 80082aa:	0003      	movs	r3, r0
 80082ac:	001a      	movs	r2, r3
 80082ae:	4b07      	ldr	r3, [pc, #28]	; (80082cc <prvSetupTimerInterrupt+0x40>)
 80082b0:	3a01      	subs	r2, #1
 80082b2:	601a      	str	r2, [r3, #0]
 portNVIC_SYSTICK_CTRL = portNVIC_SYSTICK_CLK | portNVIC_SYSTICK_INT | portNVIC_SYSTICK_ENABLE;
 80082b4:	4b02      	ldr	r3, [pc, #8]	; (80082c0 <prvSetupTimerInterrupt+0x34>)
 80082b6:	2207      	movs	r2, #7
 80082b8:	601a      	str	r2, [r3, #0]
}
 80082ba:	46c0      	nop			; (mov r8, r8)
 80082bc:	46bd      	mov	sp, r7
 80082be:	bd80      	pop	{r7, pc}
 80082c0:	e000e010 	.word	0xe000e010
 80082c4:	e000e018 	.word	0xe000e018
 80082c8:	20000004 	.word	0x20000004
 80082cc:	e000e014 	.word	0xe000e014

080082d0 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 80082d0:	b580      	push	{r7, lr}
 80082d2:	b086      	sub	sp, #24
 80082d4:	af00      	add	r7, sp, #0
 80082d6:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 80082d8:	2300      	movs	r3, #0
 80082da:	60fb      	str	r3, [r7, #12]

	vTaskSuspendAll();
 80082dc:	f7ff fc08 	bl	8007af0 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 80082e0:	4b49      	ldr	r3, [pc, #292]	; (8008408 <pvPortMalloc+0x138>)
 80082e2:	681b      	ldr	r3, [r3, #0]
 80082e4:	2b00      	cmp	r3, #0
 80082e6:	d101      	bne.n	80082ec <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 80082e8:	f000 f8e0 	bl	80084ac <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 80082ec:	4b47      	ldr	r3, [pc, #284]	; (800840c <pvPortMalloc+0x13c>)
 80082ee:	681b      	ldr	r3, [r3, #0]
 80082f0:	687a      	ldr	r2, [r7, #4]
 80082f2:	4013      	ands	r3, r2
 80082f4:	d000      	beq.n	80082f8 <pvPortMalloc+0x28>
 80082f6:	e079      	b.n	80083ec <pvPortMalloc+0x11c>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 80082f8:	687b      	ldr	r3, [r7, #4]
 80082fa:	2b00      	cmp	r3, #0
 80082fc:	d012      	beq.n	8008324 <pvPortMalloc+0x54>
			{
				xWantedSize += xHeapStructSize;
 80082fe:	2208      	movs	r2, #8
 8008300:	687b      	ldr	r3, [r7, #4]
 8008302:	189b      	adds	r3, r3, r2
 8008304:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8008306:	687b      	ldr	r3, [r7, #4]
 8008308:	2207      	movs	r2, #7
 800830a:	4013      	ands	r3, r2
 800830c:	d00a      	beq.n	8008324 <pvPortMalloc+0x54>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800830e:	687b      	ldr	r3, [r7, #4]
 8008310:	2207      	movs	r2, #7
 8008312:	4393      	bics	r3, r2
 8008314:	3308      	adds	r3, #8
 8008316:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8008318:	687b      	ldr	r3, [r7, #4]
 800831a:	2207      	movs	r2, #7
 800831c:	4013      	ands	r3, r2
 800831e:	d001      	beq.n	8008324 <pvPortMalloc+0x54>
 8008320:	b672      	cpsid	i
 8008322:	e7fe      	b.n	8008322 <pvPortMalloc+0x52>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8008324:	687b      	ldr	r3, [r7, #4]
 8008326:	2b00      	cmp	r3, #0
 8008328:	d060      	beq.n	80083ec <pvPortMalloc+0x11c>
 800832a:	4b39      	ldr	r3, [pc, #228]	; (8008410 <pvPortMalloc+0x140>)
 800832c:	681b      	ldr	r3, [r3, #0]
 800832e:	687a      	ldr	r2, [r7, #4]
 8008330:	429a      	cmp	r2, r3
 8008332:	d85b      	bhi.n	80083ec <pvPortMalloc+0x11c>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8008334:	4b37      	ldr	r3, [pc, #220]	; (8008414 <pvPortMalloc+0x144>)
 8008336:	613b      	str	r3, [r7, #16]
				pxBlock = xStart.pxNextFreeBlock;
 8008338:	4b36      	ldr	r3, [pc, #216]	; (8008414 <pvPortMalloc+0x144>)
 800833a:	681b      	ldr	r3, [r3, #0]
 800833c:	617b      	str	r3, [r7, #20]
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800833e:	e004      	b.n	800834a <pvPortMalloc+0x7a>
				{
					pxPreviousBlock = pxBlock;
 8008340:	697b      	ldr	r3, [r7, #20]
 8008342:	613b      	str	r3, [r7, #16]
					pxBlock = pxBlock->pxNextFreeBlock;
 8008344:	697b      	ldr	r3, [r7, #20]
 8008346:	681b      	ldr	r3, [r3, #0]
 8008348:	617b      	str	r3, [r7, #20]
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800834a:	697b      	ldr	r3, [r7, #20]
 800834c:	685b      	ldr	r3, [r3, #4]
 800834e:	687a      	ldr	r2, [r7, #4]
 8008350:	429a      	cmp	r2, r3
 8008352:	d903      	bls.n	800835c <pvPortMalloc+0x8c>
 8008354:	697b      	ldr	r3, [r7, #20]
 8008356:	681b      	ldr	r3, [r3, #0]
 8008358:	2b00      	cmp	r3, #0
 800835a:	d1f1      	bne.n	8008340 <pvPortMalloc+0x70>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800835c:	4b2a      	ldr	r3, [pc, #168]	; (8008408 <pvPortMalloc+0x138>)
 800835e:	681b      	ldr	r3, [r3, #0]
 8008360:	697a      	ldr	r2, [r7, #20]
 8008362:	429a      	cmp	r2, r3
 8008364:	d042      	beq.n	80083ec <pvPortMalloc+0x11c>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8008366:	693b      	ldr	r3, [r7, #16]
 8008368:	681b      	ldr	r3, [r3, #0]
 800836a:	2208      	movs	r2, #8
 800836c:	189b      	adds	r3, r3, r2
 800836e:	60fb      	str	r3, [r7, #12]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8008370:	697b      	ldr	r3, [r7, #20]
 8008372:	681a      	ldr	r2, [r3, #0]
 8008374:	693b      	ldr	r3, [r7, #16]
 8008376:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8008378:	697b      	ldr	r3, [r7, #20]
 800837a:	685a      	ldr	r2, [r3, #4]
 800837c:	687b      	ldr	r3, [r7, #4]
 800837e:	1ad2      	subs	r2, r2, r3
 8008380:	2308      	movs	r3, #8
 8008382:	005b      	lsls	r3, r3, #1
 8008384:	429a      	cmp	r2, r3
 8008386:	d916      	bls.n	80083b6 <pvPortMalloc+0xe6>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8008388:	697a      	ldr	r2, [r7, #20]
 800838a:	687b      	ldr	r3, [r7, #4]
 800838c:	18d3      	adds	r3, r2, r3
 800838e:	60bb      	str	r3, [r7, #8]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8008390:	68bb      	ldr	r3, [r7, #8]
 8008392:	2207      	movs	r2, #7
 8008394:	4013      	ands	r3, r2
 8008396:	d001      	beq.n	800839c <pvPortMalloc+0xcc>
 8008398:	b672      	cpsid	i
 800839a:	e7fe      	b.n	800839a <pvPortMalloc+0xca>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800839c:	697b      	ldr	r3, [r7, #20]
 800839e:	685a      	ldr	r2, [r3, #4]
 80083a0:	687b      	ldr	r3, [r7, #4]
 80083a2:	1ad2      	subs	r2, r2, r3
 80083a4:	68bb      	ldr	r3, [r7, #8]
 80083a6:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 80083a8:	697b      	ldr	r3, [r7, #20]
 80083aa:	687a      	ldr	r2, [r7, #4]
 80083ac:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 80083ae:	68bb      	ldr	r3, [r7, #8]
 80083b0:	0018      	movs	r0, r3
 80083b2:	f000 f8db 	bl	800856c <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 80083b6:	4b16      	ldr	r3, [pc, #88]	; (8008410 <pvPortMalloc+0x140>)
 80083b8:	681a      	ldr	r2, [r3, #0]
 80083ba:	697b      	ldr	r3, [r7, #20]
 80083bc:	685b      	ldr	r3, [r3, #4]
 80083be:	1ad2      	subs	r2, r2, r3
 80083c0:	4b13      	ldr	r3, [pc, #76]	; (8008410 <pvPortMalloc+0x140>)
 80083c2:	601a      	str	r2, [r3, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 80083c4:	4b12      	ldr	r3, [pc, #72]	; (8008410 <pvPortMalloc+0x140>)
 80083c6:	681a      	ldr	r2, [r3, #0]
 80083c8:	4b13      	ldr	r3, [pc, #76]	; (8008418 <pvPortMalloc+0x148>)
 80083ca:	681b      	ldr	r3, [r3, #0]
 80083cc:	429a      	cmp	r2, r3
 80083ce:	d203      	bcs.n	80083d8 <pvPortMalloc+0x108>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 80083d0:	4b0f      	ldr	r3, [pc, #60]	; (8008410 <pvPortMalloc+0x140>)
 80083d2:	681a      	ldr	r2, [r3, #0]
 80083d4:	4b10      	ldr	r3, [pc, #64]	; (8008418 <pvPortMalloc+0x148>)
 80083d6:	601a      	str	r2, [r3, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 80083d8:	697b      	ldr	r3, [r7, #20]
 80083da:	685a      	ldr	r2, [r3, #4]
 80083dc:	4b0b      	ldr	r3, [pc, #44]	; (800840c <pvPortMalloc+0x13c>)
 80083de:	681b      	ldr	r3, [r3, #0]
 80083e0:	431a      	orrs	r2, r3
 80083e2:	697b      	ldr	r3, [r7, #20]
 80083e4:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 80083e6:	697b      	ldr	r3, [r7, #20]
 80083e8:	2200      	movs	r2, #0
 80083ea:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 80083ec:	f7ff fb8c 	bl	8007b08 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 80083f0:	68fb      	ldr	r3, [r7, #12]
 80083f2:	2207      	movs	r2, #7
 80083f4:	4013      	ands	r3, r2
 80083f6:	d001      	beq.n	80083fc <pvPortMalloc+0x12c>
 80083f8:	b672      	cpsid	i
 80083fa:	e7fe      	b.n	80083fa <pvPortMalloc+0x12a>
	return pvReturn;
 80083fc:	68fb      	ldr	r3, [r7, #12]
}
 80083fe:	0018      	movs	r0, r3
 8008400:	46bd      	mov	sp, r7
 8008402:	b006      	add	sp, #24
 8008404:	bd80      	pop	{r7, pc}
 8008406:	46c0      	nop			; (mov r8, r8)
 8008408:	20001330 	.word	0x20001330
 800840c:	2000133c 	.word	0x2000133c
 8008410:	20001334 	.word	0x20001334
 8008414:	20001328 	.word	0x20001328
 8008418:	20001338 	.word	0x20001338

0800841c <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 800841c:	b580      	push	{r7, lr}
 800841e:	b084      	sub	sp, #16
 8008420:	af00      	add	r7, sp, #0
 8008422:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8008424:	687b      	ldr	r3, [r7, #4]
 8008426:	60fb      	str	r3, [r7, #12]
BlockLink_t *pxLink;

	if( pv != NULL )
 8008428:	687b      	ldr	r3, [r7, #4]
 800842a:	2b00      	cmp	r3, #0
 800842c:	d035      	beq.n	800849a <vPortFree+0x7e>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800842e:	2308      	movs	r3, #8
 8008430:	425b      	negs	r3, r3
 8008432:	68fa      	ldr	r2, [r7, #12]
 8008434:	18d3      	adds	r3, r2, r3
 8008436:	60fb      	str	r3, [r7, #12]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8008438:	68fb      	ldr	r3, [r7, #12]
 800843a:	60bb      	str	r3, [r7, #8]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800843c:	68bb      	ldr	r3, [r7, #8]
 800843e:	685a      	ldr	r2, [r3, #4]
 8008440:	4b18      	ldr	r3, [pc, #96]	; (80084a4 <vPortFree+0x88>)
 8008442:	681b      	ldr	r3, [r3, #0]
 8008444:	4013      	ands	r3, r2
 8008446:	d101      	bne.n	800844c <vPortFree+0x30>
 8008448:	b672      	cpsid	i
 800844a:	e7fe      	b.n	800844a <vPortFree+0x2e>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800844c:	68bb      	ldr	r3, [r7, #8]
 800844e:	681b      	ldr	r3, [r3, #0]
 8008450:	2b00      	cmp	r3, #0
 8008452:	d001      	beq.n	8008458 <vPortFree+0x3c>
 8008454:	b672      	cpsid	i
 8008456:	e7fe      	b.n	8008456 <vPortFree+0x3a>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8008458:	68bb      	ldr	r3, [r7, #8]
 800845a:	685a      	ldr	r2, [r3, #4]
 800845c:	4b11      	ldr	r3, [pc, #68]	; (80084a4 <vPortFree+0x88>)
 800845e:	681b      	ldr	r3, [r3, #0]
 8008460:	4013      	ands	r3, r2
 8008462:	d01a      	beq.n	800849a <vPortFree+0x7e>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8008464:	68bb      	ldr	r3, [r7, #8]
 8008466:	681b      	ldr	r3, [r3, #0]
 8008468:	2b00      	cmp	r3, #0
 800846a:	d116      	bne.n	800849a <vPortFree+0x7e>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800846c:	68bb      	ldr	r3, [r7, #8]
 800846e:	685a      	ldr	r2, [r3, #4]
 8008470:	4b0c      	ldr	r3, [pc, #48]	; (80084a4 <vPortFree+0x88>)
 8008472:	681b      	ldr	r3, [r3, #0]
 8008474:	43db      	mvns	r3, r3
 8008476:	401a      	ands	r2, r3
 8008478:	68bb      	ldr	r3, [r7, #8]
 800847a:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 800847c:	f7ff fb38 	bl	8007af0 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8008480:	68bb      	ldr	r3, [r7, #8]
 8008482:	685a      	ldr	r2, [r3, #4]
 8008484:	4b08      	ldr	r3, [pc, #32]	; (80084a8 <vPortFree+0x8c>)
 8008486:	681b      	ldr	r3, [r3, #0]
 8008488:	18d2      	adds	r2, r2, r3
 800848a:	4b07      	ldr	r3, [pc, #28]	; (80084a8 <vPortFree+0x8c>)
 800848c:	601a      	str	r2, [r3, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800848e:	68bb      	ldr	r3, [r7, #8]
 8008490:	0018      	movs	r0, r3
 8008492:	f000 f86b 	bl	800856c <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 8008496:	f7ff fb37 	bl	8007b08 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800849a:	46c0      	nop			; (mov r8, r8)
 800849c:	46bd      	mov	sp, r7
 800849e:	b004      	add	sp, #16
 80084a0:	bd80      	pop	{r7, pc}
 80084a2:	46c0      	nop			; (mov r8, r8)
 80084a4:	2000133c 	.word	0x2000133c
 80084a8:	20001334 	.word	0x20001334

080084ac <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 80084ac:	b580      	push	{r7, lr}
 80084ae:	b084      	sub	sp, #16
 80084b0:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 80084b2:	23f0      	movs	r3, #240	; 0xf0
 80084b4:	011b      	lsls	r3, r3, #4
 80084b6:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 80084b8:	4b26      	ldr	r3, [pc, #152]	; (8008554 <prvHeapInit+0xa8>)
 80084ba:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 80084bc:	68fb      	ldr	r3, [r7, #12]
 80084be:	2207      	movs	r2, #7
 80084c0:	4013      	ands	r3, r2
 80084c2:	d00c      	beq.n	80084de <prvHeapInit+0x32>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 80084c4:	68fb      	ldr	r3, [r7, #12]
 80084c6:	3307      	adds	r3, #7
 80084c8:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80084ca:	68fb      	ldr	r3, [r7, #12]
 80084cc:	2207      	movs	r2, #7
 80084ce:	4393      	bics	r3, r2
 80084d0:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 80084d2:	68ba      	ldr	r2, [r7, #8]
 80084d4:	68fb      	ldr	r3, [r7, #12]
 80084d6:	1ad2      	subs	r2, r2, r3
 80084d8:	4b1e      	ldr	r3, [pc, #120]	; (8008554 <prvHeapInit+0xa8>)
 80084da:	18d3      	adds	r3, r2, r3
 80084dc:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 80084de:	68fb      	ldr	r3, [r7, #12]
 80084e0:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 80084e2:	4b1d      	ldr	r3, [pc, #116]	; (8008558 <prvHeapInit+0xac>)
 80084e4:	687a      	ldr	r2, [r7, #4]
 80084e6:	601a      	str	r2, [r3, #0]
	xStart.xBlockSize = ( size_t ) 0;
 80084e8:	4b1b      	ldr	r3, [pc, #108]	; (8008558 <prvHeapInit+0xac>)
 80084ea:	2200      	movs	r2, #0
 80084ec:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 80084ee:	687b      	ldr	r3, [r7, #4]
 80084f0:	68ba      	ldr	r2, [r7, #8]
 80084f2:	18d3      	adds	r3, r2, r3
 80084f4:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 80084f6:	2208      	movs	r2, #8
 80084f8:	68fb      	ldr	r3, [r7, #12]
 80084fa:	1a9b      	subs	r3, r3, r2
 80084fc:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80084fe:	68fb      	ldr	r3, [r7, #12]
 8008500:	2207      	movs	r2, #7
 8008502:	4393      	bics	r3, r2
 8008504:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8008506:	68fa      	ldr	r2, [r7, #12]
 8008508:	4b14      	ldr	r3, [pc, #80]	; (800855c <prvHeapInit+0xb0>)
 800850a:	601a      	str	r2, [r3, #0]
	pxEnd->xBlockSize = 0;
 800850c:	4b13      	ldr	r3, [pc, #76]	; (800855c <prvHeapInit+0xb0>)
 800850e:	681b      	ldr	r3, [r3, #0]
 8008510:	2200      	movs	r2, #0
 8008512:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8008514:	4b11      	ldr	r3, [pc, #68]	; (800855c <prvHeapInit+0xb0>)
 8008516:	681b      	ldr	r3, [r3, #0]
 8008518:	2200      	movs	r2, #0
 800851a:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800851c:	687b      	ldr	r3, [r7, #4]
 800851e:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8008520:	683b      	ldr	r3, [r7, #0]
 8008522:	68fa      	ldr	r2, [r7, #12]
 8008524:	1ad2      	subs	r2, r2, r3
 8008526:	683b      	ldr	r3, [r7, #0]
 8008528:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800852a:	4b0c      	ldr	r3, [pc, #48]	; (800855c <prvHeapInit+0xb0>)
 800852c:	681a      	ldr	r2, [r3, #0]
 800852e:	683b      	ldr	r3, [r7, #0]
 8008530:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8008532:	683b      	ldr	r3, [r7, #0]
 8008534:	685a      	ldr	r2, [r3, #4]
 8008536:	4b0a      	ldr	r3, [pc, #40]	; (8008560 <prvHeapInit+0xb4>)
 8008538:	601a      	str	r2, [r3, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800853a:	683b      	ldr	r3, [r7, #0]
 800853c:	685a      	ldr	r2, [r3, #4]
 800853e:	4b09      	ldr	r3, [pc, #36]	; (8008564 <prvHeapInit+0xb8>)
 8008540:	601a      	str	r2, [r3, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8008542:	4b09      	ldr	r3, [pc, #36]	; (8008568 <prvHeapInit+0xbc>)
 8008544:	2280      	movs	r2, #128	; 0x80
 8008546:	0612      	lsls	r2, r2, #24
 8008548:	601a      	str	r2, [r3, #0]
}
 800854a:	46c0      	nop			; (mov r8, r8)
 800854c:	46bd      	mov	sp, r7
 800854e:	b004      	add	sp, #16
 8008550:	bd80      	pop	{r7, pc}
 8008552:	46c0      	nop			; (mov r8, r8)
 8008554:	20000428 	.word	0x20000428
 8008558:	20001328 	.word	0x20001328
 800855c:	20001330 	.word	0x20001330
 8008560:	20001338 	.word	0x20001338
 8008564:	20001334 	.word	0x20001334
 8008568:	2000133c 	.word	0x2000133c

0800856c <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800856c:	b580      	push	{r7, lr}
 800856e:	b084      	sub	sp, #16
 8008570:	af00      	add	r7, sp, #0
 8008572:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8008574:	4b27      	ldr	r3, [pc, #156]	; (8008614 <prvInsertBlockIntoFreeList+0xa8>)
 8008576:	60fb      	str	r3, [r7, #12]
 8008578:	e002      	b.n	8008580 <prvInsertBlockIntoFreeList+0x14>
 800857a:	68fb      	ldr	r3, [r7, #12]
 800857c:	681b      	ldr	r3, [r3, #0]
 800857e:	60fb      	str	r3, [r7, #12]
 8008580:	68fb      	ldr	r3, [r7, #12]
 8008582:	681b      	ldr	r3, [r3, #0]
 8008584:	687a      	ldr	r2, [r7, #4]
 8008586:	429a      	cmp	r2, r3
 8008588:	d8f7      	bhi.n	800857a <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800858a:	68fb      	ldr	r3, [r7, #12]
 800858c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800858e:	68fb      	ldr	r3, [r7, #12]
 8008590:	685b      	ldr	r3, [r3, #4]
 8008592:	68ba      	ldr	r2, [r7, #8]
 8008594:	18d3      	adds	r3, r2, r3
 8008596:	687a      	ldr	r2, [r7, #4]
 8008598:	429a      	cmp	r2, r3
 800859a:	d108      	bne.n	80085ae <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800859c:	68fb      	ldr	r3, [r7, #12]
 800859e:	685a      	ldr	r2, [r3, #4]
 80085a0:	687b      	ldr	r3, [r7, #4]
 80085a2:	685b      	ldr	r3, [r3, #4]
 80085a4:	18d2      	adds	r2, r2, r3
 80085a6:	68fb      	ldr	r3, [r7, #12]
 80085a8:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 80085aa:	68fb      	ldr	r3, [r7, #12]
 80085ac:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 80085ae:	687b      	ldr	r3, [r7, #4]
 80085b0:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 80085b2:	687b      	ldr	r3, [r7, #4]
 80085b4:	685b      	ldr	r3, [r3, #4]
 80085b6:	68ba      	ldr	r2, [r7, #8]
 80085b8:	18d2      	adds	r2, r2, r3
 80085ba:	68fb      	ldr	r3, [r7, #12]
 80085bc:	681b      	ldr	r3, [r3, #0]
 80085be:	429a      	cmp	r2, r3
 80085c0:	d118      	bne.n	80085f4 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 80085c2:	68fb      	ldr	r3, [r7, #12]
 80085c4:	681a      	ldr	r2, [r3, #0]
 80085c6:	4b14      	ldr	r3, [pc, #80]	; (8008618 <prvInsertBlockIntoFreeList+0xac>)
 80085c8:	681b      	ldr	r3, [r3, #0]
 80085ca:	429a      	cmp	r2, r3
 80085cc:	d00d      	beq.n	80085ea <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 80085ce:	687b      	ldr	r3, [r7, #4]
 80085d0:	685a      	ldr	r2, [r3, #4]
 80085d2:	68fb      	ldr	r3, [r7, #12]
 80085d4:	681b      	ldr	r3, [r3, #0]
 80085d6:	685b      	ldr	r3, [r3, #4]
 80085d8:	18d2      	adds	r2, r2, r3
 80085da:	687b      	ldr	r3, [r7, #4]
 80085dc:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 80085de:	68fb      	ldr	r3, [r7, #12]
 80085e0:	681b      	ldr	r3, [r3, #0]
 80085e2:	681a      	ldr	r2, [r3, #0]
 80085e4:	687b      	ldr	r3, [r7, #4]
 80085e6:	601a      	str	r2, [r3, #0]
 80085e8:	e008      	b.n	80085fc <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 80085ea:	4b0b      	ldr	r3, [pc, #44]	; (8008618 <prvInsertBlockIntoFreeList+0xac>)
 80085ec:	681a      	ldr	r2, [r3, #0]
 80085ee:	687b      	ldr	r3, [r7, #4]
 80085f0:	601a      	str	r2, [r3, #0]
 80085f2:	e003      	b.n	80085fc <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 80085f4:	68fb      	ldr	r3, [r7, #12]
 80085f6:	681a      	ldr	r2, [r3, #0]
 80085f8:	687b      	ldr	r3, [r7, #4]
 80085fa:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 80085fc:	68fa      	ldr	r2, [r7, #12]
 80085fe:	687b      	ldr	r3, [r7, #4]
 8008600:	429a      	cmp	r2, r3
 8008602:	d002      	beq.n	800860a <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8008604:	68fb      	ldr	r3, [r7, #12]
 8008606:	687a      	ldr	r2, [r7, #4]
 8008608:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800860a:	46c0      	nop			; (mov r8, r8)
 800860c:	46bd      	mov	sp, r7
 800860e:	b004      	add	sp, #16
 8008610:	bd80      	pop	{r7, pc}
 8008612:	46c0      	nop			; (mov r8, r8)
 8008614:	20001328 	.word	0x20001328
 8008618:	20001330 	.word	0x20001330

0800861c <__errno>:
 800861c:	4b01      	ldr	r3, [pc, #4]	; (8008624 <__errno+0x8>)
 800861e:	6818      	ldr	r0, [r3, #0]
 8008620:	4770      	bx	lr
 8008622:	46c0      	nop			; (mov r8, r8)
 8008624:	20000010 	.word	0x20000010

08008628 <__libc_init_array>:
 8008628:	b570      	push	{r4, r5, r6, lr}
 800862a:	2600      	movs	r6, #0
 800862c:	4d0c      	ldr	r5, [pc, #48]	; (8008660 <__libc_init_array+0x38>)
 800862e:	4c0d      	ldr	r4, [pc, #52]	; (8008664 <__libc_init_array+0x3c>)
 8008630:	1b64      	subs	r4, r4, r5
 8008632:	10a4      	asrs	r4, r4, #2
 8008634:	42a6      	cmp	r6, r4
 8008636:	d109      	bne.n	800864c <__libc_init_array+0x24>
 8008638:	2600      	movs	r6, #0
 800863a:	f000 fe19 	bl	8009270 <_init>
 800863e:	4d0a      	ldr	r5, [pc, #40]	; (8008668 <__libc_init_array+0x40>)
 8008640:	4c0a      	ldr	r4, [pc, #40]	; (800866c <__libc_init_array+0x44>)
 8008642:	1b64      	subs	r4, r4, r5
 8008644:	10a4      	asrs	r4, r4, #2
 8008646:	42a6      	cmp	r6, r4
 8008648:	d105      	bne.n	8008656 <__libc_init_array+0x2e>
 800864a:	bd70      	pop	{r4, r5, r6, pc}
 800864c:	00b3      	lsls	r3, r6, #2
 800864e:	58eb      	ldr	r3, [r5, r3]
 8008650:	4798      	blx	r3
 8008652:	3601      	adds	r6, #1
 8008654:	e7ee      	b.n	8008634 <__libc_init_array+0xc>
 8008656:	00b3      	lsls	r3, r6, #2
 8008658:	58eb      	ldr	r3, [r5, r3]
 800865a:	4798      	blx	r3
 800865c:	3601      	adds	r6, #1
 800865e:	e7f2      	b.n	8008646 <__libc_init_array+0x1e>
 8008660:	080095b4 	.word	0x080095b4
 8008664:	080095b4 	.word	0x080095b4
 8008668:	080095b4 	.word	0x080095b4
 800866c:	080095b8 	.word	0x080095b8

08008670 <memset>:
 8008670:	0003      	movs	r3, r0
 8008672:	1812      	adds	r2, r2, r0
 8008674:	4293      	cmp	r3, r2
 8008676:	d100      	bne.n	800867a <memset+0xa>
 8008678:	4770      	bx	lr
 800867a:	7019      	strb	r1, [r3, #0]
 800867c:	3301      	adds	r3, #1
 800867e:	e7f9      	b.n	8008674 <memset+0x4>

08008680 <powf>:
 8008680:	b5f0      	push	{r4, r5, r6, r7, lr}
 8008682:	2500      	movs	r5, #0
 8008684:	b091      	sub	sp, #68	; 0x44
 8008686:	1c06      	adds	r6, r0, #0
 8008688:	1c0f      	adds	r7, r1, #0
 800868a:	f000 f991 	bl	80089b0 <__ieee754_powf>
 800868e:	4bc1      	ldr	r3, [pc, #772]	; (8008994 <powf+0x314>)
 8008690:	1c04      	adds	r4, r0, #0
 8008692:	575d      	ldrsb	r5, [r3, r5]
 8008694:	1c6b      	adds	r3, r5, #1
 8008696:	d100      	bne.n	800869a <powf+0x1a>
 8008698:	e0df      	b.n	800885a <powf+0x1da>
 800869a:	1c39      	adds	r1, r7, #0
 800869c:	1c38      	adds	r0, r7, #0
 800869e:	f7f8 fc9f 	bl	8000fe0 <__aeabi_fcmpun>
 80086a2:	9001      	str	r0, [sp, #4]
 80086a4:	2800      	cmp	r0, #0
 80086a6:	d000      	beq.n	80086aa <powf+0x2a>
 80086a8:	e0d7      	b.n	800885a <powf+0x1da>
 80086aa:	1c31      	adds	r1, r6, #0
 80086ac:	1c30      	adds	r0, r6, #0
 80086ae:	f7f8 fc97 	bl	8000fe0 <__aeabi_fcmpun>
 80086b2:	2100      	movs	r1, #0
 80086b4:	9002      	str	r0, [sp, #8]
 80086b6:	2800      	cmp	r0, #0
 80086b8:	d021      	beq.n	80086fe <powf+0x7e>
 80086ba:	1c38      	adds	r0, r7, #0
 80086bc:	f7f7 fdfa 	bl	80002b4 <__aeabi_fcmpeq>
 80086c0:	2800      	cmp	r0, #0
 80086c2:	d100      	bne.n	80086c6 <powf+0x46>
 80086c4:	e0c9      	b.n	800885a <powf+0x1da>
 80086c6:	2301      	movs	r3, #1
 80086c8:	9306      	str	r3, [sp, #24]
 80086ca:	4bb3      	ldr	r3, [pc, #716]	; (8008998 <powf+0x318>)
 80086cc:	1c30      	adds	r0, r6, #0
 80086ce:	9307      	str	r3, [sp, #28]
 80086d0:	9b01      	ldr	r3, [sp, #4]
 80086d2:	930e      	str	r3, [sp, #56]	; 0x38
 80086d4:	f7fa fa54 	bl	8002b80 <__aeabi_f2d>
 80086d8:	9008      	str	r0, [sp, #32]
 80086da:	9109      	str	r1, [sp, #36]	; 0x24
 80086dc:	1c38      	adds	r0, r7, #0
 80086de:	f7fa fa4f 	bl	8002b80 <__aeabi_f2d>
 80086e2:	2200      	movs	r2, #0
 80086e4:	4bad      	ldr	r3, [pc, #692]	; (800899c <powf+0x31c>)
 80086e6:	900a      	str	r0, [sp, #40]	; 0x28
 80086e8:	910b      	str	r1, [sp, #44]	; 0x2c
 80086ea:	920c      	str	r2, [sp, #48]	; 0x30
 80086ec:	930d      	str	r3, [sp, #52]	; 0x34
 80086ee:	2d02      	cmp	r5, #2
 80086f0:	d034      	beq.n	800875c <powf+0xdc>
 80086f2:	a806      	add	r0, sp, #24
 80086f4:	f000 fd02 	bl	80090fc <matherr>
 80086f8:	2800      	cmp	r0, #0
 80086fa:	d126      	bne.n	800874a <powf+0xca>
 80086fc:	e05c      	b.n	80087b8 <powf+0x138>
 80086fe:	1c30      	adds	r0, r6, #0
 8008700:	f7f7 fdd8 	bl	80002b4 <__aeabi_fcmpeq>
 8008704:	2800      	cmp	r0, #0
 8008706:	d05c      	beq.n	80087c2 <powf+0x142>
 8008708:	2100      	movs	r1, #0
 800870a:	1c38      	adds	r0, r7, #0
 800870c:	f7f7 fdd2 	bl	80002b4 <__aeabi_fcmpeq>
 8008710:	9001      	str	r0, [sp, #4]
 8008712:	2800      	cmp	r0, #0
 8008714:	d025      	beq.n	8008762 <powf+0xe2>
 8008716:	2301      	movs	r3, #1
 8008718:	9306      	str	r3, [sp, #24]
 800871a:	4b9f      	ldr	r3, [pc, #636]	; (8008998 <powf+0x318>)
 800871c:	1c30      	adds	r0, r6, #0
 800871e:	9307      	str	r3, [sp, #28]
 8008720:	9b02      	ldr	r3, [sp, #8]
 8008722:	930e      	str	r3, [sp, #56]	; 0x38
 8008724:	f7fa fa2c 	bl	8002b80 <__aeabi_f2d>
 8008728:	9008      	str	r0, [sp, #32]
 800872a:	9109      	str	r1, [sp, #36]	; 0x24
 800872c:	1c38      	adds	r0, r7, #0
 800872e:	f7fa fa27 	bl	8002b80 <__aeabi_f2d>
 8008732:	2200      	movs	r2, #0
 8008734:	2300      	movs	r3, #0
 8008736:	900a      	str	r0, [sp, #40]	; 0x28
 8008738:	910b      	str	r1, [sp, #44]	; 0x2c
 800873a:	920c      	str	r2, [sp, #48]	; 0x30
 800873c:	930d      	str	r3, [sp, #52]	; 0x34
 800873e:	2d00      	cmp	r5, #0
 8008740:	d0d7      	beq.n	80086f2 <powf+0x72>
 8008742:	2200      	movs	r2, #0
 8008744:	4b95      	ldr	r3, [pc, #596]	; (800899c <powf+0x31c>)
 8008746:	920c      	str	r2, [sp, #48]	; 0x30
 8008748:	930d      	str	r3, [sp, #52]	; 0x34
 800874a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800874c:	9301      	str	r3, [sp, #4]
 800874e:	2b00      	cmp	r3, #0
 8008750:	d004      	beq.n	800875c <powf+0xdc>
 8008752:	f7ff ff63 	bl	800861c <__errno>
 8008756:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8008758:	9301      	str	r3, [sp, #4]
 800875a:	6003      	str	r3, [r0, #0]
 800875c:	980c      	ldr	r0, [sp, #48]	; 0x30
 800875e:	990d      	ldr	r1, [sp, #52]	; 0x34
 8008760:	e078      	b.n	8008854 <powf+0x1d4>
 8008762:	1c38      	adds	r0, r7, #0
 8008764:	f000 fcd0 	bl	8009108 <finitef>
 8008768:	2800      	cmp	r0, #0
 800876a:	d076      	beq.n	800885a <powf+0x1da>
 800876c:	2100      	movs	r1, #0
 800876e:	1c38      	adds	r0, r7, #0
 8008770:	f7f7 fda6 	bl	80002c0 <__aeabi_fcmplt>
 8008774:	2800      	cmp	r0, #0
 8008776:	d070      	beq.n	800885a <powf+0x1da>
 8008778:	2301      	movs	r3, #1
 800877a:	9306      	str	r3, [sp, #24]
 800877c:	4b86      	ldr	r3, [pc, #536]	; (8008998 <powf+0x318>)
 800877e:	1c30      	adds	r0, r6, #0
 8008780:	9307      	str	r3, [sp, #28]
 8008782:	9b01      	ldr	r3, [sp, #4]
 8008784:	930e      	str	r3, [sp, #56]	; 0x38
 8008786:	f7fa f9fb 	bl	8002b80 <__aeabi_f2d>
 800878a:	9008      	str	r0, [sp, #32]
 800878c:	9109      	str	r1, [sp, #36]	; 0x24
 800878e:	1c38      	adds	r0, r7, #0
 8008790:	f7fa f9f6 	bl	8002b80 <__aeabi_f2d>
 8008794:	4b7f      	ldr	r3, [pc, #508]	; (8008994 <powf+0x314>)
 8008796:	900a      	str	r0, [sp, #40]	; 0x28
 8008798:	910b      	str	r1, [sp, #44]	; 0x2c
 800879a:	781b      	ldrb	r3, [r3, #0]
 800879c:	b25b      	sxtb	r3, r3
 800879e:	2b00      	cmp	r3, #0
 80087a0:	d104      	bne.n	80087ac <powf+0x12c>
 80087a2:	2200      	movs	r2, #0
 80087a4:	2300      	movs	r3, #0
 80087a6:	920c      	str	r2, [sp, #48]	; 0x30
 80087a8:	930d      	str	r3, [sp, #52]	; 0x34
 80087aa:	e7a2      	b.n	80086f2 <powf+0x72>
 80087ac:	2000      	movs	r0, #0
 80087ae:	497c      	ldr	r1, [pc, #496]	; (80089a0 <powf+0x320>)
 80087b0:	900c      	str	r0, [sp, #48]	; 0x30
 80087b2:	910d      	str	r1, [sp, #52]	; 0x34
 80087b4:	2b02      	cmp	r3, #2
 80087b6:	d19c      	bne.n	80086f2 <powf+0x72>
 80087b8:	f7ff ff30 	bl	800861c <__errno>
 80087bc:	2321      	movs	r3, #33	; 0x21
 80087be:	6003      	str	r3, [r0, #0]
 80087c0:	e7c3      	b.n	800874a <powf+0xca>
 80087c2:	1c20      	adds	r0, r4, #0
 80087c4:	f000 fca0 	bl	8009108 <finitef>
 80087c8:	1e05      	subs	r5, r0, #0
 80087ca:	d000      	beq.n	80087ce <powf+0x14e>
 80087cc:	e0aa      	b.n	8008924 <powf+0x2a4>
 80087ce:	1c30      	adds	r0, r6, #0
 80087d0:	f000 fc9a 	bl	8009108 <finitef>
 80087d4:	2800      	cmp	r0, #0
 80087d6:	d100      	bne.n	80087da <powf+0x15a>
 80087d8:	e0a4      	b.n	8008924 <powf+0x2a4>
 80087da:	1c38      	adds	r0, r7, #0
 80087dc:	f000 fc94 	bl	8009108 <finitef>
 80087e0:	2800      	cmp	r0, #0
 80087e2:	d100      	bne.n	80087e6 <powf+0x166>
 80087e4:	e09e      	b.n	8008924 <powf+0x2a4>
 80087e6:	1c30      	adds	r0, r6, #0
 80087e8:	f7fa f9ca 	bl	8002b80 <__aeabi_f2d>
 80087ec:	9002      	str	r0, [sp, #8]
 80087ee:	9103      	str	r1, [sp, #12]
 80087f0:	1c38      	adds	r0, r7, #0
 80087f2:	f7fa f9c5 	bl	8002b80 <__aeabi_f2d>
 80087f6:	4b67      	ldr	r3, [pc, #412]	; (8008994 <powf+0x314>)
 80087f8:	9004      	str	r0, [sp, #16]
 80087fa:	9105      	str	r1, [sp, #20]
 80087fc:	781b      	ldrb	r3, [r3, #0]
 80087fe:	1c21      	adds	r1, r4, #0
 8008800:	b25b      	sxtb	r3, r3
 8008802:	1c20      	adds	r0, r4, #0
 8008804:	9301      	str	r3, [sp, #4]
 8008806:	f7f8 fbeb 	bl	8000fe0 <__aeabi_fcmpun>
 800880a:	ac06      	add	r4, sp, #24
 800880c:	4b62      	ldr	r3, [pc, #392]	; (8008998 <powf+0x318>)
 800880e:	2800      	cmp	r0, #0
 8008810:	d036      	beq.n	8008880 <powf+0x200>
 8008812:	2201      	movs	r2, #1
 8008814:	6063      	str	r3, [r4, #4]
 8008816:	9206      	str	r2, [sp, #24]
 8008818:	9a02      	ldr	r2, [sp, #8]
 800881a:	9b03      	ldr	r3, [sp, #12]
 800881c:	60a2      	str	r2, [r4, #8]
 800881e:	60e3      	str	r3, [r4, #12]
 8008820:	9a04      	ldr	r2, [sp, #16]
 8008822:	9b05      	ldr	r3, [sp, #20]
 8008824:	6122      	str	r2, [r4, #16]
 8008826:	6163      	str	r3, [r4, #20]
 8008828:	9b01      	ldr	r3, [sp, #4]
 800882a:	6225      	str	r5, [r4, #32]
 800882c:	2b00      	cmp	r3, #0
 800882e:	d117      	bne.n	8008860 <powf+0x1e0>
 8008830:	2200      	movs	r2, #0
 8008832:	2300      	movs	r3, #0
 8008834:	61a2      	str	r2, [r4, #24]
 8008836:	61e3      	str	r3, [r4, #28]
 8008838:	0020      	movs	r0, r4
 800883a:	f000 fc5f 	bl	80090fc <matherr>
 800883e:	2800      	cmp	r0, #0
 8008840:	d019      	beq.n	8008876 <powf+0x1f6>
 8008842:	6a23      	ldr	r3, [r4, #32]
 8008844:	2b00      	cmp	r3, #0
 8008846:	d003      	beq.n	8008850 <powf+0x1d0>
 8008848:	f7ff fee8 	bl	800861c <__errno>
 800884c:	6a23      	ldr	r3, [r4, #32]
 800884e:	6003      	str	r3, [r0, #0]
 8008850:	69a0      	ldr	r0, [r4, #24]
 8008852:	69e1      	ldr	r1, [r4, #28]
 8008854:	f7fa f9e6 	bl	8002c24 <__aeabi_d2f>
 8008858:	1c04      	adds	r4, r0, #0
 800885a:	1c20      	adds	r0, r4, #0
 800885c:	b011      	add	sp, #68	; 0x44
 800885e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8008860:	2100      	movs	r1, #0
 8008862:	1c08      	adds	r0, r1, #0
 8008864:	f7f7 feee 	bl	8000644 <__aeabi_fdiv>
 8008868:	f7fa f98a 	bl	8002b80 <__aeabi_f2d>
 800886c:	9b01      	ldr	r3, [sp, #4]
 800886e:	61a0      	str	r0, [r4, #24]
 8008870:	61e1      	str	r1, [r4, #28]
 8008872:	2b02      	cmp	r3, #2
 8008874:	d1e0      	bne.n	8008838 <powf+0x1b8>
 8008876:	f7ff fed1 	bl	800861c <__errno>
 800887a:	2321      	movs	r3, #33	; 0x21
 800887c:	6003      	str	r3, [r0, #0]
 800887e:	e7e0      	b.n	8008842 <powf+0x1c2>
 8008880:	2203      	movs	r2, #3
 8008882:	21fc      	movs	r1, #252	; 0xfc
 8008884:	9206      	str	r2, [sp, #24]
 8008886:	6063      	str	r3, [r4, #4]
 8008888:	6220      	str	r0, [r4, #32]
 800888a:	9a02      	ldr	r2, [sp, #8]
 800888c:	9b03      	ldr	r3, [sp, #12]
 800888e:	0589      	lsls	r1, r1, #22
 8008890:	60a2      	str	r2, [r4, #8]
 8008892:	60e3      	str	r3, [r4, #12]
 8008894:	9a04      	ldr	r2, [sp, #16]
 8008896:	9b05      	ldr	r3, [sp, #20]
 8008898:	1c38      	adds	r0, r7, #0
 800889a:	6122      	str	r2, [r4, #16]
 800889c:	6163      	str	r3, [r4, #20]
 800889e:	f7f8 f8a9 	bl	80009f4 <__aeabi_fmul>
 80088a2:	9b01      	ldr	r3, [sp, #4]
 80088a4:	1c05      	adds	r5, r0, #0
 80088a6:	2b00      	cmp	r3, #0
 80088a8:	d120      	bne.n	80088ec <powf+0x26c>
 80088aa:	22e0      	movs	r2, #224	; 0xe0
 80088ac:	4b3d      	ldr	r3, [pc, #244]	; (80089a4 <powf+0x324>)
 80088ae:	0612      	lsls	r2, r2, #24
 80088b0:	61a2      	str	r2, [r4, #24]
 80088b2:	61e3      	str	r3, [r4, #28]
 80088b4:	2100      	movs	r1, #0
 80088b6:	1c30      	adds	r0, r6, #0
 80088b8:	f7f7 fd02 	bl	80002c0 <__aeabi_fcmplt>
 80088bc:	2800      	cmp	r0, #0
 80088be:	d02a      	beq.n	8008916 <powf+0x296>
 80088c0:	1c28      	adds	r0, r5, #0
 80088c2:	f000 fc2f 	bl	8009124 <rintf>
 80088c6:	1c29      	adds	r1, r5, #0
 80088c8:	f7f7 fcf4 	bl	80002b4 <__aeabi_fcmpeq>
 80088cc:	2800      	cmp	r0, #0
 80088ce:	d104      	bne.n	80088da <powf+0x25a>
 80088d0:	22e0      	movs	r2, #224	; 0xe0
 80088d2:	4b35      	ldr	r3, [pc, #212]	; (80089a8 <powf+0x328>)
 80088d4:	0612      	lsls	r2, r2, #24
 80088d6:	61a2      	str	r2, [r4, #24]
 80088d8:	61e3      	str	r3, [r4, #28]
 80088da:	4b2e      	ldr	r3, [pc, #184]	; (8008994 <powf+0x314>)
 80088dc:	781b      	ldrb	r3, [r3, #0]
 80088de:	b25b      	sxtb	r3, r3
 80088e0:	2b02      	cmp	r3, #2
 80088e2:	d118      	bne.n	8008916 <powf+0x296>
 80088e4:	f7ff fe9a 	bl	800861c <__errno>
 80088e8:	2322      	movs	r3, #34	; 0x22
 80088ea:	e7c7      	b.n	800887c <powf+0x1fc>
 80088ec:	2200      	movs	r2, #0
 80088ee:	4b2f      	ldr	r3, [pc, #188]	; (80089ac <powf+0x32c>)
 80088f0:	2100      	movs	r1, #0
 80088f2:	61a2      	str	r2, [r4, #24]
 80088f4:	61e3      	str	r3, [r4, #28]
 80088f6:	1c30      	adds	r0, r6, #0
 80088f8:	f7f7 fce2 	bl	80002c0 <__aeabi_fcmplt>
 80088fc:	2800      	cmp	r0, #0
 80088fe:	d0ec      	beq.n	80088da <powf+0x25a>
 8008900:	1c28      	adds	r0, r5, #0
 8008902:	f000 fc0f 	bl	8009124 <rintf>
 8008906:	1c29      	adds	r1, r5, #0
 8008908:	f7f7 fcd4 	bl	80002b4 <__aeabi_fcmpeq>
 800890c:	2800      	cmp	r0, #0
 800890e:	d1e4      	bne.n	80088da <powf+0x25a>
 8008910:	2200      	movs	r2, #0
 8008912:	4b23      	ldr	r3, [pc, #140]	; (80089a0 <powf+0x320>)
 8008914:	e7df      	b.n	80088d6 <powf+0x256>
 8008916:	0020      	movs	r0, r4
 8008918:	f000 fbf0 	bl	80090fc <matherr>
 800891c:	2800      	cmp	r0, #0
 800891e:	d000      	beq.n	8008922 <powf+0x2a2>
 8008920:	e78f      	b.n	8008842 <powf+0x1c2>
 8008922:	e7df      	b.n	80088e4 <powf+0x264>
 8008924:	2100      	movs	r1, #0
 8008926:	1c20      	adds	r0, r4, #0
 8008928:	f7f7 fcc4 	bl	80002b4 <__aeabi_fcmpeq>
 800892c:	2800      	cmp	r0, #0
 800892e:	d100      	bne.n	8008932 <powf+0x2b2>
 8008930:	e793      	b.n	800885a <powf+0x1da>
 8008932:	1c30      	adds	r0, r6, #0
 8008934:	f000 fbe8 	bl	8009108 <finitef>
 8008938:	2800      	cmp	r0, #0
 800893a:	d100      	bne.n	800893e <powf+0x2be>
 800893c:	e78d      	b.n	800885a <powf+0x1da>
 800893e:	1c38      	adds	r0, r7, #0
 8008940:	f000 fbe2 	bl	8009108 <finitef>
 8008944:	2800      	cmp	r0, #0
 8008946:	d100      	bne.n	800894a <powf+0x2ca>
 8008948:	e787      	b.n	800885a <powf+0x1da>
 800894a:	2304      	movs	r3, #4
 800894c:	9306      	str	r3, [sp, #24]
 800894e:	4b12      	ldr	r3, [pc, #72]	; (8008998 <powf+0x318>)
 8008950:	1c30      	adds	r0, r6, #0
 8008952:	9307      	str	r3, [sp, #28]
 8008954:	2300      	movs	r3, #0
 8008956:	930e      	str	r3, [sp, #56]	; 0x38
 8008958:	f7fa f912 	bl	8002b80 <__aeabi_f2d>
 800895c:	9008      	str	r0, [sp, #32]
 800895e:	9109      	str	r1, [sp, #36]	; 0x24
 8008960:	1c38      	adds	r0, r7, #0
 8008962:	f7fa f90d 	bl	8002b80 <__aeabi_f2d>
 8008966:	2300      	movs	r3, #0
 8008968:	2200      	movs	r2, #0
 800896a:	920c      	str	r2, [sp, #48]	; 0x30
 800896c:	930d      	str	r3, [sp, #52]	; 0x34
 800896e:	4b09      	ldr	r3, [pc, #36]	; (8008994 <powf+0x314>)
 8008970:	900a      	str	r0, [sp, #40]	; 0x28
 8008972:	910b      	str	r1, [sp, #44]	; 0x2c
 8008974:	781b      	ldrb	r3, [r3, #0]
 8008976:	b25b      	sxtb	r3, r3
 8008978:	2b02      	cmp	r3, #2
 800897a:	d103      	bne.n	8008984 <powf+0x304>
 800897c:	f7ff fe4e 	bl	800861c <__errno>
 8008980:	2322      	movs	r3, #34	; 0x22
 8008982:	e71c      	b.n	80087be <powf+0x13e>
 8008984:	a806      	add	r0, sp, #24
 8008986:	f000 fbb9 	bl	80090fc <matherr>
 800898a:	2800      	cmp	r0, #0
 800898c:	d000      	beq.n	8008990 <powf+0x310>
 800898e:	e6dc      	b.n	800874a <powf+0xca>
 8008990:	e7f4      	b.n	800897c <powf+0x2fc>
 8008992:	46c0      	nop			; (mov r8, r8)
 8008994:	20000074 	.word	0x20000074
 8008998:	0800958c 	.word	0x0800958c
 800899c:	3ff00000 	.word	0x3ff00000
 80089a0:	fff00000 	.word	0xfff00000
 80089a4:	47efffff 	.word	0x47efffff
 80089a8:	c7efffff 	.word	0xc7efffff
 80089ac:	7ff00000 	.word	0x7ff00000

080089b0 <__ieee754_powf>:
 80089b0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80089b2:	b08b      	sub	sp, #44	; 0x2c
 80089b4:	9101      	str	r1, [sp, #4]
 80089b6:	9f01      	ldr	r7, [sp, #4]
 80089b8:	1c06      	adds	r6, r0, #0
 80089ba:	007d      	lsls	r5, r7, #1
 80089bc:	086d      	lsrs	r5, r5, #1
 80089be:	d100      	bne.n	80089c2 <__ieee754_powf+0x12>
 80089c0:	e308      	b.n	8008fd4 <__ieee754_powf+0x624>
 80089c2:	22ff      	movs	r2, #255	; 0xff
 80089c4:	0044      	lsls	r4, r0, #1
 80089c6:	9003      	str	r0, [sp, #12]
 80089c8:	0864      	lsrs	r4, r4, #1
 80089ca:	05d2      	lsls	r2, r2, #23
 80089cc:	4294      	cmp	r4, r2
 80089ce:	dc06      	bgt.n	80089de <__ieee754_powf+0x2e>
 80089d0:	23fe      	movs	r3, #254	; 0xfe
 80089d2:	059b      	lsls	r3, r3, #22
 80089d4:	4295      	cmp	r5, r2
 80089d6:	dd07      	ble.n	80089e8 <__ieee754_powf+0x38>
 80089d8:	429c      	cmp	r4, r3
 80089da:	d100      	bne.n	80089de <__ieee754_powf+0x2e>
 80089dc:	e2fa      	b.n	8008fd4 <__ieee754_powf+0x624>
 80089de:	4886      	ldr	r0, [pc, #536]	; (8008bf8 <__ieee754_powf+0x248>)
 80089e0:	f000 fb9c 	bl	800911c <nanf>
 80089e4:	b00b      	add	sp, #44	; 0x2c
 80089e6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80089e8:	2100      	movs	r1, #0
 80089ea:	9102      	str	r1, [sp, #8]
 80089ec:	2800      	cmp	r0, #0
 80089ee:	da22      	bge.n	8008a36 <__ieee754_powf+0x86>
 80089f0:	4982      	ldr	r1, [pc, #520]	; (8008bfc <__ieee754_powf+0x24c>)
 80089f2:	428d      	cmp	r5, r1
 80089f4:	dc1d      	bgt.n	8008a32 <__ieee754_powf+0x82>
 80089f6:	4b82      	ldr	r3, [pc, #520]	; (8008c00 <__ieee754_powf+0x250>)
 80089f8:	429d      	cmp	r5, r3
 80089fa:	dd0d      	ble.n	8008a18 <__ieee754_powf+0x68>
 80089fc:	2396      	movs	r3, #150	; 0x96
 80089fe:	15ea      	asrs	r2, r5, #23
 8008a00:	1a9a      	subs	r2, r3, r2
 8008a02:	002b      	movs	r3, r5
 8008a04:	4113      	asrs	r3, r2
 8008a06:	0019      	movs	r1, r3
 8008a08:	4091      	lsls	r1, r2
 8008a0a:	42a9      	cmp	r1, r5
 8008a0c:	d104      	bne.n	8008a18 <__ieee754_powf+0x68>
 8008a0e:	2201      	movs	r2, #1
 8008a10:	4013      	ands	r3, r2
 8008a12:	1892      	adds	r2, r2, r2
 8008a14:	1ad3      	subs	r3, r2, r3
 8008a16:	9302      	str	r3, [sp, #8]
 8008a18:	23fe      	movs	r3, #254	; 0xfe
 8008a1a:	059b      	lsls	r3, r3, #22
 8008a1c:	429d      	cmp	r5, r3
 8008a1e:	d11e      	bne.n	8008a5e <__ieee754_powf+0xae>
 8008a20:	1c30      	adds	r0, r6, #0
 8008a22:	2f00      	cmp	r7, #0
 8008a24:	dade      	bge.n	80089e4 <__ieee754_powf+0x34>
 8008a26:	20fe      	movs	r0, #254	; 0xfe
 8008a28:	1c31      	adds	r1, r6, #0
 8008a2a:	0580      	lsls	r0, r0, #22
 8008a2c:	f7f7 fe0a 	bl	8000644 <__aeabi_fdiv>
 8008a30:	e7d8      	b.n	80089e4 <__ieee754_powf+0x34>
 8008a32:	2102      	movs	r1, #2
 8008a34:	9102      	str	r1, [sp, #8]
 8008a36:	4295      	cmp	r5, r2
 8008a38:	d1ee      	bne.n	8008a18 <__ieee754_powf+0x68>
 8008a3a:	429c      	cmp	r4, r3
 8008a3c:	d100      	bne.n	8008a40 <__ieee754_powf+0x90>
 8008a3e:	e2c9      	b.n	8008fd4 <__ieee754_powf+0x624>
 8008a40:	dd04      	ble.n	8008a4c <__ieee754_powf+0x9c>
 8008a42:	9801      	ldr	r0, [sp, #4]
 8008a44:	2f00      	cmp	r7, #0
 8008a46:	dacd      	bge.n	80089e4 <__ieee754_powf+0x34>
 8008a48:	2000      	movs	r0, #0
 8008a4a:	e7cb      	b.n	80089e4 <__ieee754_powf+0x34>
 8008a4c:	2f00      	cmp	r7, #0
 8008a4e:	dafb      	bge.n	8008a48 <__ieee754_powf+0x98>
 8008a50:	2280      	movs	r2, #128	; 0x80
 8008a52:	0612      	lsls	r2, r2, #24
 8008a54:	4694      	mov	ip, r2
 8008a56:	9b01      	ldr	r3, [sp, #4]
 8008a58:	4463      	add	r3, ip
 8008a5a:	0018      	movs	r0, r3
 8008a5c:	e7c2      	b.n	80089e4 <__ieee754_powf+0x34>
 8008a5e:	2380      	movs	r3, #128	; 0x80
 8008a60:	05db      	lsls	r3, r3, #23
 8008a62:	429f      	cmp	r7, r3
 8008a64:	d104      	bne.n	8008a70 <__ieee754_powf+0xc0>
 8008a66:	1c31      	adds	r1, r6, #0
 8008a68:	1c30      	adds	r0, r6, #0
 8008a6a:	f7f7 ffc3 	bl	80009f4 <__aeabi_fmul>
 8008a6e:	e7b9      	b.n	80089e4 <__ieee754_powf+0x34>
 8008a70:	23fc      	movs	r3, #252	; 0xfc
 8008a72:	1c30      	adds	r0, r6, #0
 8008a74:	059b      	lsls	r3, r3, #22
 8008a76:	429f      	cmp	r7, r3
 8008a78:	d104      	bne.n	8008a84 <__ieee754_powf+0xd4>
 8008a7a:	2e00      	cmp	r6, #0
 8008a7c:	db02      	blt.n	8008a84 <__ieee754_powf+0xd4>
 8008a7e:	f000 fae5 	bl	800904c <__ieee754_sqrtf>
 8008a82:	e7af      	b.n	80089e4 <__ieee754_powf+0x34>
 8008a84:	f000 fb3c 	bl	8009100 <fabsf>
 8008a88:	2c00      	cmp	r4, #0
 8008a8a:	d005      	beq.n	8008a98 <__ieee754_powf+0xe8>
 8008a8c:	22fe      	movs	r2, #254	; 0xfe
 8008a8e:	00b3      	lsls	r3, r6, #2
 8008a90:	089b      	lsrs	r3, r3, #2
 8008a92:	0592      	lsls	r2, r2, #22
 8008a94:	4293      	cmp	r3, r2
 8008a96:	d11b      	bne.n	8008ad0 <__ieee754_powf+0x120>
 8008a98:	2f00      	cmp	r7, #0
 8008a9a:	da04      	bge.n	8008aa6 <__ieee754_powf+0xf6>
 8008a9c:	1c01      	adds	r1, r0, #0
 8008a9e:	20fe      	movs	r0, #254	; 0xfe
 8008aa0:	0580      	lsls	r0, r0, #22
 8008aa2:	f7f7 fdcf 	bl	8000644 <__aeabi_fdiv>
 8008aa6:	9b03      	ldr	r3, [sp, #12]
 8008aa8:	2b00      	cmp	r3, #0
 8008aaa:	da9b      	bge.n	80089e4 <__ieee754_powf+0x34>
 8008aac:	4b55      	ldr	r3, [pc, #340]	; (8008c04 <__ieee754_powf+0x254>)
 8008aae:	18e4      	adds	r4, r4, r3
 8008ab0:	9b02      	ldr	r3, [sp, #8]
 8008ab2:	431c      	orrs	r4, r3
 8008ab4:	d104      	bne.n	8008ac0 <__ieee754_powf+0x110>
 8008ab6:	1c01      	adds	r1, r0, #0
 8008ab8:	f7f8 f8ce 	bl	8000c58 <__aeabi_fsub>
 8008abc:	1c01      	adds	r1, r0, #0
 8008abe:	e7b5      	b.n	8008a2c <__ieee754_powf+0x7c>
 8008ac0:	9b02      	ldr	r3, [sp, #8]
 8008ac2:	2b01      	cmp	r3, #1
 8008ac4:	d000      	beq.n	8008ac8 <__ieee754_powf+0x118>
 8008ac6:	e78d      	b.n	80089e4 <__ieee754_powf+0x34>
 8008ac8:	2380      	movs	r3, #128	; 0x80
 8008aca:	061b      	lsls	r3, r3, #24
 8008acc:	18c0      	adds	r0, r0, r3
 8008ace:	e789      	b.n	80089e4 <__ieee754_powf+0x34>
 8008ad0:	0ff3      	lsrs	r3, r6, #31
 8008ad2:	3b01      	subs	r3, #1
 8008ad4:	9305      	str	r3, [sp, #20]
 8008ad6:	9a05      	ldr	r2, [sp, #20]
 8008ad8:	9b02      	ldr	r3, [sp, #8]
 8008ada:	4313      	orrs	r3, r2
 8008adc:	d102      	bne.n	8008ae4 <__ieee754_powf+0x134>
 8008ade:	1c31      	adds	r1, r6, #0
 8008ae0:	1c30      	adds	r0, r6, #0
 8008ae2:	e7e9      	b.n	8008ab8 <__ieee754_powf+0x108>
 8008ae4:	239a      	movs	r3, #154	; 0x9a
 8008ae6:	05db      	lsls	r3, r3, #23
 8008ae8:	429d      	cmp	r5, r3
 8008aea:	dc00      	bgt.n	8008aee <__ieee754_powf+0x13e>
 8008aec:	e09c      	b.n	8008c28 <__ieee754_powf+0x278>
 8008aee:	4b46      	ldr	r3, [pc, #280]	; (8008c08 <__ieee754_powf+0x258>)
 8008af0:	429c      	cmp	r4, r3
 8008af2:	dc04      	bgt.n	8008afe <__ieee754_powf+0x14e>
 8008af4:	2f00      	cmp	r7, #0
 8008af6:	daa7      	bge.n	8008a48 <__ieee754_powf+0x98>
 8008af8:	4944      	ldr	r1, [pc, #272]	; (8008c0c <__ieee754_powf+0x25c>)
 8008afa:	1c08      	adds	r0, r1, #0
 8008afc:	e7b5      	b.n	8008a6a <__ieee754_powf+0xba>
 8008afe:	4b44      	ldr	r3, [pc, #272]	; (8008c10 <__ieee754_powf+0x260>)
 8008b00:	429c      	cmp	r4, r3
 8008b02:	dd02      	ble.n	8008b0a <__ieee754_powf+0x15a>
 8008b04:	2f00      	cmp	r7, #0
 8008b06:	dcf7      	bgt.n	8008af8 <__ieee754_powf+0x148>
 8008b08:	e79e      	b.n	8008a48 <__ieee754_powf+0x98>
 8008b0a:	21fe      	movs	r1, #254	; 0xfe
 8008b0c:	0589      	lsls	r1, r1, #22
 8008b0e:	f7f8 f8a3 	bl	8000c58 <__aeabi_fsub>
 8008b12:	4940      	ldr	r1, [pc, #256]	; (8008c14 <__ieee754_powf+0x264>)
 8008b14:	1c04      	adds	r4, r0, #0
 8008b16:	f7f7 ff6d 	bl	80009f4 <__aeabi_fmul>
 8008b1a:	493f      	ldr	r1, [pc, #252]	; (8008c18 <__ieee754_powf+0x268>)
 8008b1c:	1c05      	adds	r5, r0, #0
 8008b1e:	1c20      	adds	r0, r4, #0
 8008b20:	f7f7 ff68 	bl	80009f4 <__aeabi_fmul>
 8008b24:	21fa      	movs	r1, #250	; 0xfa
 8008b26:	1c06      	adds	r6, r0, #0
 8008b28:	0589      	lsls	r1, r1, #22
 8008b2a:	1c20      	adds	r0, r4, #0
 8008b2c:	f7f7 ff62 	bl	80009f4 <__aeabi_fmul>
 8008b30:	1c01      	adds	r1, r0, #0
 8008b32:	483a      	ldr	r0, [pc, #232]	; (8008c1c <__ieee754_powf+0x26c>)
 8008b34:	f7f8 f890 	bl	8000c58 <__aeabi_fsub>
 8008b38:	1c21      	adds	r1, r4, #0
 8008b3a:	f7f7 ff5b 	bl	80009f4 <__aeabi_fmul>
 8008b3e:	1c01      	adds	r1, r0, #0
 8008b40:	20fc      	movs	r0, #252	; 0xfc
 8008b42:	0580      	lsls	r0, r0, #22
 8008b44:	f7f8 f888 	bl	8000c58 <__aeabi_fsub>
 8008b48:	1c21      	adds	r1, r4, #0
 8008b4a:	1c07      	adds	r7, r0, #0
 8008b4c:	1c20      	adds	r0, r4, #0
 8008b4e:	f7f7 ff51 	bl	80009f4 <__aeabi_fmul>
 8008b52:	1c01      	adds	r1, r0, #0
 8008b54:	1c38      	adds	r0, r7, #0
 8008b56:	f7f7 ff4d 	bl	80009f4 <__aeabi_fmul>
 8008b5a:	4931      	ldr	r1, [pc, #196]	; (8008c20 <__ieee754_powf+0x270>)
 8008b5c:	f7f7 ff4a 	bl	80009f4 <__aeabi_fmul>
 8008b60:	1c01      	adds	r1, r0, #0
 8008b62:	1c30      	adds	r0, r6, #0
 8008b64:	f7f8 f878 	bl	8000c58 <__aeabi_fsub>
 8008b68:	1c01      	adds	r1, r0, #0
 8008b6a:	1c06      	adds	r6, r0, #0
 8008b6c:	1c28      	adds	r0, r5, #0
 8008b6e:	f7f7 fbcf 	bl	8000310 <__aeabi_fadd>
 8008b72:	0b04      	lsrs	r4, r0, #12
 8008b74:	0324      	lsls	r4, r4, #12
 8008b76:	1c29      	adds	r1, r5, #0
 8008b78:	1c20      	adds	r0, r4, #0
 8008b7a:	f7f8 f86d 	bl	8000c58 <__aeabi_fsub>
 8008b7e:	1c01      	adds	r1, r0, #0
 8008b80:	1c30      	adds	r0, r6, #0
 8008b82:	f7f8 f869 	bl	8000c58 <__aeabi_fsub>
 8008b86:	9b02      	ldr	r3, [sp, #8]
 8008b88:	9a05      	ldr	r2, [sp, #20]
 8008b8a:	3b01      	subs	r3, #1
 8008b8c:	1c07      	adds	r7, r0, #0
 8008b8e:	4313      	orrs	r3, r2
 8008b90:	d000      	beq.n	8008b94 <__ieee754_powf+0x1e4>
 8008b92:	e154      	b.n	8008e3e <__ieee754_powf+0x48e>
 8008b94:	4e23      	ldr	r6, [pc, #140]	; (8008c24 <__ieee754_powf+0x274>)
 8008b96:	9b01      	ldr	r3, [sp, #4]
 8008b98:	9801      	ldr	r0, [sp, #4]
 8008b9a:	0b1d      	lsrs	r5, r3, #12
 8008b9c:	032d      	lsls	r5, r5, #12
 8008b9e:	1c29      	adds	r1, r5, #0
 8008ba0:	f7f8 f85a 	bl	8000c58 <__aeabi_fsub>
 8008ba4:	1c21      	adds	r1, r4, #0
 8008ba6:	f7f7 ff25 	bl	80009f4 <__aeabi_fmul>
 8008baa:	9901      	ldr	r1, [sp, #4]
 8008bac:	9002      	str	r0, [sp, #8]
 8008bae:	1c38      	adds	r0, r7, #0
 8008bb0:	f7f7 ff20 	bl	80009f4 <__aeabi_fmul>
 8008bb4:	1c01      	adds	r1, r0, #0
 8008bb6:	9802      	ldr	r0, [sp, #8]
 8008bb8:	f7f7 fbaa 	bl	8000310 <__aeabi_fadd>
 8008bbc:	1c29      	adds	r1, r5, #0
 8008bbe:	9001      	str	r0, [sp, #4]
 8008bc0:	1c20      	adds	r0, r4, #0
 8008bc2:	f7f7 ff17 	bl	80009f4 <__aeabi_fmul>
 8008bc6:	9002      	str	r0, [sp, #8]
 8008bc8:	9003      	str	r0, [sp, #12]
 8008bca:	1c01      	adds	r1, r0, #0
 8008bcc:	9801      	ldr	r0, [sp, #4]
 8008bce:	f7f7 fb9f 	bl	8000310 <__aeabi_fadd>
 8008bd2:	0047      	lsls	r7, r0, #1
 8008bd4:	1c05      	adds	r5, r0, #0
 8008bd6:	9004      	str	r0, [sp, #16]
 8008bd8:	087f      	lsrs	r7, r7, #1
 8008bda:	2800      	cmp	r0, #0
 8008bdc:	dc00      	bgt.n	8008be0 <__ieee754_powf+0x230>
 8008bde:	e160      	b.n	8008ea2 <__ieee754_powf+0x4f2>
 8008be0:	2386      	movs	r3, #134	; 0x86
 8008be2:	05db      	lsls	r3, r3, #23
 8008be4:	429f      	cmp	r7, r3
 8008be6:	dc00      	bgt.n	8008bea <__ieee754_powf+0x23a>
 8008be8:	e12c      	b.n	8008e44 <__ieee754_powf+0x494>
 8008bea:	4908      	ldr	r1, [pc, #32]	; (8008c0c <__ieee754_powf+0x25c>)
 8008bec:	1c30      	adds	r0, r6, #0
 8008bee:	f7f7 ff01 	bl	80009f4 <__aeabi_fmul>
 8008bf2:	4906      	ldr	r1, [pc, #24]	; (8008c0c <__ieee754_powf+0x25c>)
 8008bf4:	e739      	b.n	8008a6a <__ieee754_powf+0xba>
 8008bf6:	46c0      	nop			; (mov r8, r8)
 8008bf8:	08009590 	.word	0x08009590
 8008bfc:	4b7fffff 	.word	0x4b7fffff
 8008c00:	3f7fffff 	.word	0x3f7fffff
 8008c04:	c0800000 	.word	0xc0800000
 8008c08:	3f7ffff7 	.word	0x3f7ffff7
 8008c0c:	7149f2ca 	.word	0x7149f2ca
 8008c10:	3f800007 	.word	0x3f800007
 8008c14:	3fb8aa00 	.word	0x3fb8aa00
 8008c18:	36eca570 	.word	0x36eca570
 8008c1c:	3eaaaaab 	.word	0x3eaaaaab
 8008c20:	3fb8aa3b 	.word	0x3fb8aa3b
 8008c24:	bf800000 	.word	0xbf800000
 8008c28:	4bec      	ldr	r3, [pc, #944]	; (8008fdc <__ieee754_powf+0x62c>)
 8008c2a:	2200      	movs	r2, #0
 8008c2c:	429c      	cmp	r4, r3
 8008c2e:	dc06      	bgt.n	8008c3e <__ieee754_powf+0x28e>
 8008c30:	2197      	movs	r1, #151	; 0x97
 8008c32:	05c9      	lsls	r1, r1, #23
 8008c34:	f7f7 fede 	bl	80009f4 <__aeabi_fmul>
 8008c38:	2218      	movs	r2, #24
 8008c3a:	0004      	movs	r4, r0
 8008c3c:	4252      	negs	r2, r2
 8008c3e:	25fe      	movs	r5, #254	; 0xfe
 8008c40:	15e3      	asrs	r3, r4, #23
 8008c42:	3b7f      	subs	r3, #127	; 0x7f
 8008c44:	189b      	adds	r3, r3, r2
 8008c46:	9304      	str	r3, [sp, #16]
 8008c48:	0264      	lsls	r4, r4, #9
 8008c4a:	4be5      	ldr	r3, [pc, #916]	; (8008fe0 <__ieee754_powf+0x630>)
 8008c4c:	0a64      	lsrs	r4, r4, #9
 8008c4e:	05ad      	lsls	r5, r5, #22
 8008c50:	4325      	orrs	r5, r4
 8008c52:	2600      	movs	r6, #0
 8008c54:	429c      	cmp	r4, r3
 8008c56:	dd09      	ble.n	8008c6c <__ieee754_powf+0x2bc>
 8008c58:	4be2      	ldr	r3, [pc, #904]	; (8008fe4 <__ieee754_powf+0x634>)
 8008c5a:	3601      	adds	r6, #1
 8008c5c:	429c      	cmp	r4, r3
 8008c5e:	dd05      	ble.n	8008c6c <__ieee754_powf+0x2bc>
 8008c60:	9b04      	ldr	r3, [sp, #16]
 8008c62:	199b      	adds	r3, r3, r6
 8008c64:	2600      	movs	r6, #0
 8008c66:	9304      	str	r3, [sp, #16]
 8008c68:	4bdf      	ldr	r3, [pc, #892]	; (8008fe8 <__ieee754_powf+0x638>)
 8008c6a:	18ed      	adds	r5, r5, r3
 8008c6c:	00b3      	lsls	r3, r6, #2
 8008c6e:	9306      	str	r3, [sp, #24]
 8008c70:	4bde      	ldr	r3, [pc, #888]	; (8008fec <__ieee754_powf+0x63c>)
 8008c72:	00b2      	lsls	r2, r6, #2
 8008c74:	58d4      	ldr	r4, [r2, r3]
 8008c76:	1c28      	adds	r0, r5, #0
 8008c78:	1c21      	adds	r1, r4, #0
 8008c7a:	9509      	str	r5, [sp, #36]	; 0x24
 8008c7c:	f7f7 ffec 	bl	8000c58 <__aeabi_fsub>
 8008c80:	1c29      	adds	r1, r5, #0
 8008c82:	9007      	str	r0, [sp, #28]
 8008c84:	1c20      	adds	r0, r4, #0
 8008c86:	f7f7 fb43 	bl	8000310 <__aeabi_fadd>
 8008c8a:	1c01      	adds	r1, r0, #0
 8008c8c:	20fe      	movs	r0, #254	; 0xfe
 8008c8e:	0580      	lsls	r0, r0, #22
 8008c90:	f7f7 fcd8 	bl	8000644 <__aeabi_fdiv>
 8008c94:	1c01      	adds	r1, r0, #0
 8008c96:	9008      	str	r0, [sp, #32]
 8008c98:	9807      	ldr	r0, [sp, #28]
 8008c9a:	f7f7 feab 	bl	80009f4 <__aeabi_fmul>
 8008c9e:	9003      	str	r0, [sp, #12]
 8008ca0:	9b03      	ldr	r3, [sp, #12]
 8008ca2:	106d      	asrs	r5, r5, #1
 8008ca4:	0b1f      	lsrs	r7, r3, #12
 8008ca6:	2380      	movs	r3, #128	; 0x80
 8008ca8:	059b      	lsls	r3, r3, #22
 8008caa:	431d      	orrs	r5, r3
 8008cac:	2380      	movs	r3, #128	; 0x80
 8008cae:	02db      	lsls	r3, r3, #11
 8008cb0:	18ed      	adds	r5, r5, r3
 8008cb2:	0576      	lsls	r6, r6, #21
 8008cb4:	033f      	lsls	r7, r7, #12
 8008cb6:	19ae      	adds	r6, r5, r6
 8008cb8:	1c31      	adds	r1, r6, #0
 8008cba:	1c38      	adds	r0, r7, #0
 8008cbc:	f7f7 fe9a 	bl	80009f4 <__aeabi_fmul>
 8008cc0:	1c01      	adds	r1, r0, #0
 8008cc2:	9807      	ldr	r0, [sp, #28]
 8008cc4:	f7f7 ffc8 	bl	8000c58 <__aeabi_fsub>
 8008cc8:	1c21      	adds	r1, r4, #0
 8008cca:	1c05      	adds	r5, r0, #0
 8008ccc:	1c30      	adds	r0, r6, #0
 8008cce:	f7f7 ffc3 	bl	8000c58 <__aeabi_fsub>
 8008cd2:	1c01      	adds	r1, r0, #0
 8008cd4:	9809      	ldr	r0, [sp, #36]	; 0x24
 8008cd6:	f7f7 ffbf 	bl	8000c58 <__aeabi_fsub>
 8008cda:	1c39      	adds	r1, r7, #0
 8008cdc:	f7f7 fe8a 	bl	80009f4 <__aeabi_fmul>
 8008ce0:	1c01      	adds	r1, r0, #0
 8008ce2:	1c28      	adds	r0, r5, #0
 8008ce4:	f7f7 ffb8 	bl	8000c58 <__aeabi_fsub>
 8008ce8:	9908      	ldr	r1, [sp, #32]
 8008cea:	f7f7 fe83 	bl	80009f4 <__aeabi_fmul>
 8008cee:	9903      	ldr	r1, [sp, #12]
 8008cf0:	9007      	str	r0, [sp, #28]
 8008cf2:	1c08      	adds	r0, r1, #0
 8008cf4:	f7f7 fe7e 	bl	80009f4 <__aeabi_fmul>
 8008cf8:	49bd      	ldr	r1, [pc, #756]	; (8008ff0 <__ieee754_powf+0x640>)
 8008cfa:	1c04      	adds	r4, r0, #0
 8008cfc:	f7f7 fe7a 	bl	80009f4 <__aeabi_fmul>
 8008d00:	49bc      	ldr	r1, [pc, #752]	; (8008ff4 <__ieee754_powf+0x644>)
 8008d02:	f7f7 fb05 	bl	8000310 <__aeabi_fadd>
 8008d06:	1c21      	adds	r1, r4, #0
 8008d08:	f7f7 fe74 	bl	80009f4 <__aeabi_fmul>
 8008d0c:	49ba      	ldr	r1, [pc, #744]	; (8008ff8 <__ieee754_powf+0x648>)
 8008d0e:	f7f7 faff 	bl	8000310 <__aeabi_fadd>
 8008d12:	1c21      	adds	r1, r4, #0
 8008d14:	f7f7 fe6e 	bl	80009f4 <__aeabi_fmul>
 8008d18:	49b8      	ldr	r1, [pc, #736]	; (8008ffc <__ieee754_powf+0x64c>)
 8008d1a:	f7f7 faf9 	bl	8000310 <__aeabi_fadd>
 8008d1e:	1c21      	adds	r1, r4, #0
 8008d20:	f7f7 fe68 	bl	80009f4 <__aeabi_fmul>
 8008d24:	49b6      	ldr	r1, [pc, #728]	; (8009000 <__ieee754_powf+0x650>)
 8008d26:	f7f7 faf3 	bl	8000310 <__aeabi_fadd>
 8008d2a:	1c21      	adds	r1, r4, #0
 8008d2c:	f7f7 fe62 	bl	80009f4 <__aeabi_fmul>
 8008d30:	49b4      	ldr	r1, [pc, #720]	; (8009004 <__ieee754_powf+0x654>)
 8008d32:	f7f7 faed 	bl	8000310 <__aeabi_fadd>
 8008d36:	1c21      	adds	r1, r4, #0
 8008d38:	1c05      	adds	r5, r0, #0
 8008d3a:	1c20      	adds	r0, r4, #0
 8008d3c:	f7f7 fe5a 	bl	80009f4 <__aeabi_fmul>
 8008d40:	1c01      	adds	r1, r0, #0
 8008d42:	1c28      	adds	r0, r5, #0
 8008d44:	f7f7 fe56 	bl	80009f4 <__aeabi_fmul>
 8008d48:	9903      	ldr	r1, [sp, #12]
 8008d4a:	1c04      	adds	r4, r0, #0
 8008d4c:	1c38      	adds	r0, r7, #0
 8008d4e:	f7f7 fadf 	bl	8000310 <__aeabi_fadd>
 8008d52:	9907      	ldr	r1, [sp, #28]
 8008d54:	f7f7 fe4e 	bl	80009f4 <__aeabi_fmul>
 8008d58:	1c21      	adds	r1, r4, #0
 8008d5a:	f7f7 fad9 	bl	8000310 <__aeabi_fadd>
 8008d5e:	1c39      	adds	r1, r7, #0
 8008d60:	1c06      	adds	r6, r0, #0
 8008d62:	1c38      	adds	r0, r7, #0
 8008d64:	f7f7 fe46 	bl	80009f4 <__aeabi_fmul>
 8008d68:	49a7      	ldr	r1, [pc, #668]	; (8009008 <__ieee754_powf+0x658>)
 8008d6a:	9008      	str	r0, [sp, #32]
 8008d6c:	f7f7 fad0 	bl	8000310 <__aeabi_fadd>
 8008d70:	1c31      	adds	r1, r6, #0
 8008d72:	f7f7 facd 	bl	8000310 <__aeabi_fadd>
 8008d76:	0b04      	lsrs	r4, r0, #12
 8008d78:	0324      	lsls	r4, r4, #12
 8008d7a:	1c21      	adds	r1, r4, #0
 8008d7c:	1c38      	adds	r0, r7, #0
 8008d7e:	f7f7 fe39 	bl	80009f4 <__aeabi_fmul>
 8008d82:	49a1      	ldr	r1, [pc, #644]	; (8009008 <__ieee754_powf+0x658>)
 8008d84:	1c05      	adds	r5, r0, #0
 8008d86:	1c20      	adds	r0, r4, #0
 8008d88:	f7f7 ff66 	bl	8000c58 <__aeabi_fsub>
 8008d8c:	9908      	ldr	r1, [sp, #32]
 8008d8e:	f7f7 ff63 	bl	8000c58 <__aeabi_fsub>
 8008d92:	1c01      	adds	r1, r0, #0
 8008d94:	1c30      	adds	r0, r6, #0
 8008d96:	f7f7 ff5f 	bl	8000c58 <__aeabi_fsub>
 8008d9a:	9903      	ldr	r1, [sp, #12]
 8008d9c:	f7f7 fe2a 	bl	80009f4 <__aeabi_fmul>
 8008da0:	9907      	ldr	r1, [sp, #28]
 8008da2:	1c06      	adds	r6, r0, #0
 8008da4:	1c20      	adds	r0, r4, #0
 8008da6:	f7f7 fe25 	bl	80009f4 <__aeabi_fmul>
 8008daa:	1c01      	adds	r1, r0, #0
 8008dac:	1c30      	adds	r0, r6, #0
 8008dae:	f7f7 faaf 	bl	8000310 <__aeabi_fadd>
 8008db2:	1c06      	adds	r6, r0, #0
 8008db4:	1c01      	adds	r1, r0, #0
 8008db6:	1c28      	adds	r0, r5, #0
 8008db8:	f7f7 faaa 	bl	8000310 <__aeabi_fadd>
 8008dbc:	0b04      	lsrs	r4, r0, #12
 8008dbe:	0324      	lsls	r4, r4, #12
 8008dc0:	4992      	ldr	r1, [pc, #584]	; (800900c <__ieee754_powf+0x65c>)
 8008dc2:	1c20      	adds	r0, r4, #0
 8008dc4:	f7f7 fe16 	bl	80009f4 <__aeabi_fmul>
 8008dc8:	1c29      	adds	r1, r5, #0
 8008dca:	9003      	str	r0, [sp, #12]
 8008dcc:	1c20      	adds	r0, r4, #0
 8008dce:	f7f7 ff43 	bl	8000c58 <__aeabi_fsub>
 8008dd2:	1c01      	adds	r1, r0, #0
 8008dd4:	1c30      	adds	r0, r6, #0
 8008dd6:	f7f7 ff3f 	bl	8000c58 <__aeabi_fsub>
 8008dda:	498d      	ldr	r1, [pc, #564]	; (8009010 <__ieee754_powf+0x660>)
 8008ddc:	f7f7 fe0a 	bl	80009f4 <__aeabi_fmul>
 8008de0:	498c      	ldr	r1, [pc, #560]	; (8009014 <__ieee754_powf+0x664>)
 8008de2:	1c05      	adds	r5, r0, #0
 8008de4:	1c20      	adds	r0, r4, #0
 8008de6:	f7f7 fe05 	bl	80009f4 <__aeabi_fmul>
 8008dea:	1c01      	adds	r1, r0, #0
 8008dec:	1c28      	adds	r0, r5, #0
 8008dee:	f7f7 fa8f 	bl	8000310 <__aeabi_fadd>
 8008df2:	4b89      	ldr	r3, [pc, #548]	; (8009018 <__ieee754_powf+0x668>)
 8008df4:	9a06      	ldr	r2, [sp, #24]
 8008df6:	58d1      	ldr	r1, [r2, r3]
 8008df8:	f7f7 fa8a 	bl	8000310 <__aeabi_fadd>
 8008dfc:	1c05      	adds	r5, r0, #0
 8008dfe:	9804      	ldr	r0, [sp, #16]
 8008e00:	f7f8 f924 	bl	800104c <__aeabi_i2f>
 8008e04:	4b85      	ldr	r3, [pc, #532]	; (800901c <__ieee754_powf+0x66c>)
 8008e06:	9a06      	ldr	r2, [sp, #24]
 8008e08:	1c07      	adds	r7, r0, #0
 8008e0a:	58d6      	ldr	r6, [r2, r3]
 8008e0c:	1c29      	adds	r1, r5, #0
 8008e0e:	9803      	ldr	r0, [sp, #12]
 8008e10:	f7f7 fa7e 	bl	8000310 <__aeabi_fadd>
 8008e14:	1c31      	adds	r1, r6, #0
 8008e16:	f7f7 fa7b 	bl	8000310 <__aeabi_fadd>
 8008e1a:	1c39      	adds	r1, r7, #0
 8008e1c:	f7f7 fa78 	bl	8000310 <__aeabi_fadd>
 8008e20:	0b04      	lsrs	r4, r0, #12
 8008e22:	0324      	lsls	r4, r4, #12
 8008e24:	1c39      	adds	r1, r7, #0
 8008e26:	1c20      	adds	r0, r4, #0
 8008e28:	f7f7 ff16 	bl	8000c58 <__aeabi_fsub>
 8008e2c:	1c31      	adds	r1, r6, #0
 8008e2e:	f7f7 ff13 	bl	8000c58 <__aeabi_fsub>
 8008e32:	9903      	ldr	r1, [sp, #12]
 8008e34:	f7f7 ff10 	bl	8000c58 <__aeabi_fsub>
 8008e38:	1c01      	adds	r1, r0, #0
 8008e3a:	1c28      	adds	r0, r5, #0
 8008e3c:	e6a1      	b.n	8008b82 <__ieee754_powf+0x1d2>
 8008e3e:	26fe      	movs	r6, #254	; 0xfe
 8008e40:	05b6      	lsls	r6, r6, #22
 8008e42:	e6a8      	b.n	8008b96 <__ieee754_powf+0x1e6>
 8008e44:	429f      	cmp	r7, r3
 8008e46:	d140      	bne.n	8008eca <__ieee754_powf+0x51a>
 8008e48:	4975      	ldr	r1, [pc, #468]	; (8009020 <__ieee754_powf+0x670>)
 8008e4a:	9801      	ldr	r0, [sp, #4]
 8008e4c:	f7f7 fa60 	bl	8000310 <__aeabi_fadd>
 8008e50:	9902      	ldr	r1, [sp, #8]
 8008e52:	1c04      	adds	r4, r0, #0
 8008e54:	1c28      	adds	r0, r5, #0
 8008e56:	f7f7 feff 	bl	8000c58 <__aeabi_fsub>
 8008e5a:	1c01      	adds	r1, r0, #0
 8008e5c:	1c20      	adds	r0, r4, #0
 8008e5e:	f7f7 fa43 	bl	80002e8 <__aeabi_fcmpgt>
 8008e62:	2800      	cmp	r0, #0
 8008e64:	d000      	beq.n	8008e68 <__ieee754_powf+0x4b8>
 8008e66:	e6c0      	b.n	8008bea <__ieee754_powf+0x23a>
 8008e68:	2480      	movs	r4, #128	; 0x80
 8008e6a:	0424      	lsls	r4, r4, #16
 8008e6c:	0022      	movs	r2, r4
 8008e6e:	15fb      	asrs	r3, r7, #23
 8008e70:	3b7e      	subs	r3, #126	; 0x7e
 8008e72:	411a      	asrs	r2, r3
 8008e74:	1955      	adds	r5, r2, r5
 8008e76:	15eb      	asrs	r3, r5, #23
 8008e78:	b2db      	uxtb	r3, r3
 8008e7a:	4a58      	ldr	r2, [pc, #352]	; (8008fdc <__ieee754_powf+0x62c>)
 8008e7c:	3b7f      	subs	r3, #127	; 0x7f
 8008e7e:	411a      	asrs	r2, r3
 8008e80:	0029      	movs	r1, r5
 8008e82:	4391      	bics	r1, r2
 8008e84:	2217      	movs	r2, #23
 8008e86:	026d      	lsls	r5, r5, #9
 8008e88:	0a6d      	lsrs	r5, r5, #9
 8008e8a:	1ad3      	subs	r3, r2, r3
 8008e8c:	432c      	orrs	r4, r5
 8008e8e:	411c      	asrs	r4, r3
 8008e90:	9b04      	ldr	r3, [sp, #16]
 8008e92:	2b00      	cmp	r3, #0
 8008e94:	da00      	bge.n	8008e98 <__ieee754_powf+0x4e8>
 8008e96:	4264      	negs	r4, r4
 8008e98:	9802      	ldr	r0, [sp, #8]
 8008e9a:	f7f7 fedd 	bl	8000c58 <__aeabi_fsub>
 8008e9e:	9003      	str	r0, [sp, #12]
 8008ea0:	e018      	b.n	8008ed4 <__ieee754_powf+0x524>
 8008ea2:	4b60      	ldr	r3, [pc, #384]	; (8009024 <__ieee754_powf+0x674>)
 8008ea4:	429f      	cmp	r7, r3
 8008ea6:	dd05      	ble.n	8008eb4 <__ieee754_powf+0x504>
 8008ea8:	495f      	ldr	r1, [pc, #380]	; (8009028 <__ieee754_powf+0x678>)
 8008eaa:	1c30      	adds	r0, r6, #0
 8008eac:	f7f7 fda2 	bl	80009f4 <__aeabi_fmul>
 8008eb0:	495d      	ldr	r1, [pc, #372]	; (8009028 <__ieee754_powf+0x678>)
 8008eb2:	e5da      	b.n	8008a6a <__ieee754_powf+0xba>
 8008eb4:	429f      	cmp	r7, r3
 8008eb6:	d108      	bne.n	8008eca <__ieee754_powf+0x51a>
 8008eb8:	9902      	ldr	r1, [sp, #8]
 8008eba:	f7f7 fecd 	bl	8000c58 <__aeabi_fsub>
 8008ebe:	9901      	ldr	r1, [sp, #4]
 8008ec0:	f7f7 fa1c 	bl	80002fc <__aeabi_fcmpge>
 8008ec4:	2800      	cmp	r0, #0
 8008ec6:	d0cf      	beq.n	8008e68 <__ieee754_powf+0x4b8>
 8008ec8:	e7ee      	b.n	8008ea8 <__ieee754_powf+0x4f8>
 8008eca:	23fc      	movs	r3, #252	; 0xfc
 8008ecc:	2400      	movs	r4, #0
 8008ece:	059b      	lsls	r3, r3, #22
 8008ed0:	429f      	cmp	r7, r3
 8008ed2:	dcc9      	bgt.n	8008e68 <__ieee754_powf+0x4b8>
 8008ed4:	9901      	ldr	r1, [sp, #4]
 8008ed6:	9803      	ldr	r0, [sp, #12]
 8008ed8:	f7f7 fa1a 	bl	8000310 <__aeabi_fadd>
 8008edc:	0b05      	lsrs	r5, r0, #12
 8008ede:	032d      	lsls	r5, r5, #12
 8008ee0:	4952      	ldr	r1, [pc, #328]	; (800902c <__ieee754_powf+0x67c>)
 8008ee2:	1c28      	adds	r0, r5, #0
 8008ee4:	f7f7 fd86 	bl	80009f4 <__aeabi_fmul>
 8008ee8:	9903      	ldr	r1, [sp, #12]
 8008eea:	9002      	str	r0, [sp, #8]
 8008eec:	1c28      	adds	r0, r5, #0
 8008eee:	f7f7 feb3 	bl	8000c58 <__aeabi_fsub>
 8008ef2:	1c01      	adds	r1, r0, #0
 8008ef4:	9801      	ldr	r0, [sp, #4]
 8008ef6:	f7f7 feaf 	bl	8000c58 <__aeabi_fsub>
 8008efa:	494d      	ldr	r1, [pc, #308]	; (8009030 <__ieee754_powf+0x680>)
 8008efc:	f7f7 fd7a 	bl	80009f4 <__aeabi_fmul>
 8008f00:	494c      	ldr	r1, [pc, #304]	; (8009034 <__ieee754_powf+0x684>)
 8008f02:	1c07      	adds	r7, r0, #0
 8008f04:	1c28      	adds	r0, r5, #0
 8008f06:	f7f7 fd75 	bl	80009f4 <__aeabi_fmul>
 8008f0a:	1c01      	adds	r1, r0, #0
 8008f0c:	1c38      	adds	r0, r7, #0
 8008f0e:	f7f7 f9ff 	bl	8000310 <__aeabi_fadd>
 8008f12:	1c07      	adds	r7, r0, #0
 8008f14:	1c01      	adds	r1, r0, #0
 8008f16:	9802      	ldr	r0, [sp, #8]
 8008f18:	f7f7 f9fa 	bl	8000310 <__aeabi_fadd>
 8008f1c:	9902      	ldr	r1, [sp, #8]
 8008f1e:	1c05      	adds	r5, r0, #0
 8008f20:	f7f7 fe9a 	bl	8000c58 <__aeabi_fsub>
 8008f24:	1c01      	adds	r1, r0, #0
 8008f26:	1c38      	adds	r0, r7, #0
 8008f28:	f7f7 fe96 	bl	8000c58 <__aeabi_fsub>
 8008f2c:	1c29      	adds	r1, r5, #0
 8008f2e:	9001      	str	r0, [sp, #4]
 8008f30:	1c28      	adds	r0, r5, #0
 8008f32:	f7f7 fd5f 	bl	80009f4 <__aeabi_fmul>
 8008f36:	4940      	ldr	r1, [pc, #256]	; (8009038 <__ieee754_powf+0x688>)
 8008f38:	1c07      	adds	r7, r0, #0
 8008f3a:	f7f7 fd5b 	bl	80009f4 <__aeabi_fmul>
 8008f3e:	493f      	ldr	r1, [pc, #252]	; (800903c <__ieee754_powf+0x68c>)
 8008f40:	f7f7 fe8a 	bl	8000c58 <__aeabi_fsub>
 8008f44:	1c39      	adds	r1, r7, #0
 8008f46:	f7f7 fd55 	bl	80009f4 <__aeabi_fmul>
 8008f4a:	493d      	ldr	r1, [pc, #244]	; (8009040 <__ieee754_powf+0x690>)
 8008f4c:	f7f7 f9e0 	bl	8000310 <__aeabi_fadd>
 8008f50:	1c39      	adds	r1, r7, #0
 8008f52:	f7f7 fd4f 	bl	80009f4 <__aeabi_fmul>
 8008f56:	493b      	ldr	r1, [pc, #236]	; (8009044 <__ieee754_powf+0x694>)
 8008f58:	f7f7 fe7e 	bl	8000c58 <__aeabi_fsub>
 8008f5c:	1c39      	adds	r1, r7, #0
 8008f5e:	f7f7 fd49 	bl	80009f4 <__aeabi_fmul>
 8008f62:	4939      	ldr	r1, [pc, #228]	; (8009048 <__ieee754_powf+0x698>)
 8008f64:	f7f7 f9d4 	bl	8000310 <__aeabi_fadd>
 8008f68:	1c39      	adds	r1, r7, #0
 8008f6a:	f7f7 fd43 	bl	80009f4 <__aeabi_fmul>
 8008f6e:	1c01      	adds	r1, r0, #0
 8008f70:	1c28      	adds	r0, r5, #0
 8008f72:	f7f7 fe71 	bl	8000c58 <__aeabi_fsub>
 8008f76:	1c07      	adds	r7, r0, #0
 8008f78:	1c01      	adds	r1, r0, #0
 8008f7a:	1c28      	adds	r0, r5, #0
 8008f7c:	f7f7 fd3a 	bl	80009f4 <__aeabi_fmul>
 8008f80:	2180      	movs	r1, #128	; 0x80
 8008f82:	9002      	str	r0, [sp, #8]
 8008f84:	05c9      	lsls	r1, r1, #23
 8008f86:	1c38      	adds	r0, r7, #0
 8008f88:	f7f7 fe66 	bl	8000c58 <__aeabi_fsub>
 8008f8c:	1c01      	adds	r1, r0, #0
 8008f8e:	9802      	ldr	r0, [sp, #8]
 8008f90:	f7f7 fb58 	bl	8000644 <__aeabi_fdiv>
 8008f94:	9901      	ldr	r1, [sp, #4]
 8008f96:	1c07      	adds	r7, r0, #0
 8008f98:	1c28      	adds	r0, r5, #0
 8008f9a:	f7f7 fd2b 	bl	80009f4 <__aeabi_fmul>
 8008f9e:	9901      	ldr	r1, [sp, #4]
 8008fa0:	f7f7 f9b6 	bl	8000310 <__aeabi_fadd>
 8008fa4:	1c01      	adds	r1, r0, #0
 8008fa6:	1c38      	adds	r0, r7, #0
 8008fa8:	f7f7 fe56 	bl	8000c58 <__aeabi_fsub>
 8008fac:	1c29      	adds	r1, r5, #0
 8008fae:	f7f7 fe53 	bl	8000c58 <__aeabi_fsub>
 8008fb2:	1c01      	adds	r1, r0, #0
 8008fb4:	20fe      	movs	r0, #254	; 0xfe
 8008fb6:	0580      	lsls	r0, r0, #22
 8008fb8:	f7f7 fe4e 	bl	8000c58 <__aeabi_fsub>
 8008fbc:	05e3      	lsls	r3, r4, #23
 8008fbe:	181b      	adds	r3, r3, r0
 8008fc0:	15da      	asrs	r2, r3, #23
 8008fc2:	2a00      	cmp	r2, #0
 8008fc4:	dc04      	bgt.n	8008fd0 <__ieee754_powf+0x620>
 8008fc6:	0021      	movs	r1, r4
 8008fc8:	f000 f8fa 	bl	80091c0 <scalbnf>
 8008fcc:	1c31      	adds	r1, r6, #0
 8008fce:	e54c      	b.n	8008a6a <__ieee754_powf+0xba>
 8008fd0:	1c18      	adds	r0, r3, #0
 8008fd2:	e7fb      	b.n	8008fcc <__ieee754_powf+0x61c>
 8008fd4:	20fe      	movs	r0, #254	; 0xfe
 8008fd6:	0580      	lsls	r0, r0, #22
 8008fd8:	e504      	b.n	80089e4 <__ieee754_powf+0x34>
 8008fda:	46c0      	nop			; (mov r8, r8)
 8008fdc:	007fffff 	.word	0x007fffff
 8008fe0:	001cc471 	.word	0x001cc471
 8008fe4:	005db3d6 	.word	0x005db3d6
 8008fe8:	ff800000 	.word	0xff800000
 8008fec:	08009594 	.word	0x08009594
 8008ff0:	3e53f142 	.word	0x3e53f142
 8008ff4:	3e6c3255 	.word	0x3e6c3255
 8008ff8:	3e8ba305 	.word	0x3e8ba305
 8008ffc:	3eaaaaab 	.word	0x3eaaaaab
 8009000:	3edb6db7 	.word	0x3edb6db7
 8009004:	3f19999a 	.word	0x3f19999a
 8009008:	40400000 	.word	0x40400000
 800900c:	3f763800 	.word	0x3f763800
 8009010:	3f76384f 	.word	0x3f76384f
 8009014:	369dc3a0 	.word	0x369dc3a0
 8009018:	080095a4 	.word	0x080095a4
 800901c:	0800959c 	.word	0x0800959c
 8009020:	3338aa3c 	.word	0x3338aa3c
 8009024:	43160000 	.word	0x43160000
 8009028:	0da24260 	.word	0x0da24260
 800902c:	3f317200 	.word	0x3f317200
 8009030:	3f317218 	.word	0x3f317218
 8009034:	35bfbe8c 	.word	0x35bfbe8c
 8009038:	3331bb4c 	.word	0x3331bb4c
 800903c:	35ddea0e 	.word	0x35ddea0e
 8009040:	388ab355 	.word	0x388ab355
 8009044:	3b360b61 	.word	0x3b360b61
 8009048:	3e2aaaab 	.word	0x3e2aaaab

0800904c <__ieee754_sqrtf>:
 800904c:	4929      	ldr	r1, [pc, #164]	; (80090f4 <__ieee754_sqrtf+0xa8>)
 800904e:	0043      	lsls	r3, r0, #1
 8009050:	b570      	push	{r4, r5, r6, lr}
 8009052:	0002      	movs	r2, r0
 8009054:	1c04      	adds	r4, r0, #0
 8009056:	085b      	lsrs	r3, r3, #1
 8009058:	428b      	cmp	r3, r1
 800905a:	d909      	bls.n	8009070 <__ieee754_sqrtf+0x24>
 800905c:	1c01      	adds	r1, r0, #0
 800905e:	f7f7 fcc9 	bl	80009f4 <__aeabi_fmul>
 8009062:	1c01      	adds	r1, r0, #0
 8009064:	1c20      	adds	r0, r4, #0
 8009066:	f7f7 f953 	bl	8000310 <__aeabi_fadd>
 800906a:	1c04      	adds	r4, r0, #0
 800906c:	1c20      	adds	r0, r4, #0
 800906e:	bd70      	pop	{r4, r5, r6, pc}
 8009070:	2b00      	cmp	r3, #0
 8009072:	d0fb      	beq.n	800906c <__ieee754_sqrtf+0x20>
 8009074:	2800      	cmp	r0, #0
 8009076:	da06      	bge.n	8009086 <__ieee754_sqrtf+0x3a>
 8009078:	1c01      	adds	r1, r0, #0
 800907a:	f7f7 fded 	bl	8000c58 <__aeabi_fsub>
 800907e:	1c01      	adds	r1, r0, #0
 8009080:	f7f7 fae0 	bl	8000644 <__aeabi_fdiv>
 8009084:	e7f1      	b.n	800906a <__ieee754_sqrtf+0x1e>
 8009086:	491c      	ldr	r1, [pc, #112]	; (80090f8 <__ieee754_sqrtf+0xac>)
 8009088:	15c4      	asrs	r4, r0, #23
 800908a:	428b      	cmp	r3, r1
 800908c:	d92d      	bls.n	80090ea <__ieee754_sqrtf+0x9e>
 800908e:	0252      	lsls	r2, r2, #9
 8009090:	0a53      	lsrs	r3, r2, #9
 8009092:	2280      	movs	r2, #128	; 0x80
 8009094:	3c7f      	subs	r4, #127	; 0x7f
 8009096:	0412      	lsls	r2, r2, #16
 8009098:	431a      	orrs	r2, r3
 800909a:	07e3      	lsls	r3, r4, #31
 800909c:	d500      	bpl.n	80090a0 <__ieee754_sqrtf+0x54>
 800909e:	0052      	lsls	r2, r2, #1
 80090a0:	2300      	movs	r3, #0
 80090a2:	2180      	movs	r1, #128	; 0x80
 80090a4:	2019      	movs	r0, #25
 80090a6:	001e      	movs	r6, r3
 80090a8:	1064      	asrs	r4, r4, #1
 80090aa:	0052      	lsls	r2, r2, #1
 80090ac:	0449      	lsls	r1, r1, #17
 80090ae:	1875      	adds	r5, r6, r1
 80090b0:	4295      	cmp	r5, r2
 80090b2:	dc02      	bgt.n	80090ba <__ieee754_sqrtf+0x6e>
 80090b4:	186e      	adds	r6, r5, r1
 80090b6:	1b52      	subs	r2, r2, r5
 80090b8:	185b      	adds	r3, r3, r1
 80090ba:	3801      	subs	r0, #1
 80090bc:	0052      	lsls	r2, r2, #1
 80090be:	0849      	lsrs	r1, r1, #1
 80090c0:	2800      	cmp	r0, #0
 80090c2:	d1f4      	bne.n	80090ae <__ieee754_sqrtf+0x62>
 80090c4:	2a00      	cmp	r2, #0
 80090c6:	d002      	beq.n	80090ce <__ieee754_sqrtf+0x82>
 80090c8:	2201      	movs	r2, #1
 80090ca:	3301      	adds	r3, #1
 80090cc:	4393      	bics	r3, r2
 80090ce:	22fc      	movs	r2, #252	; 0xfc
 80090d0:	105b      	asrs	r3, r3, #1
 80090d2:	0592      	lsls	r2, r2, #22
 80090d4:	189b      	adds	r3, r3, r2
 80090d6:	05e4      	lsls	r4, r4, #23
 80090d8:	18e4      	adds	r4, r4, r3
 80090da:	e7c7      	b.n	800906c <__ieee754_sqrtf+0x20>
 80090dc:	0052      	lsls	r2, r2, #1
 80090de:	3301      	adds	r3, #1
 80090e0:	420a      	tst	r2, r1
 80090e2:	d0fb      	beq.n	80090dc <__ieee754_sqrtf+0x90>
 80090e4:	3b01      	subs	r3, #1
 80090e6:	1ae4      	subs	r4, r4, r3
 80090e8:	e7d1      	b.n	800908e <__ieee754_sqrtf+0x42>
 80090ea:	2180      	movs	r1, #128	; 0x80
 80090ec:	2300      	movs	r3, #0
 80090ee:	0409      	lsls	r1, r1, #16
 80090f0:	e7f6      	b.n	80090e0 <__ieee754_sqrtf+0x94>
 80090f2:	46c0      	nop			; (mov r8, r8)
 80090f4:	7f7fffff 	.word	0x7f7fffff
 80090f8:	007fffff 	.word	0x007fffff

080090fc <matherr>:
 80090fc:	2000      	movs	r0, #0
 80090fe:	4770      	bx	lr

08009100 <fabsf>:
 8009100:	0040      	lsls	r0, r0, #1
 8009102:	0840      	lsrs	r0, r0, #1
 8009104:	4770      	bx	lr
	...

08009108 <finitef>:
 8009108:	0043      	lsls	r3, r0, #1
 800910a:	2000      	movs	r0, #0
 800910c:	4a02      	ldr	r2, [pc, #8]	; (8009118 <finitef+0x10>)
 800910e:	085b      	lsrs	r3, r3, #1
 8009110:	429a      	cmp	r2, r3
 8009112:	4140      	adcs	r0, r0
 8009114:	4770      	bx	lr
 8009116:	46c0      	nop			; (mov r8, r8)
 8009118:	7f7fffff 	.word	0x7f7fffff

0800911c <nanf>:
 800911c:	4800      	ldr	r0, [pc, #0]	; (8009120 <nanf+0x4>)
 800911e:	4770      	bx	lr
 8009120:	7fc00000 	.word	0x7fc00000

08009124 <rintf>:
 8009124:	0043      	lsls	r3, r0, #1
 8009126:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8009128:	0859      	lsrs	r1, r3, #1
 800912a:	0e1b      	lsrs	r3, r3, #24
 800912c:	3b7f      	subs	r3, #127	; 0x7f
 800912e:	0002      	movs	r2, r0
 8009130:	2b16      	cmp	r3, #22
 8009132:	dc38      	bgt.n	80091a6 <rintf+0x82>
 8009134:	2900      	cmp	r1, #0
 8009136:	d01d      	beq.n	8009174 <rintf+0x50>
 8009138:	0001      	movs	r1, r0
 800913a:	0fc4      	lsrs	r4, r0, #31
 800913c:	2b00      	cmp	r3, #0
 800913e:	da1a      	bge.n	8009176 <rintf+0x52>
 8009140:	0243      	lsls	r3, r0, #9
 8009142:	491c      	ldr	r1, [pc, #112]	; (80091b4 <rintf+0x90>)
 8009144:	0a5b      	lsrs	r3, r3, #9
 8009146:	00a0      	lsls	r0, r4, #2
 8009148:	5845      	ldr	r5, [r0, r1]
 800914a:	4259      	negs	r1, r3
 800914c:	4319      	orrs	r1, r3
 800914e:	2380      	movs	r3, #128	; 0x80
 8009150:	0a49      	lsrs	r1, r1, #9
 8009152:	03db      	lsls	r3, r3, #15
 8009154:	4019      	ands	r1, r3
 8009156:	0d13      	lsrs	r3, r2, #20
 8009158:	051b      	lsls	r3, r3, #20
 800915a:	4319      	orrs	r1, r3
 800915c:	1c28      	adds	r0, r5, #0
 800915e:	f7f7 f8d7 	bl	8000310 <__aeabi_fadd>
 8009162:	9001      	str	r0, [sp, #4]
 8009164:	9801      	ldr	r0, [sp, #4]
 8009166:	1c29      	adds	r1, r5, #0
 8009168:	f7f7 fd76 	bl	8000c58 <__aeabi_fsub>
 800916c:	0040      	lsls	r0, r0, #1
 800916e:	0840      	lsrs	r0, r0, #1
 8009170:	07e4      	lsls	r4, r4, #31
 8009172:	4320      	orrs	r0, r4
 8009174:	bd3e      	pop	{r1, r2, r3, r4, r5, pc}
 8009176:	4a10      	ldr	r2, [pc, #64]	; (80091b8 <rintf+0x94>)
 8009178:	411a      	asrs	r2, r3
 800917a:	4202      	tst	r2, r0
 800917c:	d0fa      	beq.n	8009174 <rintf+0x50>
 800917e:	0852      	lsrs	r2, r2, #1
 8009180:	4202      	tst	r2, r0
 8009182:	d004      	beq.n	800918e <rintf+0x6a>
 8009184:	4391      	bics	r1, r2
 8009186:	2280      	movs	r2, #128	; 0x80
 8009188:	0392      	lsls	r2, r2, #14
 800918a:	411a      	asrs	r2, r3
 800918c:	4311      	orrs	r1, r2
 800918e:	4b09      	ldr	r3, [pc, #36]	; (80091b4 <rintf+0x90>)
 8009190:	00a4      	lsls	r4, r4, #2
 8009192:	58e4      	ldr	r4, [r4, r3]
 8009194:	1c20      	adds	r0, r4, #0
 8009196:	f7f7 f8bb 	bl	8000310 <__aeabi_fadd>
 800919a:	9001      	str	r0, [sp, #4]
 800919c:	9801      	ldr	r0, [sp, #4]
 800919e:	1c21      	adds	r1, r4, #0
 80091a0:	f7f7 fd5a 	bl	8000c58 <__aeabi_fsub>
 80091a4:	e7e6      	b.n	8009174 <rintf+0x50>
 80091a6:	4b05      	ldr	r3, [pc, #20]	; (80091bc <rintf+0x98>)
 80091a8:	4299      	cmp	r1, r3
 80091aa:	d9e3      	bls.n	8009174 <rintf+0x50>
 80091ac:	1c01      	adds	r1, r0, #0
 80091ae:	f7f7 f8af 	bl	8000310 <__aeabi_fadd>
 80091b2:	e7df      	b.n	8009174 <rintf+0x50>
 80091b4:	080095ac 	.word	0x080095ac
 80091b8:	007fffff 	.word	0x007fffff
 80091bc:	7f7fffff 	.word	0x7f7fffff

080091c0 <scalbnf>:
 80091c0:	0043      	lsls	r3, r0, #1
 80091c2:	b570      	push	{r4, r5, r6, lr}
 80091c4:	0002      	movs	r2, r0
 80091c6:	000c      	movs	r4, r1
 80091c8:	0859      	lsrs	r1, r3, #1
 80091ca:	d005      	beq.n	80091d8 <scalbnf+0x18>
 80091cc:	4d1e      	ldr	r5, [pc, #120]	; (8009248 <scalbnf+0x88>)
 80091ce:	42a9      	cmp	r1, r5
 80091d0:	d903      	bls.n	80091da <scalbnf+0x1a>
 80091d2:	1c01      	adds	r1, r0, #0
 80091d4:	f7f7 f89c 	bl	8000310 <__aeabi_fadd>
 80091d8:	bd70      	pop	{r4, r5, r6, pc}
 80091da:	4d1c      	ldr	r5, [pc, #112]	; (800924c <scalbnf+0x8c>)
 80091dc:	42a9      	cmp	r1, r5
 80091de:	d815      	bhi.n	800920c <scalbnf+0x4c>
 80091e0:	2198      	movs	r1, #152	; 0x98
 80091e2:	05c9      	lsls	r1, r1, #23
 80091e4:	f7f7 fc06 	bl	80009f4 <__aeabi_fmul>
 80091e8:	4b19      	ldr	r3, [pc, #100]	; (8009250 <scalbnf+0x90>)
 80091ea:	429c      	cmp	r4, r3
 80091ec:	db21      	blt.n	8009232 <scalbnf+0x72>
 80091ee:	0002      	movs	r2, r0
 80091f0:	15c3      	asrs	r3, r0, #23
 80091f2:	b2db      	uxtb	r3, r3
 80091f4:	3b19      	subs	r3, #25
 80091f6:	191b      	adds	r3, r3, r4
 80091f8:	1c01      	adds	r1, r0, #0
 80091fa:	2bfe      	cmp	r3, #254	; 0xfe
 80091fc:	dc0f      	bgt.n	800921e <scalbnf+0x5e>
 80091fe:	2b00      	cmp	r3, #0
 8009200:	dd06      	ble.n	8009210 <scalbnf+0x50>
 8009202:	4814      	ldr	r0, [pc, #80]	; (8009254 <scalbnf+0x94>)
 8009204:	05db      	lsls	r3, r3, #23
 8009206:	4010      	ands	r0, r2
 8009208:	4318      	orrs	r0, r3
 800920a:	e7e5      	b.n	80091d8 <scalbnf+0x18>
 800920c:	0e1b      	lsrs	r3, r3, #24
 800920e:	e7f2      	b.n	80091f6 <scalbnf+0x36>
 8009210:	0019      	movs	r1, r3
 8009212:	3116      	adds	r1, #22
 8009214:	da0f      	bge.n	8009236 <scalbnf+0x76>
 8009216:	4b10      	ldr	r3, [pc, #64]	; (8009258 <scalbnf+0x98>)
 8009218:	1c01      	adds	r1, r0, #0
 800921a:	429c      	cmp	r4, r3
 800921c:	dd06      	ble.n	800922c <scalbnf+0x6c>
 800921e:	480f      	ldr	r0, [pc, #60]	; (800925c <scalbnf+0x9c>)
 8009220:	f000 f820 	bl	8009264 <copysignf>
 8009224:	490d      	ldr	r1, [pc, #52]	; (800925c <scalbnf+0x9c>)
 8009226:	f7f7 fbe5 	bl	80009f4 <__aeabi_fmul>
 800922a:	e7d5      	b.n	80091d8 <scalbnf+0x18>
 800922c:	480c      	ldr	r0, [pc, #48]	; (8009260 <scalbnf+0xa0>)
 800922e:	f000 f819 	bl	8009264 <copysignf>
 8009232:	490b      	ldr	r1, [pc, #44]	; (8009260 <scalbnf+0xa0>)
 8009234:	e7f7      	b.n	8009226 <scalbnf+0x66>
 8009236:	21cc      	movs	r1, #204	; 0xcc
 8009238:	4806      	ldr	r0, [pc, #24]	; (8009254 <scalbnf+0x94>)
 800923a:	3319      	adds	r3, #25
 800923c:	05db      	lsls	r3, r3, #23
 800923e:	4010      	ands	r0, r2
 8009240:	4318      	orrs	r0, r3
 8009242:	0589      	lsls	r1, r1, #22
 8009244:	e7ef      	b.n	8009226 <scalbnf+0x66>
 8009246:	46c0      	nop			; (mov r8, r8)
 8009248:	7f7fffff 	.word	0x7f7fffff
 800924c:	007fffff 	.word	0x007fffff
 8009250:	ffff3cb0 	.word	0xffff3cb0
 8009254:	807fffff 	.word	0x807fffff
 8009258:	0000c350 	.word	0x0000c350
 800925c:	7149f2ca 	.word	0x7149f2ca
 8009260:	0da24260 	.word	0x0da24260

08009264 <copysignf>:
 8009264:	0040      	lsls	r0, r0, #1
 8009266:	0fc9      	lsrs	r1, r1, #31
 8009268:	07c9      	lsls	r1, r1, #31
 800926a:	0840      	lsrs	r0, r0, #1
 800926c:	4308      	orrs	r0, r1
 800926e:	4770      	bx	lr

08009270 <_init>:
 8009270:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009272:	46c0      	nop			; (mov r8, r8)
 8009274:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009276:	bc08      	pop	{r3}
 8009278:	469e      	mov	lr, r3
 800927a:	4770      	bx	lr

0800927c <_fini>:
 800927c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800927e:	46c0      	nop			; (mov r8, r8)
 8009280:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009282:	bc08      	pop	{r3}
 8009284:	469e      	mov	lr, r3
 8009286:	4770      	bx	lr
